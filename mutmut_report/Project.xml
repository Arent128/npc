<?xml version="1.0" ?>
<testsuites failures="97" errors="0" tests="3141" disabled="0" time="0.0">
	<testsuite name="mutmut" disabled="0" failures="97" errors="0" skipped="0" time="0" tests="3141">
		<testcase name="Mutant #1" file="npc/parser.py" line="14">
			<system-out>VALID_EXTENSIONS = ('.nwod', '.dnd3', '.dfrpg')</system-out>
		</testcase>
		<testcase name="Mutant #2" file="npc/parser.py" line="14">
			<system-out>VALID_EXTENSIONS = ('.nwod', '.dnd3', '.dfrpg')</system-out>
		</testcase>
		<testcase name="Mutant #3" file="npc/parser.py" line="14">
			<system-out>VALID_EXTENSIONS = ('.nwod', '.dnd3', '.dfrpg')</system-out>
		</testcase>
		<testcase name="Mutant #4" file="npc/parser.py" line="14">
			<system-out>VALID_EXTENSIONS = ('.nwod', '.dnd3', '.dfrpg')</system-out>
		</testcase>
		<testcase name="Mutant #5" file="npc/parser.py" line="17">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -15,7 +15,7 @@
 VALID_EXTENSIONS = ('.nwod', '.dnd3', '.dfrpg')
 &quot;&quot;&quot;tuple: file extensions that should be parsed&quot;&quot;&quot;
 
-DEPRECATED_TAGS = ('hidegroup', 'hideranks')
+DEPRECATED_TAGS = ('XXhidegroupXX', 'hideranks')
 
 SECTION_RE = re.compile(r'^--.+--\s*$')
 TAG_RE = re.compile(r'^@(?P&lt;tag&gt;#\w+|\w+)\s+(?P&lt;value&gt;.*)$')
</failure>
			<system-out>DEPRECATED_TAGS = ('hidegroup', 'hideranks')</system-out>
		</testcase>
		<testcase name="Mutant #6" file="npc/parser.py" line="17">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -15,7 +15,7 @@
 VALID_EXTENSIONS = ('.nwod', '.dnd3', '.dfrpg')
 &quot;&quot;&quot;tuple: file extensions that should be parsed&quot;&quot;&quot;
 
-DEPRECATED_TAGS = ('hidegroup', 'hideranks')
+DEPRECATED_TAGS = ('hidegroup', 'XXhideranksXX')
 
 SECTION_RE = re.compile(r'^--.+--\s*$')
 TAG_RE = re.compile(r'^@(?P&lt;tag&gt;#\w+|\w+)\s+(?P&lt;value&gt;.*)$')
</failure>
			<system-out>DEPRECATED_TAGS = ('hidegroup', 'hideranks')</system-out>
		</testcase>
		<testcase name="Mutant #7" file="npc/parser.py" line="17">
			<system-out>DEPRECATED_TAGS = ('hidegroup', 'hideranks')</system-out>
		</testcase>
		<testcase name="Mutant #8" file="npc/parser.py" line="19">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -17,7 +17,7 @@
 
 DEPRECATED_TAGS = ('hidegroup', 'hideranks')
 
-SECTION_RE = re.compile(r'^--.+--\s*$')
+SECTION_RE = re.compile(r'XX^--.+--\s*$XX')
 TAG_RE = re.compile(r'^@(?P&lt;tag&gt;#\w+|\w+)\s+(?P&lt;value&gt;.*)$')
 HIDE_RE = re.compile(r'\s*&gt;&gt;\s*')
 
</failure>
			<system-out>SECTION_RE = re.compile(r'^--.+--\s*$')</system-out>
		</testcase>
		<testcase name="Mutant #9" file="npc/parser.py" line="19">
			<system-out>SECTION_RE = re.compile(r'^--.+--\s*$')</system-out>
		</testcase>
		<testcase name="Mutant #10" file="npc/parser.py" line="20">
			<system-out>TAG_RE = re.compile(r'^@(?P&lt;tag&gt;#\w+|\w+)\s+(?P&lt;value&gt;.*)$')</system-out>
		</testcase>
		<testcase name="Mutant #11" file="npc/parser.py" line="20">
			<system-out>TAG_RE = re.compile(r'^@(?P&lt;tag&gt;#\w+|\w+)\s+(?P&lt;value&gt;.*)$')</system-out>
		</testcase>
		<testcase name="Mutant #12" file="npc/parser.py" line="21">
			<system-out>HIDE_RE = re.compile(r'\s*&gt;&gt;\s*')</system-out>
		</testcase>
		<testcase name="Mutant #13" file="npc/parser.py" line="21">
			<system-out>HIDE_RE = re.compile(r'\s*&gt;&gt;\s*')</system-out>
		</testcase>
		<testcase name="Mutant #14" file="npc/parser.py" line="37">
			<system-out>    if search_paths is None:</system-out>
		</testcase>
		<testcase name="Mutant #15" file="npc/parser.py" line="38">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -36,7 +36,7 @@
         every path of search_paths, but not in ignore_paths.
     &quot;&quot;&quot;
     if search_paths is None:
-        search_paths = ['.']
+        search_paths = ['XX.XX']
 
     if ignore_paths:
         ignore_paths[:] = [path.normpath(d) for d in ignore_paths]
</failure>
			<system-out>        search_paths = ['.']</system-out>
		</testcase>
		<testcase name="Mutant #16" file="npc/parser.py" line="38">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -36,7 +36,7 @@
         every path of search_paths, but not in ignore_paths.
     &quot;&quot;&quot;
     if search_paths is None:
-        search_paths = ['.']
+        search_paths = None
 
     if ignore_paths:
         ignore_paths[:] = [path.normpath(d) for d in ignore_paths]
</failure>
			<system-out>        search_paths = ['.']</system-out>
		</testcase>
		<testcase name="Mutant #17" file="npc/parser.py" line="41">
			<system-out>        ignore_paths[:] = [path.normpath(d) for d in ignore_paths]</system-out>
		</testcase>
		<testcase name="Mutant #18" file="npc/parser.py" line="45">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -43,7 +43,7 @@
 
     return itertools.chain.from_iterable((_parse_path(path, ignore_paths) for path in search_paths))
 
-def _parse_path(start_path, ignore_paths=None, include_bare=False):
+def _parse_path(start_path, ignore_paths=None, include_bare=True):
     &quot;&quot;&quot;
     Parse all the character files under a directory
 
</failure>
			<system-out>def _parse_path(start_path, ignore_paths=None, include_bare=False):</system-out>
		</testcase>
		<testcase name="Mutant #19" file="npc/parser.py" line="62">
			<system-out>    if ignore_paths is None:</system-out>
		</testcase>
		<testcase name="Mutant #20" file="npc/parser.py" line="63">
			<system-out>        ignore_paths = []</system-out>
		</testcase>
		<testcase name="Mutant #21" file="npc/parser.py" line="65">
			<system-out>    characters = []</system-out>
		</testcase>
		<testcase name="Mutant #22" file="npc/parser.py" line="68">
			<system-out>            target_path = path.join(dirpath, name)</system-out>
		</testcase>
		<testcase name="Mutant #23" file="npc/parser.py" line="69">
			<system-out>            if target_path in ignore_paths:</system-out>
		</testcase>
		<testcase name="Mutant #24" file="npc/parser.py" line="71">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -69,7 +69,7 @@
             target_path = path.join(dirpath, name)
             if target_path in ignore_paths:
                 # skip ignored files
-                continue
+                break
             _, ext = path.splitext(name)
             if ext in VALID_EXTENSIONS or (include_bare and not ext):
                 data = parse_character(target_path)
</failure>
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #25" file="npc/parser.py" line="72">
			<system-out>            _, ext = path.splitext(name)</system-out>
		</testcase>
		<testcase name="Mutant #26" file="npc/parser.py" line="73">
			<system-out>            if ext in VALID_EXTENSIONS or (include_bare and not ext):</system-out>
		</testcase>
		<testcase name="Mutant #27" file="npc/parser.py" line="73">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -71,7 +71,7 @@
                 # skip ignored files
                 continue
             _, ext = path.splitext(name)
-            if ext in VALID_EXTENSIONS or (include_bare and not ext):
+            if ext in VALID_EXTENSIONS or (include_bare and  ext):
                 data = parse_character(target_path)
                 characters.append(data)
     return characters
</failure>
			<system-out>            if ext in VALID_EXTENSIONS or (include_bare and not ext):</system-out>
		</testcase>
		<testcase name="Mutant #28" file="npc/parser.py" line="73">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -71,7 +71,7 @@
                 # skip ignored files
                 continue
             _, ext = path.splitext(name)
-            if ext in VALID_EXTENSIONS or (include_bare and not ext):
+            if ext in VALID_EXTENSIONS or (include_bare or not ext):
                 data = parse_character(target_path)
                 characters.append(data)
     return characters
</failure>
			<system-out>            if ext in VALID_EXTENSIONS or (include_bare and not ext):</system-out>
		</testcase>
		<testcase name="Mutant #29" file="npc/parser.py" line="73">
			<system-out>            if ext in VALID_EXTENSIONS or (include_bare and not ext):</system-out>
		</testcase>
		<testcase name="Mutant #30" file="npc/parser.py" line="74">
			<system-out>                data = parse_character(target_path)</system-out>
		</testcase>
		<testcase name="Mutant #31" file="npc/parser.py" line="103">
			<system-out>        return base not in ignore \</system-out>
		</testcase>
		<testcase name="Mutant #32" file="npc/parser.py" line="104">
			<system-out>            and path.join(base, check) not in ignore</system-out>
		</testcase>
		<testcase name="Mutant #33" file="npc/parser.py" line="104">
			<system-out>            and path.join(base, check) not in ignore</system-out>
		</testcase>
		<testcase name="Mutant #34" file="npc/parser.py" line="106">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -104,7 +104,7 @@
         return base not in ignore \
             and path.join(base, check) not in ignore
 
-    for dirpath, dirnames, filenames in walk(root, followlinks=True):
+    for dirpath, dirnames, filenames in walk(root, followlinks=False):
         dirnames[:] = [d for d in dirnames if should_search(dirpath, d)]
         yield dirpath, dirnames, filenames
 
</failure>
			<system-out>    for dirpath, dirnames, filenames in walk(root, followlinks=True):</system-out>
		</testcase>
		<testcase name="Mutant #35" file="npc/parser.py" line="107">
			<system-out>        dirnames[:] = [d for d in dirnames if should_search(dirpath, d)]</system-out>
		</testcase>
		<testcase name="Mutant #36" file="npc/parser.py" line="124">
			<system-out>    basename = path.basename(char_file_path)</system-out>
		</testcase>
		<testcase name="Mutant #37" file="npc/parser.py" line="125">
			<system-out>    name = path.splitext(basename)[0].split(' - ', 1)[0]</system-out>
		</testcase>
		<testcase name="Mutant #38" file="npc/parser.py" line="125">
			<system-out>    name = path.splitext(basename)[0].split(' - ', 1)[0]</system-out>
		</testcase>
		<testcase name="Mutant #39" file="npc/parser.py" line="125">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -123,7 +123,7 @@
 
     # derive character name from basename
     basename = path.basename(char_file_path)
-    name = path.splitext(basename)[0].split(' - ', 1)[0]
+    name = path.splitext(basename)[0].split(' - ', 2)[0]
 
     # instantiate new character
     parsed_char = character.Character(
</failure>
			<system-out>    name = path.splitext(basename)[0].split(' - ', 1)[0]</system-out>
		</testcase>
		<testcase name="Mutant #40" file="npc/parser.py" line="125">
			<system-out>    name = path.splitext(basename)[0].split(' - ', 1)[0]</system-out>
		</testcase>
		<testcase name="Mutant #41" file="npc/parser.py" line="125">
			<system-out>    name = path.splitext(basename)[0].split(' - ', 1)[0]</system-out>
		</testcase>
		<testcase name="Mutant #42" file="npc/parser.py" line="131">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #43" file="npc/parser.py" line="133">
			<system-out>    with open(char_file_path, 'r') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #44" file="npc/parser.py" line="134">
			<system-out>        subtag_registry = {}</system-out>
		</testcase>
		<testcase name="Mutant #45" file="npc/parser.py" line="135">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -133,7 +133,7 @@
 
     with open(char_file_path, 'r') as char_file:
         subtag_registry = {}
-        previous_line_empty = False
+        previous_line_empty = True
 
         for line in char_file:
             # stop processing once we see game stats
</failure>
			<system-out>        previous_line_empty = False</system-out>
		</testcase>
		<testcase name="Mutant #46" file="npc/parser.py" line="135">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -133,7 +133,7 @@
 
     with open(char_file_path, 'r') as char_file:
         subtag_registry = {}
-        previous_line_empty = False
+        previous_line_empty = None
 
         for line in char_file:
             # stop processing once we see game stats
</failure>
			<system-out>        previous_line_empty = False</system-out>
		</testcase>
		<testcase name="Mutant #47" file="npc/parser.py" line="140">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -138,7 +138,7 @@
         for line in char_file:
             # stop processing once we see game stats
             if SECTION_RE.match(line):
-                break
+                continue
 
             match = TAG_RE.match(line)
             if match:
</failure>
			<system-out>                break</system-out>
		</testcase>
		<testcase name="Mutant #48" file="npc/parser.py" line="142">
			<system-out>            match = TAG_RE.match(line)</system-out>
		</testcase>
		<testcase name="Mutant #49" file="npc/parser.py" line="144">
			<system-out>                tag = match.group('tag').lower()</system-out>
		</testcase>
		<testcase name="Mutant #50" file="npc/parser.py" line="144">
			<system-out>                tag = match.group('tag').lower()</system-out>
		</testcase>
		<testcase name="Mutant #51" file="npc/parser.py" line="145">
			<system-out>                value = match.group('value')</system-out>
		</testcase>
		<testcase name="Mutant #52" file="npc/parser.py" line="145">
			<system-out>                value = match.group('value')</system-out>
		</testcase>
		<testcase name="Mutant #53" file="npc/parser.py" line="148">
			<system-out>                if tag[0] == '#':</system-out>
		</testcase>
		<testcase name="Mutant #54" file="npc/parser.py" line="148">
			<system-out>                if tag[0] == '#':</system-out>
		</testcase>
		<testcase name="Mutant #55" file="npc/parser.py" line="148">
			<system-out>                if tag[0] == '#':</system-out>
		</testcase>
		<testcase name="Mutant #56" file="npc/parser.py" line="149">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -147,7 +147,7 @@
 
                 # skip comment tags
                 if tag[0] == '#':
-                    continue
+                    break
 
                 # handle compound tags
                 if tag == 'changeling':
</failure>
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #57" file="npc/parser.py" line="152">
			<system-out>                if tag == 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #58" file="npc/parser.py" line="152">
			<system-out>                if tag == 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #59" file="npc/parser.py" line="154">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -152,7 +152,7 @@
                 # handle compound tags
                 if tag == 'changeling':
                     # grab attributes from compound tag
-                    bits = value.split(maxsplit=1)
+                    bits = value.split(maxsplit=2)
                     parsed_char.tags('type').append('Changeling')
                     if len(bits):
                         parsed_char.tags('seeming').append(bits[0])
</failure>
			<system-out>                    bits = value.split(maxsplit=1)</system-out>
		</testcase>
		<testcase name="Mutant #60" file="npc/parser.py" line="154">
			<system-out>                    bits = value.split(maxsplit=1)</system-out>
		</testcase>
		<testcase name="Mutant #61" file="npc/parser.py" line="155">
			<system-out>                    parsed_char.tags('type').append('Changeling')</system-out>
		</testcase>
		<testcase name="Mutant #62" file="npc/parser.py" line="155">
			<system-out>                    parsed_char.tags('type').append('Changeling')</system-out>
		</testcase>
		<testcase name="Mutant #63" file="npc/parser.py" line="157">
			<system-out>                        parsed_char.tags('seeming').append(bits[0])</system-out>
		</testcase>
		<testcase name="Mutant #64" file="npc/parser.py" line="157">
			<system-out>                        parsed_char.tags('seeming').append(bits[0])</system-out>
		</testcase>
		<testcase name="Mutant #65" file="npc/parser.py" line="158">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -156,7 +156,7 @@
                     parsed_char.tags('type').append('Changeling')
                     if len(bits):
                         parsed_char.tags('seeming').append(bits[0])
-                    if len(bits) &gt; 1:
+                    if len(bits) &gt;= 1:
                         parsed_char.tags('kith').append(bits[1])
                     continue
                 elif tag == 'werewolf':
</failure>
			<system-out>                    if len(bits) &gt; 1:</system-out>
		</testcase>
		<testcase name="Mutant #66" file="npc/parser.py" line="158">
			<system-out>                    if len(bits) &gt; 1:</system-out>
		</testcase>
		<testcase name="Mutant #67" file="npc/parser.py" line="159">
			<system-out>                        parsed_char.tags('kith').append(bits[1])</system-out>
		</testcase>
		<testcase name="Mutant #68" file="npc/parser.py" line="159">
			<system-out>                        parsed_char.tags('kith').append(bits[1])</system-out>
		</testcase>
		<testcase name="Mutant #69" file="npc/parser.py" line="160">
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #70" file="npc/parser.py" line="161">
			<system-out>                elif tag == 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #71" file="npc/parser.py" line="161">
			<system-out>                elif tag == 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #72" file="npc/parser.py" line="162">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -160,7 +160,7 @@
                         parsed_char.tags('kith').append(bits[1])
                     continue
                 elif tag == 'werewolf':
-                    parsed_char.tags('type').append('Werewolf')
+                    parsed_char.tags('XXtypeXX').append('Werewolf')
                     parsed_char.tags('auspice').append(value)
                     continue
 
</failure>
			<system-out>                    parsed_char.tags('type').append('Werewolf')</system-out>
		</testcase>
		<testcase name="Mutant #73" file="npc/parser.py" line="162">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -160,7 +160,7 @@
                         parsed_char.tags('kith').append(bits[1])
                     continue
                 elif tag == 'werewolf':
-                    parsed_char.tags('type').append('Werewolf')
+                    parsed_char.tags('type').append('XXWerewolfXX')
                     parsed_char.tags('auspice').append(value)
                     continue
 
</failure>
			<system-out>                    parsed_char.tags('type').append('Werewolf')</system-out>
		</testcase>
		<testcase name="Mutant #74" file="npc/parser.py" line="163">
			<system-out>                    parsed_char.tags('auspice').append(value)</system-out>
		</testcase>
		<testcase name="Mutant #75" file="npc/parser.py" line="164">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -162,7 +162,7 @@
                 elif tag == 'werewolf':
                     parsed_char.tags('type').append('Werewolf')
                     parsed_char.tags('auspice').append(value)
-                    continue
+                    break
 
                 # replace first name
                 if tag == 'realname':
</failure>
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #76" file="npc/parser.py" line="167">
			<system-out>                if tag == 'realname':</system-out>
		</testcase>
		<testcase name="Mutant #77" file="npc/parser.py" line="167">
			<system-out>                if tag == 'realname':</system-out>
		</testcase>
		<testcase name="Mutant #78" file="npc/parser.py" line="168">
			<system-out>                    parsed_char.tags('name')[0] = value</system-out>
		</testcase>
		<testcase name="Mutant #79" file="npc/parser.py" line="168">
			<system-out>                    parsed_char.tags('name')[0] = value</system-out>
		</testcase>
		<testcase name="Mutant #80" file="npc/parser.py" line="168">
			<system-out>                    parsed_char.tags('name')[0] = value</system-out>
		</testcase>
		<testcase name="Mutant #81" file="npc/parser.py" line="169">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -167,7 +167,7 @@
                 # replace first name
                 if tag == 'realname':
                     parsed_char.tags('name')[0] = value
-                    continue
+                    break
 
                 # handle rank logic for group tags
                 if parsed_char.tags(tag).subtag_name:
</failure>
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #82" file="npc/parser.py" line="173">
			<system-out>                    subtag_registry[parsed_char.tags(tag).subtag_name] = (tag, value)</system-out>
		</testcase>
		<testcase name="Mutant #83" file="npc/parser.py" line="174">
			<system-out>                if tag in subtag_registry:</system-out>
		</testcase>
		<testcase name="Mutant #84" file="npc/parser.py" line="175">
			<system-out>                    supertag, supervalue = subtag_registry[tag]</system-out>
		</testcase>
		<testcase name="Mutant #85" file="npc/parser.py" line="177">
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #86" file="npc/parser.py" line="180">
			<system-out>                if tag == 'hide':</system-out>
		</testcase>
		<testcase name="Mutant #87" file="npc/parser.py" line="180">
			<system-out>                if tag == 'hide':</system-out>
		</testcase>
		<testcase name="Mutant #88" file="npc/parser.py" line="181">
			<system-out>                    parts = HIDE_RE.split(value)</system-out>
		</testcase>
		<testcase name="Mutant #89" file="npc/parser.py" line="183">
			<system-out>                    tagname = parts.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #90" file="npc/parser.py" line="183">
			<system-out>                    tagname = parts.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #91" file="npc/parser.py" line="184">
			<system-out>                    if not parts:</system-out>
		</testcase>
		<testcase name="Mutant #92" file="npc/parser.py" line="185">
			<system-out>                        parsed_char.tags(tagname).hidden = True</system-out>
		</testcase>
		<testcase name="Mutant #93" file="npc/parser.py" line="185">
			<system-out>                        parsed_char.tags(tagname).hidden = True</system-out>
		</testcase>
		<testcase name="Mutant #94" file="npc/parser.py" line="186">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -184,7 +184,7 @@
                     tagname = parts.pop(0)
                     if not parts:
                         parsed_char.tags(tagname).hidden = True
-                        continue
+                        break
 
                     first_value = parts.pop(0)
                     if not parts:
</failure>
			<system-out>                        continue</system-out>
		</testcase>
		<testcase name="Mutant #95" file="npc/parser.py" line="188">
			<system-out>                    first_value = parts.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #96" file="npc/parser.py" line="188">
			<system-out>                    first_value = parts.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #97" file="npc/parser.py" line="189">
			<system-out>                    if not parts:</system-out>
		</testcase>
		<testcase name="Mutant #98" file="npc/parser.py" line="191">
			<system-out>                        continue</system-out>
		</testcase>
		<testcase name="Mutant #99" file="npc/parser.py" line="193">
			<system-out>                    second_value = parts.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #100" file="npc/parser.py" line="193">
			<system-out>                    second_value = parts.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #101" file="npc/parser.py" line="194">
			<system-out>                    if not parts:</system-out>
		</testcase>
		<testcase name="Mutant #102" file="npc/parser.py" line="195">
			<system-out>                        if second_value == 'subtags':</system-out>
		</testcase>
		<testcase name="Mutant #103" file="npc/parser.py" line="195">
			<system-out>                        if second_value == 'subtags':</system-out>
		</testcase>
		<testcase name="Mutant #104" file="npc/parser.py" line="196">
			<system-out>                            parsed_char.tags(tagname).subtag(first_value).hidden = True</system-out>
		</testcase>
		<testcase name="Mutant #105" file="npc/parser.py" line="196">
			<system-out>                            parsed_char.tags(tagname).subtag(first_value).hidden = True</system-out>
		</testcase>
		<testcase name="Mutant #106" file="npc/parser.py" line="199">
			<system-out>                        continue</system-out>
		</testcase>
		<testcase name="Mutant #107" file="npc/parser.py" line="203">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -201,7 +201,7 @@
 
                     # If we can't parse the hide string, hide the whole thing as
                     # a tag and let the Character object deal with it.
-                    parsed_char.tags(value).hidden = True
+                    parsed_char.tags(value).hidden = False
                     continue
 
                 if tag in DEPRECATED_TAGS:
</failure>
			<system-out>                    parsed_char.tags(value).hidden = True</system-out>
		</testcase>
		<testcase name="Mutant #108" file="npc/parser.py" line="203">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -201,7 +201,7 @@
 
                     # If we can't parse the hide string, hide the whole thing as
                     # a tag and let the Character object deal with it.
-                    parsed_char.tags(value).hidden = True
+                    parsed_char.tags(value).hidden = None
                     continue
 
                 if tag in DEPRECATED_TAGS:
</failure>
			<system-out>                    parsed_char.tags(value).hidden = True</system-out>
		</testcase>
		<testcase name="Mutant #109" file="npc/parser.py" line="204">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -202,7 +202,7 @@
                     # If we can't parse the hide string, hide the whole thing as
                     # a tag and let the Character object deal with it.
                     parsed_char.tags(value).hidden = True
-                    continue
+                    break
 
                 if tag in DEPRECATED_TAGS:
                     print_err(&quot;The tag '{}' in `{}` is deprecated and will stop working in the future&quot;.format(tag, char_file_path))
</failure>
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #110" file="npc/parser.py" line="206">
			<system-out>                if tag in DEPRECATED_TAGS:</system-out>
		</testcase>
		<testcase name="Mutant #111" file="npc/parser.py" line="207">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -205,7 +205,7 @@
                     continue
 
                 if tag in DEPRECATED_TAGS:
-                    print_err(&quot;The tag '{}' in `{}` is deprecated and will stop working in the future&quot;.format(tag, char_file_path))
+                    print_err(&quot;XXThe tag '{}' in `{}` is deprecated and will stop working in the futureXX&quot;.format(tag, char_file_path))
 
                 parsed_char.tags(tag).append(value)
             else:
</failure>
			<system-out>                    print_err(&quot;The tag '{}' in `{}` is deprecated and will stop working in the future&quot;.format(tag, char_file_path))</system-out>
		</testcase>
		<testcase name="Mutant #112" file="npc/parser.py" line="212">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -210,7 +210,7 @@
                 parsed_char.tags(tag).append(value)
             else:
                 # Ignore second empty description line in a row
-                if line == &quot;\n&quot;:
+                if line != &quot;\n&quot;:
                     if previous_line_empty:
                         continue
                     else:
</failure>
			<system-out>                if line == &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #113" file="npc/parser.py" line="212">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -210,7 +210,7 @@
                 parsed_char.tags(tag).append(value)
             else:
                 # Ignore second empty description line in a row
-                if line == &quot;\n&quot;:
+                if line == &quot;XX\nXX&quot;:
                     if previous_line_empty:
                         continue
                     else:
</failure>
			<system-out>                if line == &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #114" file="npc/parser.py" line="214">
			<system-out>                        continue</system-out>
		</testcase>
		<testcase name="Mutant #115" file="npc/parser.py" line="216">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -214,7 +214,7 @@
                     if previous_line_empty:
                         continue
                     else:
-                        previous_line_empty = True
+                        previous_line_empty = False
                 else:
                     previous_line_empty = False
 
</failure>
			<system-out>                        previous_line_empty = True</system-out>
		</testcase>
		<testcase name="Mutant #116" file="npc/parser.py" line="216">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -214,7 +214,7 @@
                     if previous_line_empty:
                         continue
                     else:
-                        previous_line_empty = True
+                        previous_line_empty = None
                 else:
                     previous_line_empty = False
 
</failure>
			<system-out>                        previous_line_empty = True</system-out>
		</testcase>
		<testcase name="Mutant #117" file="npc/parser.py" line="218">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -216,7 +216,7 @@
                     else:
                         previous_line_empty = True
                 else:
-                    previous_line_empty = False
+                    previous_line_empty = True
 
                 # all remaining text goes in the description
                 parsed_char.tags('description').append(line.strip())
</failure>
			<system-out>                    previous_line_empty = False</system-out>
		</testcase>
		<testcase name="Mutant #118" file="npc/parser.py" line="218">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -216,7 +216,7 @@
                     else:
                         previous_line_empty = True
                 else:
-                    previous_line_empty = False
+                    previous_line_empty = None
 
                 # all remaining text goes in the description
                 parsed_char.tags('description').append(line.strip())
</failure>
			<system-out>                    previous_line_empty = False</system-out>
		</testcase>
		<testcase name="Mutant #119" file="npc/parser.py" line="221">
			<failure type="failure" message="bad_survived">--- npc/parser.py
+++ npc/parser.py
@@ -219,7 +219,7 @@
                     previous_line_empty = False
 
                 # all remaining text goes in the description
-                parsed_char.tags('description').append(line.strip())
+                parsed_char.tags('XXdescriptionXX').append(line.strip())
                 continue
 
     return character.build(other_char=parsed_char)
</failure>
			<system-out>                parsed_char.tags('description').append(line.strip())</system-out>
		</testcase>
		<testcase name="Mutant #120" file="npc/parser.py" line="222">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #121" file="npc/__main__.py" line="2">
			<failure type="failure" message="bad_survived">--- npc/__main__.py
+++ npc/__main__.py
@@ -1,5 +1,5 @@
 from .cli import start
 
-if __name__ == '__main__':
+if __name__ != '__main__':
     start()
 
</failure>
			<system-out>if __name__ == '__main__':</system-out>
		</testcase>
		<testcase name="Mutant #122" file="npc/__main__.py" line="2">
			<failure type="failure" message="bad_survived">--- npc/__main__.py
+++ npc/__main__.py
@@ -1,5 +1,5 @@
 from .cli import start
 
-if __name__ == '__main__':
+if __name__ == 'XX__main__XX':
     start()
 
</failure>
			<system-out>if __name__ == '__main__':</system-out>
		</testcase>
		<testcase name="Mutant #123" file="npc/commands/listing.py" line="51">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #124" file="npc/commands/listing.py" line="51">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #125" file="npc/commands/listing.py" line="52">
			<system-out>    if not ignore:</system-out>
		</testcase>
		<testcase name="Mutant #126" file="npc/commands/listing.py" line="53">
			<system-out>        ignore = []</system-out>
		</testcase>
		<testcase name="Mutant #127" file="npc/commands/listing.py" line="54">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -52,7 +52,7 @@
     prefs = kwargs.get('prefs', settings.InternalSettings())
     if not ignore:
         ignore = []
-    ignore.extend(prefs.get_ignored_paths('listing'))
+    ignore.extend(prefs.get_ignored_paths('XXlistingXX'))
     do_sort = kwargs.get('do_sort', True)
     partial = kwargs.get('partial', False)
     update_progress = kwargs.get('progress', lambda i, t: False)
</failure>
			<system-out>    ignore.extend(prefs.get_ignored_paths('listing'))</system-out>
		</testcase>
		<testcase name="Mutant #128" file="npc/commands/listing.py" line="55">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -53,7 +53,7 @@
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('listing'))
-    do_sort = kwargs.get('do_sort', True)
+    do_sort = kwargs.get('XXdo_sortXX', True)
     partial = kwargs.get('partial', False)
     update_progress = kwargs.get('progress', lambda i, t: False)
 
</failure>
			<system-out>    do_sort = kwargs.get('do_sort', True)</system-out>
		</testcase>
		<testcase name="Mutant #129" file="npc/commands/listing.py" line="55">
			<system-out>    do_sort = kwargs.get('do_sort', True)</system-out>
		</testcase>
		<testcase name="Mutant #130" file="npc/commands/listing.py" line="55">
			<system-out>    do_sort = kwargs.get('do_sort', True)</system-out>
		</testcase>
		<testcase name="Mutant #131" file="npc/commands/listing.py" line="56">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -54,7 +54,7 @@
         ignore = []
     ignore.extend(prefs.get_ignored_paths('listing'))
     do_sort = kwargs.get('do_sort', True)
-    partial = kwargs.get('partial', False)
+    partial = kwargs.get('XXpartialXX', False)
     update_progress = kwargs.get('progress', lambda i, t: False)
 
     sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []
</failure>
			<system-out>    partial = kwargs.get('partial', False)</system-out>
		</testcase>
		<testcase name="Mutant #132" file="npc/commands/listing.py" line="56">
			<system-out>    partial = kwargs.get('partial', False)</system-out>
		</testcase>
		<testcase name="Mutant #133" file="npc/commands/listing.py" line="56">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -54,7 +54,7 @@
         ignore = []
     ignore.extend(prefs.get_ignored_paths('listing'))
     do_sort = kwargs.get('do_sort', True)
-    partial = kwargs.get('partial', False)
+    partial = None
     update_progress = kwargs.get('progress', lambda i, t: False)
 
     sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []
</failure>
			<system-out>    partial = kwargs.get('partial', False)</system-out>
		</testcase>
		<testcase name="Mutant #134" file="npc/commands/listing.py" line="57">
			<system-out>    update_progress = kwargs.get('progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #135" file="npc/commands/listing.py" line="57">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -55,7 +55,7 @@
     ignore.extend(prefs.get_ignored_paths('listing'))
     do_sort = kwargs.get('do_sort', True)
     partial = kwargs.get('partial', False)
-    update_progress = kwargs.get('progress', lambda i, t: False)
+    update_progress = kwargs.get('progress', lambda i, t: True)
 
     sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []
     headings = kwargs.get('headings', sort_order)
</failure>
			<system-out>    update_progress = kwargs.get('progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #136" file="npc/commands/listing.py" line="57">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -55,7 +55,7 @@
     ignore.extend(prefs.get_ignored_paths('listing'))
     do_sort = kwargs.get('do_sort', True)
     partial = kwargs.get('partial', False)
-    update_progress = kwargs.get('progress', lambda i, t: False)
+    update_progress = kwargs.get('progress', lambda i, t: None)
 
     sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []
     headings = kwargs.get('headings', sort_order)
</failure>
			<system-out>    update_progress = kwargs.get('progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #137" file="npc/commands/listing.py" line="57">
			<system-out>    update_progress = kwargs.get('progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #138" file="npc/commands/listing.py" line="59">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -57,7 +57,7 @@
     partial = kwargs.get('partial', False)
     update_progress = kwargs.get('progress', lambda i, t: False)
 
-    sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []
+    sort_order = kwargs.get('XXsort_byXX', prefs.get('listing.sort_by')) if do_sort else []
     headings = kwargs.get('headings', sort_order)
 
     characters = _refine_characters(parser.get_characters(flatten(search), ignore))
</failure>
			<system-out>    sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []</system-out>
		</testcase>
		<testcase name="Mutant #139" file="npc/commands/listing.py" line="59">
			<system-out>    sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []</system-out>
		</testcase>
		<testcase name="Mutant #140" file="npc/commands/listing.py" line="59">
			<system-out>    sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []</system-out>
		</testcase>
		<testcase name="Mutant #141" file="npc/commands/listing.py" line="60">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -58,7 +58,7 @@
     update_progress = kwargs.get('progress', lambda i, t: False)
 
     sort_order = kwargs.get('sort_by', prefs.get('listing.sort_by')) if do_sort else []
-    headings = kwargs.get('headings', sort_order)
+    headings = kwargs.get('XXheadingsXX', sort_order)
 
     characters = _refine_characters(parser.get_characters(flatten(search), ignore))
     if do_sort:
</failure>
			<system-out>    headings = kwargs.get('headings', sort_order)</system-out>
		</testcase>
		<testcase name="Mutant #142" file="npc/commands/listing.py" line="60">
			<system-out>    headings = kwargs.get('headings', sort_order)</system-out>
		</testcase>
		<testcase name="Mutant #143" file="npc/commands/listing.py" line="62">
			<system-out>    characters = _refine_characters(parser.get_characters(flatten(search), ignore))</system-out>
		</testcase>
		<testcase name="Mutant #144" file="npc/commands/listing.py" line="64">
			<system-out>        sorter = util.character_sorter.CharacterSorter(sort_order, prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #145" file="npc/commands/listing.py" line="65">
			<system-out>        characters = sorter.sort(characters)</system-out>
		</testcase>
		<testcase name="Mutant #146" file="npc/commands/listing.py" line="67">
			<system-out>    if fmt == &quot;default&quot; or not fmt:</system-out>
		</testcase>
		<testcase name="Mutant #147" file="npc/commands/listing.py" line="67">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -65,7 +65,7 @@
         sorter = util.character_sorter.CharacterSorter(sort_order, prefs=prefs)
         characters = sorter.sort(characters)
 
-    if fmt == &quot;default&quot; or not fmt:
+    if fmt == &quot;XXdefaultXX&quot; or not fmt:
         fmt = prefs.get('listing.default_format')
     out_type = formatters.get_canonical_format_name(fmt)
 
</failure>
			<system-out>    if fmt == &quot;default&quot; or not fmt:</system-out>
		</testcase>
		<testcase name="Mutant #148" file="npc/commands/listing.py" line="67">
			<system-out>    if fmt == &quot;default&quot; or not fmt:</system-out>
		</testcase>
		<testcase name="Mutant #149" file="npc/commands/listing.py" line="67">
			<system-out>    if fmt == &quot;default&quot; or not fmt:</system-out>
		</testcase>
		<testcase name="Mutant #150" file="npc/commands/listing.py" line="68">
			<system-out>        fmt = prefs.get('listing.default_format')</system-out>
		</testcase>
		<testcase name="Mutant #151" file="npc/commands/listing.py" line="68">
			<system-out>        fmt = prefs.get('listing.default_format')</system-out>
		</testcase>
		<testcase name="Mutant #152" file="npc/commands/listing.py" line="69">
			<system-out>    out_type = formatters.get_canonical_format_name(fmt)</system-out>
		</testcase>
		<testcase name="Mutant #153" file="npc/commands/listing.py" line="71">
			<system-out>    formatter = formatters.get_listing_formatter(out_type)</system-out>
		</testcase>
		<testcase name="Mutant #154" file="npc/commands/listing.py" line="72">
			<system-out>    if not formatter:</system-out>
		</testcase>
		<testcase name="Mutant #155" file="npc/commands/listing.py" line="73">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -71,7 +71,7 @@
 
     formatter = formatters.get_listing_formatter(out_type)
     if not formatter:
-        return result.OptionError(errmsg=&quot;Cannot create output of format '{}'&quot;.format(out_type))
+        return result.OptionError(errmsg=&quot;XXCannot create output of format '{}'XX&quot;.format(out_type))
 
     if metadata == 'default' and out_type != 'json':
         # Ensure 'default' metadata type gets replaced with the right default
</failure>
			<system-out>        return result.OptionError(errmsg=&quot;Cannot create output of format '{}'&quot;.format(out_type))</system-out>
		</testcase>
		<testcase name="Mutant #156" file="npc/commands/listing.py" line="75">
			<system-out>    if metadata == 'default' and out_type != 'json':</system-out>
		</testcase>
		<testcase name="Mutant #157" file="npc/commands/listing.py" line="75">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -73,7 +73,7 @@
     if not formatter:
         return result.OptionError(errmsg=&quot;Cannot create output of format '{}'&quot;.format(out_type))
 
-    if metadata == 'default' and out_type != 'json':
+    if metadata == 'XXdefaultXX' and out_type != 'json':
         # Ensure 'default' metadata type gets replaced with the right default
         # metadata format. Irrelevant for json format.
         metadata_type = prefs.get('listing.metadata.{}.default_format'.format(out_type))
</failure>
			<system-out>    if metadata == 'default' and out_type != 'json':</system-out>
		</testcase>
		<testcase name="Mutant #158" file="npc/commands/listing.py" line="75">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -73,7 +73,7 @@
     if not formatter:
         return result.OptionError(errmsg=&quot;Cannot create output of format '{}'&quot;.format(out_type))
 
-    if metadata == 'default' and out_type != 'json':
+    if metadata == 'default' and out_type == 'json':
         # Ensure 'default' metadata type gets replaced with the right default
         # metadata format. Irrelevant for json format.
         metadata_type = prefs.get('listing.metadata.{}.default_format'.format(out_type))
</failure>
			<system-out>    if metadata == 'default' and out_type != 'json':</system-out>
		</testcase>
		<testcase name="Mutant #159" file="npc/commands/listing.py" line="75">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -73,7 +73,7 @@
     if not formatter:
         return result.OptionError(errmsg=&quot;Cannot create output of format '{}'&quot;.format(out_type))
 
-    if metadata == 'default' and out_type != 'json':
+    if metadata == 'default' and out_type != 'XXjsonXX':
         # Ensure 'default' metadata type gets replaced with the right default
         # metadata format. Irrelevant for json format.
         metadata_type = prefs.get('listing.metadata.{}.default_format'.format(out_type))
</failure>
			<system-out>    if metadata == 'default' and out_type != 'json':</system-out>
		</testcase>
		<testcase name="Mutant #160" file="npc/commands/listing.py" line="75">
			<system-out>    if metadata == 'default' and out_type != 'json':</system-out>
		</testcase>
		<testcase name="Mutant #161" file="npc/commands/listing.py" line="78">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -76,7 +76,7 @@
     if metadata == 'default' and out_type != 'json':
         # Ensure 'default' metadata type gets replaced with the right default
         # metadata format. Irrelevant for json format.
-        metadata_type = prefs.get('listing.metadata.{}.default_format'.format(out_type))
+        metadata_type = prefs.get('XXlisting.metadata.{}.default_formatXX'.format(out_type))
     else:
         metadata_type = metadata
 
</failure>
			<system-out>        metadata_type = prefs.get('listing.metadata.{}.default_format'.format(out_type))</system-out>
		</testcase>
		<testcase name="Mutant #162" file="npc/commands/listing.py" line="78">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -76,7 +76,7 @@
     if metadata == 'default' and out_type != 'json':
         # Ensure 'default' metadata type gets replaced with the right default
         # metadata format. Irrelevant for json format.
-        metadata_type = prefs.get('listing.metadata.{}.default_format'.format(out_type))
+        metadata_type = None
     else:
         metadata_type = metadata
 
</failure>
			<system-out>        metadata_type = prefs.get('listing.metadata.{}.default_format'.format(out_type))</system-out>
		</testcase>
		<testcase name="Mutant #163" file="npc/commands/listing.py" line="80">
			<system-out>        metadata_type = metadata</system-out>
		</testcase>
		<testcase name="Mutant #164" file="npc/commands/listing.py" line="82">
			<system-out>    meta = prefs.get_metadata(out_type)</system-out>
		</testcase>
		<testcase name="Mutant #165" file="npc/commands/listing.py" line="84">
			<system-out>        meta['title'] = title</system-out>
		</testcase>
		<testcase name="Mutant #166" file="npc/commands/listing.py" line="84">
			<system-out>        meta['title'] = title</system-out>
		</testcase>
		<testcase name="Mutant #167" file="npc/commands/listing.py" line="86">
			<system-out>    header_offset = int(prefs.get('listing.base_header_level'))</system-out>
		</testcase>
		<testcase name="Mutant #168" file="npc/commands/listing.py" line="86">
			<system-out>    header_offset = int(prefs.get('listing.base_header_level'))</system-out>
		</testcase>
		<testcase name="Mutant #169" file="npc/commands/listing.py" line="89">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -87,7 +87,7 @@
     header_offset = int(prefs.get('listing.base_header_level'))
     sectioners = [
         formatters.sectioners.get_sectioner(
-            key=g, heading_level=i+header_offset, prefs=prefs
+            key=g, heading_level=i-header_offset, prefs=prefs
         ) for i, g in enumerate(headings)
     ]
 
</failure>
			<system-out>            key=g, heading_level=i+header_offset, prefs=prefs</system-out>
		</testcase>
		<testcase name="Mutant #170" file="npc/commands/listing.py" line="91">
			<system-out>    ]</system-out>
		</testcase>
		<testcase name="Mutant #171" file="npc/commands/listing.py" line="93">
			<system-out>    with util.smart_open(outfile, binary=(out_type in formatters.BINARY_TYPES)) as outstream:</system-out>
		</testcase>
		<testcase name="Mutant #172" file="npc/commands/listing.py" line="102">
			<system-out>            update_progress=update_progress)</system-out>
		</testcase>
		<testcase name="Mutant #173" file="npc/commands/listing.py" line="105">
			<system-out>    if not response.success:</system-out>
		</testcase>
		<testcase name="Mutant #174" file="npc/commands/listing.py" line="108">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -106,7 +106,7 @@
     if not response.success:
         return response
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = [outfile] if outfile and outfile == '-' else None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #175" file="npc/commands/listing.py" line="108">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -106,7 +106,7 @@
     if not response.success:
         return response
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = [outfile] if outfile and outfile != 'XX-XX' else None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #176" file="npc/commands/listing.py" line="108">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -106,7 +106,7 @@
     if not response.success:
         return response
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = [outfile] if outfile or outfile != '-' else None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #177" file="npc/commands/listing.py" line="108">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -106,7 +106,7 @@
     if not response.success:
         return response
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #178" file="npc/commands/listing.py" line="135">
			<system-out>        if char.tags('skip').present:</system-out>
		</testcase>
		<testcase name="Mutant #179" file="npc/commands/listing.py" line="136">
			<failure type="failure" message="bad_survived">--- npc/commands/listing.py
+++ npc/commands/listing.py
@@ -134,7 +134,7 @@
     for char in characters:
         # skip if asked
         if char.tags('skip').present:
-            continue
+            break
 
         # clean up the character's data
         char.sanitize()
</failure>
			<system-out>            continue</system-out>
		</testcase>
		<testcase name="Mutant #180" file="npc/commands/story.py" line="12">
			<system-out>SEQUENCE_KEYWORD = 'NNN'</system-out>
		</testcase>
		<testcase name="Mutant #181" file="npc/commands/story.py" line="12">
			<system-out>SEQUENCE_KEYWORD = 'NNN'</system-out>
		</testcase>
		<testcase name="Mutant #182" file="npc/commands/story.py" line="13">
			<system-out>COPY_KEYWORD = '((COPY))'</system-out>
		</testcase>
		<testcase name="Mutant #183" file="npc/commands/story.py" line="13">
			<system-out>COPY_KEYWORD = '((COPY))'</system-out>
		</testcase>
		<testcase name="Mutant #184" file="npc/commands/story.py" line="32">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #185" file="npc/commands/story.py" line="32">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #186" file="npc/commands/story.py" line="33">
			<system-out>    plot_dir = Path(prefs.get('paths.required.plot'))</system-out>
		</testcase>
		<testcase name="Mutant #187" file="npc/commands/story.py" line="33">
			<system-out>    plot_dir = Path(prefs.get('paths.required.plot'))</system-out>
		</testcase>
		<testcase name="Mutant #188" file="npc/commands/story.py" line="34">
			<system-out>    session_dir = Path(prefs.get('paths.required.session'))</system-out>
		</testcase>
		<testcase name="Mutant #189" file="npc/commands/story.py" line="34">
			<system-out>    session_dir = Path(prefs.get('paths.required.session'))</system-out>
		</testcase>
		<testcase name="Mutant #190" file="npc/commands/story.py" line="36">
			<system-out>    if not plot_dir.exists():</system-out>
		</testcase>
		<testcase name="Mutant #191" file="npc/commands/story.py" line="37">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -35,7 +35,7 @@
     session_dir = Path(prefs.get('paths.required.session'))
 
     if not plot_dir.exists():
-        return result.FSError(errmsg=&quot;Cannot access plot path '{}'&quot;.format(plot_dir))
+        return result.FSError(errmsg=&quot;XXCannot access plot path '{}'XX&quot;.format(plot_dir))
 
     if not session_dir.exists():
         return result.FSError(errmsg=&quot;Cannot access session path '{}'&quot;.format(session_dir))
</failure>
			<system-out>        return result.FSError(errmsg=&quot;Cannot access plot path '{}'&quot;.format(plot_dir))</system-out>
		</testcase>
		<testcase name="Mutant #192" file="npc/commands/story.py" line="39">
			<system-out>    if not session_dir.exists():</system-out>
		</testcase>
		<testcase name="Mutant #193" file="npc/commands/story.py" line="40">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -38,7 +38,7 @@
         return result.FSError(errmsg=&quot;Cannot access plot path '{}'&quot;.format(plot_dir))
 
     if not session_dir.exists():
-        return result.FSError(errmsg=&quot;Cannot access session path '{}'&quot;.format(session_dir))
+        return result.FSError(errmsg=&quot;XXCannot access session path '{}'XX&quot;.format(session_dir))
 
     plot_template = prefs.get('story.templates.plot')
     if SEQUENCE_KEYWORD not in str(plot_template):
</failure>
			<system-out>        return result.FSError(errmsg=&quot;Cannot access session path '{}'&quot;.format(session_dir))</system-out>
		</testcase>
		<testcase name="Mutant #194" file="npc/commands/story.py" line="42">
			<system-out>    plot_template = prefs.get('story.templates.plot')</system-out>
		</testcase>
		<testcase name="Mutant #195" file="npc/commands/story.py" line="42">
			<system-out>    plot_template = prefs.get('story.templates.plot')</system-out>
		</testcase>
		<testcase name="Mutant #196" file="npc/commands/story.py" line="43">
			<system-out>    if SEQUENCE_KEYWORD not in str(plot_template):</system-out>
		</testcase>
		<testcase name="Mutant #197" file="npc/commands/story.py" line="44">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -42,7 +42,7 @@
 
     plot_template = prefs.get('story.templates.plot')
     if SEQUENCE_KEYWORD not in str(plot_template):
-        return result.ConfigError(errmsg=&quot;Plot template has no number placeholder ({})&quot;.format(SEQUENCE_KEYWORD))
+        return result.ConfigError(errmsg=&quot;XXPlot template has no number placeholder ({})XX&quot;.format(SEQUENCE_KEYWORD))
     plot_regex = regex_from_template(plot_template)
     latest_plot = latest_file(plot_dir, plot_regex)
 
</failure>
			<system-out>        return result.ConfigError(errmsg=&quot;Plot template has no number placeholder ({})&quot;.format(SEQUENCE_KEYWORD))</system-out>
		</testcase>
		<testcase name="Mutant #198" file="npc/commands/story.py" line="45">
			<system-out>    plot_regex = regex_from_template(plot_template)</system-out>
		</testcase>
		<testcase name="Mutant #199" file="npc/commands/story.py" line="46">
			<system-out>    latest_plot = latest_file(plot_dir, plot_regex)</system-out>
		</testcase>
		<testcase name="Mutant #200" file="npc/commands/story.py" line="48">
			<system-out>    session_template = prefs.get('story.templates.session')</system-out>
		</testcase>
		<testcase name="Mutant #201" file="npc/commands/story.py" line="48">
			<system-out>    session_template = prefs.get('story.templates.session')</system-out>
		</testcase>
		<testcase name="Mutant #202" file="npc/commands/story.py" line="49">
			<system-out>    if SEQUENCE_KEYWORD not in str(session_template):</system-out>
		</testcase>
		<testcase name="Mutant #203" file="npc/commands/story.py" line="50">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -48,7 +48,7 @@
 
     session_template = prefs.get('story.templates.session')
     if SEQUENCE_KEYWORD not in str(session_template):
-        return result.ConfigError(errmsg=&quot;Session template has no number placeholder ({})&quot;.format(SEQUENCE_KEYWORD))
+        return result.ConfigError(errmsg=&quot;XXSession template has no number placeholder ({})XX&quot;.format(SEQUENCE_KEYWORD))
     session_regex = regex_from_template(session_template)
     latest_session = latest_file(session_dir, session_regex)
 
</failure>
			<system-out>        return result.ConfigError(errmsg=&quot;Session template has no number placeholder ({})&quot;.format(SEQUENCE_KEYWORD))</system-out>
		</testcase>
		<testcase name="Mutant #204" file="npc/commands/story.py" line="51">
			<system-out>    session_regex = regex_from_template(session_template)</system-out>
		</testcase>
		<testcase name="Mutant #205" file="npc/commands/story.py" line="52">
			<system-out>    latest_session = latest_file(session_dir, session_regex)</system-out>
		</testcase>
		<testcase name="Mutant #206" file="npc/commands/story.py" line="54">
			<system-out>    new_number = min(latest_plot.number, latest_session.number) + 1</system-out>
		</testcase>
		<testcase name="Mutant #207" file="npc/commands/story.py" line="54">
			<system-out>    new_number = min(latest_plot.number, latest_session.number) + 1</system-out>
		</testcase>
		<testcase name="Mutant #208" file="npc/commands/story.py" line="54">
			<system-out>    new_number = min(latest_plot.number, latest_session.number) + 1</system-out>
		</testcase>
		<testcase name="Mutant #209" file="npc/commands/story.py" line="72">
			<system-out>                with open(old_file_path, 'r') as old_file:</system-out>
		</testcase>
		<testcase name="Mutant #210" file="npc/commands/story.py" line="75">
			<system-out>                return ''</system-out>
		</testcase>
		<testcase name="Mutant #211" file="npc/commands/story.py" line="78">
			<system-out>            if SEQUENCE_KEYWORD not in str(template_path):</system-out>
		</testcase>
		<testcase name="Mutant #212" file="npc/commands/story.py" line="79">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -77,7 +77,7 @@
 
         for template_path in templates:
             if SEQUENCE_KEYWORD not in str(template_path):
-                print_err(&quot;Template {} has no number placeholder ({})&quot;.format(template_path, SEQUENCE_KEYWORD))
+                print_err(&quot;XXTemplate {} has no number placeholder ({})XX&quot;.format(template_path, SEQUENCE_KEYWORD))
                 continue
 
             new_file_name = template_path.name.replace(SEQUENCE_KEYWORD, str(new_number))
</failure>
			<system-out>                print_err(&quot;Template {} has no number placeholder ({})&quot;.format(template_path, SEQUENCE_KEYWORD))</system-out>
		</testcase>
		<testcase name="Mutant #213" file="npc/commands/story.py" line="80">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -78,7 +78,7 @@
         for template_path in templates:
             if SEQUENCE_KEYWORD not in str(template_path):
                 print_err(&quot;Template {} has no number placeholder ({})&quot;.format(template_path, SEQUENCE_KEYWORD))
-                continue
+                break
 
             new_file_name = template_path.name.replace(SEQUENCE_KEYWORD, str(new_number))
             destination = dest_dir.joinpath(new_file_name)
</failure>
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #214" file="npc/commands/story.py" line="82">
			<system-out>            new_file_name = template_path.name.replace(SEQUENCE_KEYWORD, str(new_number))</system-out>
		</testcase>
		<testcase name="Mutant #215" file="npc/commands/story.py" line="83">
			<system-out>            destination = dest_dir.joinpath(new_file_name)</system-out>
		</testcase>
		<testcase name="Mutant #216" file="npc/commands/story.py" line="85">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -83,7 +83,7 @@
             new_file_name = template_path.name.replace(SEQUENCE_KEYWORD, str(new_number))
             destination = dest_dir.joinpath(new_file_name)
             if destination.exists():
-                continue
+                break
 
             with open(template_path, 'r') as f:
                 data = f.read()
</failure>
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #217" file="npc/commands/story.py" line="87">
			<system-out>            with open(template_path, 'r') as f:</system-out>
		</testcase>
		<testcase name="Mutant #218" file="npc/commands/story.py" line="88">
			<system-out>                data = f.read()</system-out>
		</testcase>
		<testcase name="Mutant #219" file="npc/commands/story.py" line="90">
			<system-out>            data = data.replace(SEQUENCE_KEYWORD, str(new_number))</system-out>
		</testcase>
		<testcase name="Mutant #220" file="npc/commands/story.py" line="91">
			<system-out>            if COPY_KEYWORD in data:</system-out>
		</testcase>
		<testcase name="Mutant #221" file="npc/commands/story.py" line="92">
			<system-out>                file_regex = regex_from_template(template_path)</system-out>
		</testcase>
		<testcase name="Mutant #222" file="npc/commands/story.py" line="93">
			<system-out>                old_file_path = latest_file(dest_dir, file_regex).path</system-out>
		</testcase>
		<testcase name="Mutant #223" file="npc/commands/story.py" line="94">
			<system-out>                data = data.replace(COPY_KEYWORD, old_file_contents(old_file_path))</system-out>
		</testcase>
		<testcase name="Mutant #224" file="npc/commands/story.py" line="96">
			<system-out>            with open(destination, 'w') as f:</system-out>
		</testcase>
		<testcase name="Mutant #225" file="npc/commands/story.py" line="100">
			<system-out>        prefs.get('story.templates.plot'),</system-out>
		</testcase>
		<testcase name="Mutant #226" file="npc/commands/story.py" line="101">
			<system-out>        prefs.get('story.templates.plot_extras')</system-out>
		</testcase>
		<testcase name="Mutant #227" file="npc/commands/story.py" line="102">
			<system-out>    ])</system-out>
		</testcase>
		<testcase name="Mutant #228" file="npc/commands/story.py" line="106">
			<system-out>        prefs.get('story.templates.session'),</system-out>
		</testcase>
		<testcase name="Mutant #229" file="npc/commands/story.py" line="107">
			<system-out>        prefs.get('story.templates.session_extras')</system-out>
		</testcase>
		<testcase name="Mutant #230" file="npc/commands/story.py" line="108">
			<system-out>    ])</system-out>
		</testcase>
		<testcase name="Mutant #231" file="npc/commands/story.py" line="114">
			<system-out>    ]</system-out>
		</testcase>
		<testcase name="Mutant #232" file="npc/commands/story.py" line="115">
			<system-out>    old_session_name = session_template.name.replace(SEQUENCE_KEYWORD, str(new_number - 1))</system-out>
		</testcase>
		<testcase name="Mutant #233" file="npc/commands/story.py" line="115">
			<system-out>    old_session_name = session_template.name.replace(SEQUENCE_KEYWORD, str(new_number - 1))</system-out>
		</testcase>
		<testcase name="Mutant #234" file="npc/commands/story.py" line="115">
			<system-out>    old_session_name = session_template.name.replace(SEQUENCE_KEYWORD, str(new_number - 1))</system-out>
		</testcase>
		<testcase name="Mutant #235" file="npc/commands/story.py" line="116">
			<system-out>    old_session = session_dir.joinpath(old_session_name)</system-out>
		</testcase>
		<testcase name="Mutant #236" file="npc/commands/story.py" line="119">
			<system-out>    old_plot_name = plot_template.name.replace(SEQUENCE_KEYWORD, str(new_number - 1))</system-out>
		</testcase>
		<testcase name="Mutant #237" file="npc/commands/story.py" line="119">
			<system-out>    old_plot_name = plot_template.name.replace(SEQUENCE_KEYWORD, str(new_number - 1))</system-out>
		</testcase>
		<testcase name="Mutant #238" file="npc/commands/story.py" line="119">
			<system-out>    old_plot_name = plot_template.name.replace(SEQUENCE_KEYWORD, str(new_number - 1))</system-out>
		</testcase>
		<testcase name="Mutant #239" file="npc/commands/story.py" line="120">
			<system-out>    old_plot = plot_dir.joinpath(old_plot_name)</system-out>
		</testcase>
		<testcase name="Mutant #240" file="npc/commands/story.py" line="126">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -124,7 +124,7 @@
 
     return result.Success(openable=openable)
 
-def latest(thingtype='', **kwargs):
+def latest(thingtype='XXXX', **kwargs):
     &quot;&quot;&quot;
     Open the latest plot and/or session file
 
</failure>
			<system-out>def latest(thingtype='', **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #241" file="npc/commands/story.py" line="140">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -138,7 +138,7 @@
     Returns:
         Result object. Openable will contain the path(s) to the requested file(s).
     &quot;&quot;&quot;
-    prefs = kwargs.get('prefs', settings.InternalSettings())
+    prefs = kwargs.get('XXprefsXX', settings.InternalSettings())
     plot_dir = Path(prefs.get('paths.required.plot'))
     session_dir = Path(prefs.get('paths.required.session'))
 
</failure>
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #242" file="npc/commands/story.py" line="140">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #243" file="npc/commands/story.py" line="141">
			<system-out>    plot_dir = Path(prefs.get('paths.required.plot'))</system-out>
		</testcase>
		<testcase name="Mutant #244" file="npc/commands/story.py" line="141">
			<system-out>    plot_dir = Path(prefs.get('paths.required.plot'))</system-out>
		</testcase>
		<testcase name="Mutant #245" file="npc/commands/story.py" line="142">
			<system-out>    session_dir = Path(prefs.get('paths.required.session'))</system-out>
		</testcase>
		<testcase name="Mutant #246" file="npc/commands/story.py" line="142">
			<system-out>    session_dir = Path(prefs.get('paths.required.session'))</system-out>
		</testcase>
		<testcase name="Mutant #247" file="npc/commands/story.py" line="144">
			<system-out>    if not plot_dir.exists():</system-out>
		</testcase>
		<testcase name="Mutant #248" file="npc/commands/story.py" line="145">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -143,7 +143,7 @@
     session_dir = Path(prefs.get('paths.required.session'))
 
     if not plot_dir.exists():
-        return result.FSError(errmsg=&quot;Cannot access plot path '{}'&quot;.format(plot_dir))
+        return result.FSError(errmsg=&quot;XXCannot access plot path '{}'XX&quot;.format(plot_dir))
 
     if not session_dir.exists():
         return result.FSError(errmsg=&quot;Cannot access session path '{}'&quot;.format(session_dir))
</failure>
			<system-out>        return result.FSError(errmsg=&quot;Cannot access plot path '{}'&quot;.format(plot_dir))</system-out>
		</testcase>
		<testcase name="Mutant #249" file="npc/commands/story.py" line="147">
			<system-out>    if not session_dir.exists():</system-out>
		</testcase>
		<testcase name="Mutant #250" file="npc/commands/story.py" line="148">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -146,7 +146,7 @@
         return result.FSError(errmsg=&quot;Cannot access plot path '{}'&quot;.format(plot_dir))
 
     if not session_dir.exists():
-        return result.FSError(errmsg=&quot;Cannot access session path '{}'&quot;.format(session_dir))
+        return result.FSError(errmsg=&quot;XXCannot access session path '{}'XX&quot;.format(session_dir))
 
     plot_template = prefs.get('story.templates.plot')
     plot_regex = regex_from_template(plot_template)
</failure>
			<system-out>        return result.FSError(errmsg=&quot;Cannot access session path '{}'&quot;.format(session_dir))</system-out>
		</testcase>
		<testcase name="Mutant #251" file="npc/commands/story.py" line="150">
			<system-out>    plot_template = prefs.get('story.templates.plot')</system-out>
		</testcase>
		<testcase name="Mutant #252" file="npc/commands/story.py" line="150">
			<system-out>    plot_template = prefs.get('story.templates.plot')</system-out>
		</testcase>
		<testcase name="Mutant #253" file="npc/commands/story.py" line="151">
			<system-out>    plot_regex = regex_from_template(plot_template)</system-out>
		</testcase>
		<testcase name="Mutant #254" file="npc/commands/story.py" line="152">
			<system-out>    latest_plot = latest_file(plot_dir, plot_regex)</system-out>
		</testcase>
		<testcase name="Mutant #255" file="npc/commands/story.py" line="154">
			<system-out>    session_template = prefs.get('story.templates.session')</system-out>
		</testcase>
		<testcase name="Mutant #256" file="npc/commands/story.py" line="154">
			<system-out>    session_template = prefs.get('story.templates.session')</system-out>
		</testcase>
		<testcase name="Mutant #257" file="npc/commands/story.py" line="155">
			<system-out>    session_regex = regex_from_template(session_template)</system-out>
		</testcase>
		<testcase name="Mutant #258" file="npc/commands/story.py" line="156">
			<system-out>    latest_session = latest_file(session_dir, session_regex)</system-out>
		</testcase>
		<testcase name="Mutant #259" file="npc/commands/story.py" line="158">
			<system-out>    if thingtype == 'session':</system-out>
		</testcase>
		<testcase name="Mutant #260" file="npc/commands/story.py" line="158">
			<system-out>    if thingtype == 'session':</system-out>
		</testcase>
		<testcase name="Mutant #261" file="npc/commands/story.py" line="159">
			<system-out>        openable = [str(latest_session.path)]</system-out>
		</testcase>
		<testcase name="Mutant #262" file="npc/commands/story.py" line="160">
			<system-out>    elif thingtype == 'plot':</system-out>
		</testcase>
		<testcase name="Mutant #263" file="npc/commands/story.py" line="160">
			<system-out>    elif thingtype == 'plot':</system-out>
		</testcase>
		<testcase name="Mutant #264" file="npc/commands/story.py" line="161">
			<system-out>        openable = [str(latest_plot.path)]</system-out>
		</testcase>
		<testcase name="Mutant #265" file="npc/commands/story.py" line="163">
			<system-out>        openable = [str(latest_session.path), str(latest_plot.path)]</system-out>
		</testcase>
		<testcase name="Mutant #266" file="npc/commands/story.py" line="182">
			<system-out>    chopped_name = Path(template_path).name</system-out>
		</testcase>
		<testcase name="Mutant #267" file="npc/commands/story.py" line="183">
			<system-out>    regex_string = chopped_name.replace(SEQUENCE_KEYWORD, r'(?P&lt;number&gt;\d+)', 1).replace(SEQUENCE_KEYWORD, r'\d+')</system-out>
		</testcase>
		<testcase name="Mutant #268" file="npc/commands/story.py" line="183">
			<system-out>    regex_string = chopped_name.replace(SEQUENCE_KEYWORD, r'(?P&lt;number&gt;\d+)', 1).replace(SEQUENCE_KEYWORD, r'\d+')</system-out>
		</testcase>
		<testcase name="Mutant #269" file="npc/commands/story.py" line="183">
			<system-out>    regex_string = chopped_name.replace(SEQUENCE_KEYWORD, r'(?P&lt;number&gt;\d+)', 1).replace(SEQUENCE_KEYWORD, r'\d+')</system-out>
		</testcase>
		<testcase name="Mutant #270" file="npc/commands/story.py" line="183">
			<system-out>    regex_string = chopped_name.replace(SEQUENCE_KEYWORD, r'(?P&lt;number&gt;\d+)', 1).replace(SEQUENCE_KEYWORD, r'\d+')</system-out>
		</testcase>
		<testcase name="Mutant #271" file="npc/commands/story.py" line="184">
			<system-out>    return re.compile(&quot;^{regex_string}$&quot;.format(regex_string=regex_string), flags=re.I)</system-out>
		</testcase>
		<testcase name="Mutant #272" file="npc/commands/story.py" line="190">
			<system-out>        self.path = path</system-out>
		</testcase>
		<testcase name="Mutant #273" file="npc/commands/story.py" line="191">
			<system-out>        self.number = number</system-out>
		</testcase>
		<testcase name="Mutant #274" file="npc/commands/story.py" line="211">
			<system-out>        return f.is_file() and target_regex.match(f.name) and True</system-out>
		</testcase>
		<testcase name="Mutant #275" file="npc/commands/story.py" line="211">
			<system-out>        return f.is_file() and target_regex.match(f.name) and True</system-out>
		</testcase>
		<testcase name="Mutant #276" file="npc/commands/story.py" line="213">
			<system-out>    buncha_files = [f.name for f in scandir(target_path) if file_matches(f)]</system-out>
		</testcase>
		<testcase name="Mutant #277" file="npc/commands/story.py" line="215">
			<system-out>        latest_file = max(buncha_files, key=lambda f: target_regex.match(f).group('number'))</system-out>
		</testcase>
		<testcase name="Mutant #278" file="npc/commands/story.py" line="215">
			<system-out>        latest_file = max(buncha_files, key=lambda f: target_regex.match(f).group('number'))</system-out>
		</testcase>
		<testcase name="Mutant #279" file="npc/commands/story.py" line="215">
			<system-out>        latest_file = max(buncha_files, key=lambda f: target_regex.match(f).group('number'))</system-out>
		</testcase>
		<testcase name="Mutant #280" file="npc/commands/story.py" line="216">
			<system-out>        file_number = int(target_regex.match(latest_file).group('number'))</system-out>
		</testcase>
		<testcase name="Mutant #281" file="npc/commands/story.py" line="216">
			<system-out>        file_number = int(target_regex.match(latest_file).group('number'))</system-out>
		</testcase>
		<testcase name="Mutant #282" file="npc/commands/story.py" line="218">
			<failure type="failure" message="bad_survived">--- npc/commands/story.py
+++ npc/commands/story.py
@@ -216,7 +216,7 @@
         latest_file = max(buncha_files, key=lambda f: target_regex.match(f).group('number'))
         file_number = int(target_regex.match(latest_file).group('number'))
     except ValueError:
-        latest_file = ''
+        latest_file = 'XXXX'
         file_number = 0
 
     return LatestFileInfo(target_path.joinpath(latest_file), file_number)
</failure>
			<system-out>        latest_file = ''</system-out>
		</testcase>
		<testcase name="Mutant #283" file="npc/commands/story.py" line="218">
			<system-out>        latest_file = ''</system-out>
		</testcase>
		<testcase name="Mutant #284" file="npc/commands/story.py" line="219">
			<system-out>        file_number = 0</system-out>
		</testcase>
		<testcase name="Mutant #285" file="npc/commands/story.py" line="219">
			<system-out>        file_number = 0</system-out>
		</testcase>
		<testcase name="Mutant #286" file="npc/commands/core.py" line="21">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -19,7 +19,7 @@
 
 from . import create_character, listing, util, story
 
-def reorg(*search, ignore=None, purge=False, verbose=False, commit=False, **kwargs):
+def reorg(*search, ignore=None, purge=True, verbose=False, commit=False, **kwargs):
     &quot;&quot;&quot;
     Move character files into the correct paths.
 
</failure>
			<system-out>def reorg(*search, ignore=None, purge=False, verbose=False, commit=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #287" file="npc/commands/core.py" line="21">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -19,7 +19,7 @@
 
 from . import create_character, listing, util, story
 
-def reorg(*search, ignore=None, purge=False, verbose=False, commit=False, **kwargs):
+def reorg(*search, ignore=None, purge=False, verbose=True, commit=False, **kwargs):
     &quot;&quot;&quot;
     Move character files into the correct paths.
 
</failure>
			<system-out>def reorg(*search, ignore=None, purge=False, verbose=False, commit=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #288" file="npc/commands/core.py" line="21">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -19,7 +19,7 @@
 
 from . import create_character, listing, util, story
 
-def reorg(*search, ignore=None, purge=False, verbose=False, commit=False, **kwargs):
+def reorg(*search, ignore=None, purge=False, verbose=False, commit=True, **kwargs):
     &quot;&quot;&quot;
     Move character files into the correct paths.
 
</failure>
			<system-out>def reorg(*search, ignore=None, purge=False, verbose=False, commit=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #289" file="npc/commands/core.py" line="42">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -40,7 +40,7 @@
     Returns:
         Result object. Openable will be empty.
     &quot;&quot;&quot;
-    prefs = kwargs.get('prefs', settings.InternalSettings())
+    prefs = kwargs.get('XXprefsXX', settings.InternalSettings())
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('reorg'))
</failure>
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #290" file="npc/commands/core.py" line="42">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #291" file="npc/commands/core.py" line="43">
			<system-out>    if not ignore:</system-out>
		</testcase>
		<testcase name="Mutant #292" file="npc/commands/core.py" line="44">
			<system-out>        ignore = []</system-out>
		</testcase>
		<testcase name="Mutant #293" file="npc/commands/core.py" line="45">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -43,7 +43,7 @@
     prefs = kwargs.get('prefs', settings.InternalSettings())
     if not ignore:
         ignore = []
-    ignore.extend(prefs.get_ignored_paths('reorg'))
+    ignore.extend(prefs.get_ignored_paths('XXreorgXX'))
     show_changes = verbose or not commit
 
     changelog = []
</failure>
			<system-out>    ignore.extend(prefs.get_ignored_paths('reorg'))</system-out>
		</testcase>
		<testcase name="Mutant #294" file="npc/commands/core.py" line="46">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -44,7 +44,7 @@
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('reorg'))
-    show_changes = verbose or not commit
+    show_changes = verbose or  commit
 
     changelog = []
 
</failure>
			<system-out>    show_changes = verbose or not commit</system-out>
		</testcase>
		<testcase name="Mutant #295" file="npc/commands/core.py" line="46">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -44,7 +44,7 @@
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('reorg'))
-    show_changes = verbose or not commit
+    show_changes = verbose and not commit
 
     changelog = []
 
</failure>
			<system-out>    show_changes = verbose or not commit</system-out>
		</testcase>
		<testcase name="Mutant #296" file="npc/commands/core.py" line="46">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -44,7 +44,7 @@
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('reorg'))
-    show_changes = verbose or not commit
+    show_changes = None
 
     changelog = []
 
</failure>
			<system-out>    show_changes = verbose or not commit</system-out>
		</testcase>
		<testcase name="Mutant #297" file="npc/commands/core.py" line="48">
			<system-out>    changelog = []</system-out>
		</testcase>
		<testcase name="Mutant #298" file="npc/commands/core.py" line="50">
			<system-out>    base_path = Path(prefs.get('paths.required.characters'))</system-out>
		</testcase>
		<testcase name="Mutant #299" file="npc/commands/core.py" line="50">
			<system-out>    base_path = Path(prefs.get('paths.required.characters'))</system-out>
		</testcase>
		<testcase name="Mutant #300" file="npc/commands/core.py" line="51">
			<system-out>    if not base_path.exists():</system-out>
		</testcase>
		<testcase name="Mutant #301" file="npc/commands/core.py" line="52">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -50,7 +50,7 @@
 
     base_path = Path(prefs.get('paths.required.characters'))
     if not base_path.exists():
-        return result.FSError(errmsg=&quot;Cannot access '{}'&quot;.format(base_path))
+        return result.FSError(errmsg=&quot;XXCannot access '{}'XX&quot;.format(base_path))
 
     if show_changes:
         changelog.append(&quot;Move characters&quot;)
</failure>
			<system-out>        return result.FSError(errmsg=&quot;Cannot access '{}'&quot;.format(base_path))</system-out>
		</testcase>
		<testcase name="Mutant #302" file="npc/commands/core.py" line="55">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -53,7 +53,7 @@
         return result.FSError(errmsg=&quot;Cannot access '{}'&quot;.format(base_path))
 
     if show_changes:
-        changelog.append(&quot;Move characters&quot;)
+        changelog.append(&quot;XXMove charactersXX&quot;)
     for parsed_character in parser.get_characters(flatten(search), ignore):
         if parsed_character.tags('keep').present:
             continue
</failure>
			<system-out>        changelog.append(&quot;Move characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #303" file="npc/commands/core.py" line="57">
			<system-out>        if parsed_character.tags('keep').present:</system-out>
		</testcase>
		<testcase name="Mutant #304" file="npc/commands/core.py" line="58">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -56,7 +56,7 @@
         changelog.append(&quot;Move characters&quot;)
     for parsed_character in parser.get_characters(flatten(search), ignore):
         if parsed_character.tags('keep').present:
-            continue
+            break
         new_path = Path(util.create_path_from_character(parsed_character, base_path=base_path))
         parsed_path = Path(parsed_character.path)
         if not new_path.resolve().samefile(parsed_path.resolve()):
</failure>
			<system-out>            continue</system-out>
		</testcase>
		<testcase name="Mutant #305" file="npc/commands/core.py" line="59">
			<system-out>        new_path = Path(util.create_path_from_character(parsed_character, base_path=base_path))</system-out>
		</testcase>
		<testcase name="Mutant #306" file="npc/commands/core.py" line="60">
			<system-out>        parsed_path = Path(parsed_character.path)</system-out>
		</testcase>
		<testcase name="Mutant #307" file="npc/commands/core.py" line="61">
			<system-out>        if not new_path.resolve().samefile(parsed_path.resolve()):</system-out>
		</testcase>
		<testcase name="Mutant #308" file="npc/commands/core.py" line="63">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -61,7 +61,7 @@
         parsed_path = Path(parsed_character.path)
         if not new_path.resolve().samefile(parsed_path.resolve()):
             if show_changes:
-                changelog.append(&quot;* Move {} to {}&quot;.format(parsed_path, new_path))
+                changelog.append(&quot;XX* Move {} to {}XX&quot;.format(parsed_path, new_path))
             if commit:
                 try:
                     shmove(str(parsed_path), new_path)
</failure>
			<system-out>                changelog.append(&quot;* Move {} to {}&quot;.format(parsed_path, new_path))</system-out>
		</testcase>
		<testcase name="Mutant #309" file="npc/commands/core.py" line="69">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -67,7 +67,7 @@
                     shmove(str(parsed_path), new_path)
                 except OSError as e:
                     if show_changes:
-                        changelog.append(&quot;\t- dest path already exists; skipping&quot;)
+                        changelog.append(&quot;XX\t- dest path already exists; skippingXX&quot;)
 
     if purge:
         if show_changes:
</failure>
			<system-out>                        changelog.append(&quot;\t- dest path already exists; skipping&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #310" file="npc/commands/core.py" line="73">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -71,7 +71,7 @@
 
     if purge:
         if show_changes:
-            changelog.append(&quot;Purge empty directories&quot;)
+            changelog.append(&quot;XXPurge empty directoriesXX&quot;)
         for empty_path in util.find_empty_dirs(base_path):
             if show_changes:
                 changelog.append(&quot;* Remove empty directory {}&quot;.format(empty_path))
</failure>
			<system-out>            changelog.append(&quot;Purge empty directories&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #311" file="npc/commands/core.py" line="76">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -74,7 +74,7 @@
             changelog.append(&quot;Purge empty directories&quot;)
         for empty_path in util.find_empty_dirs(base_path):
             if show_changes:
-                changelog.append(&quot;* Remove empty directory {}&quot;.format(empty_path))
+                changelog.append(&quot;XX* Remove empty directory {}XX&quot;.format(empty_path))
             if commit:
                 rmdir(empty_path)
 
</failure>
			<system-out>                changelog.append(&quot;* Remove empty directory {}&quot;.format(empty_path))</system-out>
		</testcase>
		<testcase name="Mutant #312" file="npc/commands/core.py" line="78">
			<system-out>                rmdir(empty_path)</system-out>
		</testcase>
		<testcase name="Mutant #313" file="npc/commands/core.py" line="82">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -80,7 +80,7 @@
 
     return result.Success(printables=changelog)
 
-def dump(*search, ignore=None, do_sort=False, metadata=False, outfile=None, **kwargs):
+def dump(*search, ignore=None, do_sort=True, metadata=False, outfile=None, **kwargs):
     &quot;&quot;&quot;
     Dump the raw character data, unaltered.
 
</failure>
			<system-out>def dump(*search, ignore=None, do_sort=False, metadata=False, outfile=None, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #314" file="npc/commands/core.py" line="82">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -80,7 +80,7 @@
 
     return result.Success(printables=changelog)
 
-def dump(*search, ignore=None, do_sort=False, metadata=False, outfile=None, **kwargs):
+def dump(*search, ignore=None, do_sort=False, metadata=True, outfile=None, **kwargs):
     &quot;&quot;&quot;
     Dump the raw character data, unaltered.
 
</failure>
			<system-out>def dump(*search, ignore=None, do_sort=False, metadata=False, outfile=None, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #315" file="npc/commands/core.py" line="102">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -100,7 +100,7 @@
         Result object. If outfile pointed to a real file, the openable attribute
         will contain that filename.
     &quot;&quot;&quot;
-    prefs = kwargs.get('prefs', settings.InternalSettings())
+    prefs = kwargs.get('XXprefsXX', settings.InternalSettings())
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('dump'))
</failure>
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #316" file="npc/commands/core.py" line="102">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #317" file="npc/commands/core.py" line="103">
			<system-out>    if not ignore:</system-out>
		</testcase>
		<testcase name="Mutant #318" file="npc/commands/core.py" line="104">
			<system-out>        ignore = []</system-out>
		</testcase>
		<testcase name="Mutant #319" file="npc/commands/core.py" line="105">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -103,7 +103,7 @@
     prefs = kwargs.get('prefs', settings.InternalSettings())
     if not ignore:
         ignore = []
-    ignore.extend(prefs.get_ignored_paths('dump'))
+    ignore.extend(prefs.get_ignored_paths('XXdumpXX'))
     sort_by = kwargs.get('sort_by', prefs.get('dump.sort_by'))
 
     characters = parser.get_characters(flatten(search), ignore)
</failure>
			<system-out>    ignore.extend(prefs.get_ignored_paths('dump'))</system-out>
		</testcase>
		<testcase name="Mutant #320" file="npc/commands/core.py" line="106">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -104,7 +104,7 @@
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('dump'))
-    sort_by = kwargs.get('sort_by', prefs.get('dump.sort_by'))
+    sort_by = kwargs.get('XXsort_byXX', prefs.get('dump.sort_by'))
 
     characters = parser.get_characters(flatten(search), ignore)
     if do_sort:
</failure>
			<system-out>    sort_by = kwargs.get('sort_by', prefs.get('dump.sort_by'))</system-out>
		</testcase>
		<testcase name="Mutant #321" file="npc/commands/core.py" line="106">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -104,7 +104,7 @@
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('dump'))
-    sort_by = kwargs.get('sort_by', prefs.get('dump.sort_by'))
+    sort_by = kwargs.get('sort_by', prefs.get('XXdump.sort_byXX'))
 
     characters = parser.get_characters(flatten(search), ignore)
     if do_sort:
</failure>
			<system-out>    sort_by = kwargs.get('sort_by', prefs.get('dump.sort_by'))</system-out>
		</testcase>
		<testcase name="Mutant #322" file="npc/commands/core.py" line="106">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -104,7 +104,7 @@
     if not ignore:
         ignore = []
     ignore.extend(prefs.get_ignored_paths('dump'))
-    sort_by = kwargs.get('sort_by', prefs.get('dump.sort_by'))
+    sort_by = None
 
     characters = parser.get_characters(flatten(search), ignore)
     if do_sort:
</failure>
			<system-out>    sort_by = kwargs.get('sort_by', prefs.get('dump.sort_by'))</system-out>
		</testcase>
		<testcase name="Mutant #323" file="npc/commands/core.py" line="108">
			<system-out>    characters = parser.get_characters(flatten(search), ignore)</system-out>
		</testcase>
		<testcase name="Mutant #324" file="npc/commands/core.py" line="110">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -108,7 +108,7 @@
 
     characters = parser.get_characters(flatten(search), ignore)
     if do_sort:
-        sorter = util.character_sorter.CharacterSorter(sort_by, prefs=prefs)
+        sorter = None
         characters = sorter.sort(characters)
 
     characters = [c.dump() for c in characters]
</failure>
			<system-out>        sorter = util.character_sorter.CharacterSorter(sort_by, prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #325" file="npc/commands/core.py" line="111">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -109,7 +109,7 @@
     characters = parser.get_characters(flatten(search), ignore)
     if do_sort:
         sorter = util.character_sorter.CharacterSorter(sort_by, prefs=prefs)
-        characters = sorter.sort(characters)
+        characters = None
 
     characters = [c.dump() for c in characters]
 
</failure>
			<system-out>        characters = sorter.sort(characters)</system-out>
		</testcase>
		<testcase name="Mutant #326" file="npc/commands/core.py" line="113">
			<system-out>    characters = [c.dump() for c in characters]</system-out>
		</testcase>
		<testcase name="Mutant #327" file="npc/commands/core.py" line="118">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -116,7 +116,7 @@
     # make some json
     if metadata:
         meta = {
-            'meta': True,
+            'XXmetaXX': True,
             **prefs.get_metadata('json')
         }
         characters = itertools.chain([meta], characters)
</failure>
			<system-out>            'meta': True,</system-out>
		</testcase>
		<testcase name="Mutant #328" file="npc/commands/core.py" line="118">
			<system-out>            'meta': True,</system-out>
		</testcase>
		<testcase name="Mutant #329" file="npc/commands/core.py" line="119">
			<system-out>            **prefs.get_metadata('json')</system-out>
		</testcase>
		<testcase name="Mutant #330" file="npc/commands/core.py" line="119">
			<system-out>            **prefs.get_metadata('json')</system-out>
		</testcase>
		<testcase name="Mutant #331" file="npc/commands/core.py" line="120">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #332" file="npc/commands/core.py" line="121">
			<system-out>        characters = itertools.chain([meta], characters)</system-out>
		</testcase>
		<testcase name="Mutant #333" file="npc/commands/core.py" line="126">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -124,7 +124,7 @@
     with util.smart_open(outfile) as outstream:
         json.dump([c for c in characters], outstream, cls=CharacterEncoder)
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = [outfile] if outfile and outfile == '-' else None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #334" file="npc/commands/core.py" line="126">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -124,7 +124,7 @@
     with util.smart_open(outfile) as outstream:
         json.dump([c for c in characters], outstream, cls=CharacterEncoder)
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = [outfile] if outfile and outfile != 'XX-XX' else None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #335" file="npc/commands/core.py" line="126">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -124,7 +124,7 @@
     with util.smart_open(outfile) as outstream:
         json.dump([c for c in characters], outstream, cls=CharacterEncoder)
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = [outfile] if outfile or outfile != '-' else None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #336" file="npc/commands/core.py" line="126">
			<failure type="failure" message="bad_survived">--- npc/commands/core.py
+++ npc/commands/core.py
@@ -124,7 +124,7 @@
     with util.smart_open(outfile) as outstream:
         json.dump([c for c in characters], outstream, cls=CharacterEncoder)
 
-    openable = [outfile] if outfile and outfile != '-' else None
+    openable = None
 
     return result.Success(openable=openable)
 
</failure>
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #337" file="npc/commands/core.py" line="130">
			<system-out>def lint(*search, ignore=None, fix=False, strict=False, report=True, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #338" file="npc/commands/core.py" line="130">
			<system-out>def lint(*search, ignore=None, fix=False, strict=False, report=True, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #339" file="npc/commands/core.py" line="130">
			<system-out>def lint(*search, ignore=None, fix=False, strict=False, report=True, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #340" file="npc/commands/core.py" line="156">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #341" file="npc/commands/core.py" line="156">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #342" file="npc/commands/core.py" line="157">
			<system-out>    if not ignore:</system-out>
		</testcase>
		<testcase name="Mutant #343" file="npc/commands/core.py" line="158">
			<system-out>        ignore = []</system-out>
		</testcase>
		<testcase name="Mutant #344" file="npc/commands/core.py" line="159">
			<system-out>    ignore.extend(prefs.get_ignored_paths('lint'))</system-out>
		</testcase>
		<testcase name="Mutant #345" file="npc/commands/core.py" line="161">
			<system-out>    openable = []</system-out>
		</testcase>
		<testcase name="Mutant #346" file="npc/commands/core.py" line="162">
			<system-out>    printable = []</system-out>
		</testcase>
		<testcase name="Mutant #347" file="npc/commands/core.py" line="165">
			<system-out>    characters = parser.get_characters(flatten(search), ignore)</system-out>
		</testcase>
		<testcase name="Mutant #348" file="npc/commands/core.py" line="167">
			<system-out>        if character.tags('nolint').present:</system-out>
		</testcase>
		<testcase name="Mutant #349" file="npc/commands/core.py" line="168">
			<system-out>            continue</system-out>
		</testcase>
		<testcase name="Mutant #350" file="npc/commands/core.py" line="174">
			<system-out>        if not character.valid:</system-out>
		</testcase>
		<testcase name="Mutant #351" file="npc/commands/core.py" line="175">
			<system-out>            charpath = character.path</system-out>
		</testcase>
		<testcase name="Mutant #352" file="npc/commands/core.py" line="176">
			<system-out>            if not report:</system-out>
		</testcase>
		<testcase name="Mutant #353" file="npc/commands/core.py" line="178">
			<system-out>            if len(character.problems) &gt; 1:</system-out>
		</testcase>
		<testcase name="Mutant #354" file="npc/commands/core.py" line="178">
			<system-out>            if len(character.problems) &gt; 1:</system-out>
		</testcase>
		<testcase name="Mutant #355" file="npc/commands/core.py" line="179">
			<system-out>                printable.append(&quot;File '{}':&quot;.format(charpath))</system-out>
		</testcase>
		<testcase name="Mutant #356" file="npc/commands/core.py" line="181">
			<system-out>                    printable.append(&quot;    {}&quot;.format(detail))</system-out>
		</testcase>
		<testcase name="Mutant #357" file="npc/commands/core.py" line="183">
			<system-out>                printable.append(&quot;{} in '{}'&quot;.format(character.problems[0], charpath))</system-out>
		</testcase>
		<testcase name="Mutant #358" file="npc/commands/core.py" line="183">
			<system-out>                printable.append(&quot;{} in '{}'&quot;.format(character.problems[0], charpath))</system-out>
		</testcase>
		<testcase name="Mutant #359" file="npc/commands/core.py" line="187">
			<system-out>def init(create_types=False, create_all=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #360" file="npc/commands/core.py" line="187">
			<system-out>def init(create_types=False, create_all=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #361" file="npc/commands/core.py" line="211">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #362" file="npc/commands/core.py" line="211">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #363" file="npc/commands/core.py" line="212">
			<system-out>    campaign_name = kwargs.get('campaign_name', Path.cwd().name)</system-out>
		</testcase>
		<testcase name="Mutant #364" file="npc/commands/core.py" line="212">
			<system-out>    campaign_name = kwargs.get('campaign_name', Path.cwd().name)</system-out>
		</testcase>
		<testcase name="Mutant #365" file="npc/commands/core.py" line="213">
			<system-out>    dryrun = kwargs.get('dryrun', False)</system-out>
		</testcase>
		<testcase name="Mutant #366" file="npc/commands/core.py" line="213">
			<system-out>    dryrun = kwargs.get('dryrun', False)</system-out>
		</testcase>
		<testcase name="Mutant #367" file="npc/commands/core.py" line="213">
			<system-out>    dryrun = kwargs.get('dryrun', False)</system-out>
		</testcase>
		<testcase name="Mutant #368" file="npc/commands/core.py" line="214">
			<system-out>    verbose = kwargs.get('verbose', False)</system-out>
		</testcase>
		<testcase name="Mutant #369" file="npc/commands/core.py" line="214">
			<system-out>    verbose = kwargs.get('verbose', False)</system-out>
		</testcase>
		<testcase name="Mutant #370" file="npc/commands/core.py" line="214">
			<system-out>    verbose = kwargs.get('verbose', False)</system-out>
		</testcase>
		<testcase name="Mutant #371" file="npc/commands/core.py" line="216">
			<system-out>    changelog = []</system-out>
		</testcase>
		<testcase name="Mutant #372" file="npc/commands/core.py" line="219">
			<system-out>        if dryrun or verbose:</system-out>
		</testcase>
		<testcase name="Mutant #373" file="npc/commands/core.py" line="223">
			<system-out>        log_change(path_name)</system-out>
		</testcase>
		<testcase name="Mutant #374" file="npc/commands/core.py" line="224">
			<system-out>        if not dryrun:</system-out>
		</testcase>
		<testcase name="Mutant #375" file="npc/commands/core.py" line="225">
			<system-out>            makedirs(path_name, mode=0o775, exist_ok=True)</system-out>
		</testcase>
		<testcase name="Mutant #376" file="npc/commands/core.py" line="225">
			<system-out>            makedirs(path_name, mode=0o775, exist_ok=True)</system-out>
		</testcase>
		<testcase name="Mutant #377" file="npc/commands/core.py" line="227">
			<system-out>    for key, required_path in prefs.get('paths.required').items():</system-out>
		</testcase>
		<testcase name="Mutant #378" file="npc/commands/core.py" line="228">
			<system-out>        if key in [&quot;additional_paths&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #379" file="npc/commands/core.py" line="228">
			<system-out>        if key in [&quot;additional_paths&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #380" file="npc/commands/core.py" line="231">
			<system-out>                new_dir(extra_path)</system-out>
		</testcase>
		<testcase name="Mutant #381" file="npc/commands/core.py" line="232">
			<system-out>            continue</system-out>
		</testcase>
		<testcase name="Mutant #382" file="npc/commands/core.py" line="233">
			<system-out>        new_dir(required_path)</system-out>
		</testcase>
		<testcase name="Mutant #383" file="npc/commands/core.py" line="234">
			<system-out>    if not prefs.get_settings_path('campaign').exists():</system-out>
		</testcase>
		<testcase name="Mutant #384" file="npc/commands/core.py" line="234">
			<system-out>    if not prefs.get_settings_path('campaign').exists():</system-out>
		</testcase>
		<testcase name="Mutant #385" file="npc/commands/core.py" line="235">
			<system-out>        new_dir('.npc')</system-out>
		</testcase>
		<testcase name="Mutant #386" file="npc/commands/core.py" line="236">
			<system-out>        log_change(prefs.get_settings_path('campaign'))</system-out>
		</testcase>
		<testcase name="Mutant #387" file="npc/commands/core.py" line="237">
			<system-out>        if not dryrun:</system-out>
		</testcase>
		<testcase name="Mutant #388" file="npc/commands/core.py" line="238">
			<system-out>            with open(prefs.get_settings_path('campaign'), 'a') as settings_file:</system-out>
		</testcase>
		<testcase name="Mutant #389" file="npc/commands/core.py" line="238">
			<system-out>            with open(prefs.get_settings_path('campaign'), 'a') as settings_file:</system-out>
		</testcase>
		<testcase name="Mutant #390" file="npc/commands/core.py" line="239">
			<system-out>                json.dump({'campaign_name': campaign_name}, settings_file, indent=4)</system-out>
		</testcase>
		<testcase name="Mutant #391" file="npc/commands/core.py" line="239">
			<system-out>                json.dump({'campaign_name': campaign_name}, settings_file, indent=4)</system-out>
		</testcase>
		<testcase name="Mutant #392" file="npc/commands/core.py" line="241">
			<system-out>    if create_types or create_all:</system-out>
		</testcase>
		<testcase name="Mutant #393" file="npc/commands/core.py" line="242">
			<system-out>        cbase = Path(prefs.get('paths.required.characters'))</system-out>
		</testcase>
		<testcase name="Mutant #394" file="npc/commands/core.py" line="242">
			<system-out>        cbase = Path(prefs.get('paths.required.characters'))</system-out>
		</testcase>
		<testcase name="Mutant #395" file="npc/commands/core.py" line="248">
			<system-out>def open_settings(location, show_defaults=False, settings_type=None, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #396" file="npc/commands/core.py" line="270">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #397" file="npc/commands/core.py" line="270">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #398" file="npc/commands/core.py" line="272">
			<system-out>        settings_type = settings_type.lower()</system-out>
		</testcase>
		<testcase name="Mutant #399" file="npc/commands/core.py" line="274">
			<system-out>    target_path = prefs.get_settings_path(location, settings_type)</system-out>
		</testcase>
		<testcase name="Mutant #400" file="npc/commands/core.py" line="275">
			<system-out>    if not target_path.exists():</system-out>
		</testcase>
		<testcase name="Mutant #401" file="npc/commands/core.py" line="276">
			<system-out>        dirname = target_path.parent</system-out>
		</testcase>
		<testcase name="Mutant #402" file="npc/commands/core.py" line="277">
			<system-out>        makedirs(dirname, mode=0o775, exist_ok=True)</system-out>
		</testcase>
		<testcase name="Mutant #403" file="npc/commands/core.py" line="277">
			<system-out>        makedirs(dirname, mode=0o775, exist_ok=True)</system-out>
		</testcase>
		<testcase name="Mutant #404" file="npc/commands/core.py" line="278">
			<system-out>        with open(target_path, 'a') as settings_file:</system-out>
		</testcase>
		<testcase name="Mutant #405" file="npc/commands/core.py" line="279">
			<system-out>            settings_file.write('{}')</system-out>
		</testcase>
		<testcase name="Mutant #406" file="npc/commands/core.py" line="282">
			<system-out>        openable = [prefs.get_settings_path('default', settings_type, target_path.suffix), target_path]</system-out>
		</testcase>
		<testcase name="Mutant #407" file="npc/commands/core.py" line="282">
			<system-out>        openable = [prefs.get_settings_path('default', settings_type, target_path.suffix), target_path]</system-out>
		</testcase>
		<testcase name="Mutant #408" file="npc/commands/core.py" line="284">
			<system-out>        openable = [target_path]</system-out>
		</testcase>
		<testcase name="Mutant #409" file="npc/commands/core.py" line="311">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #410" file="npc/commands/core.py" line="311">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #411" file="npc/commands/core.py" line="313">
			<system-out>    if not search:</system-out>
		</testcase>
		<testcase name="Mutant #412" file="npc/commands/core.py" line="314">
			<system-out>        search = ['.']</system-out>
		</testcase>
		<testcase name="Mutant #413" file="npc/commands/core.py" line="314">
			<system-out>        search = ['.']</system-out>
		</testcase>
		<testcase name="Mutant #414" file="npc/commands/core.py" line="315">
			<system-out>    if not ignore:</system-out>
		</testcase>
		<testcase name="Mutant #415" file="npc/commands/core.py" line="316">
			<system-out>        ignore = []</system-out>
		</testcase>
		<testcase name="Mutant #416" file="npc/commands/core.py" line="317">
			<system-out>    ignore.extend(prefs.get_ignored_paths('report'))</system-out>
		</testcase>
		<testcase name="Mutant #417" file="npc/commands/core.py" line="318">
			<system-out>    if not fmt or fmt == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #418" file="npc/commands/core.py" line="318">
			<system-out>    if not fmt or fmt == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #419" file="npc/commands/core.py" line="318">
			<system-out>    if not fmt or fmt == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #420" file="npc/commands/core.py" line="318">
			<system-out>    if not fmt or fmt == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #421" file="npc/commands/core.py" line="319">
			<system-out>        fmt = prefs.get('report.default_format')</system-out>
		</testcase>
		<testcase name="Mutant #422" file="npc/commands/core.py" line="319">
			<system-out>        fmt = prefs.get('report.default_format')</system-out>
		</testcase>
		<testcase name="Mutant #423" file="npc/commands/core.py" line="322">
			<system-out>    characters = list(parser.get_characters(flatten(search), ignore))</system-out>
		</testcase>
		<testcase name="Mutant #424" file="npc/commands/core.py" line="327">
			<system-out>    table_data = {tag : Counter(flatten([c.tags.get(tag, 'None') for c in characters])) for tag in flatten(tags)}</system-out>
		</testcase>
		<testcase name="Mutant #425" file="npc/commands/core.py" line="327">
			<system-out>    table_data = {tag : Counter(flatten([c.tags.get(tag, 'None') for c in characters])) for tag in flatten(tags)}</system-out>
		</testcase>
		<testcase name="Mutant #426" file="npc/commands/core.py" line="329">
			<system-out>    formatter = formatters.get_report_formatter(fmt)</system-out>
		</testcase>
		<testcase name="Mutant #427" file="npc/commands/core.py" line="330">
			<system-out>    if not formatter:</system-out>
		</testcase>
		<testcase name="Mutant #428" file="npc/commands/core.py" line="331">
			<system-out>        return result.OptionError(errmsg=&quot;Cannot create output of format '{}'&quot;.format(fmt))</system-out>
		</testcase>
		<testcase name="Mutant #429" file="npc/commands/core.py" line="332">
			<system-out>    with util.smart_open(outfile, binary=(fmt in formatters.BINARY_TYPES)) as outstream:</system-out>
		</testcase>
		<testcase name="Mutant #430" file="npc/commands/core.py" line="333">
			<system-out>        response = formatter(table_data, outstream=outstream, prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #431" file="npc/commands/core.py" line="336">
			<system-out>    if not response.success:</system-out>
		</testcase>
		<testcase name="Mutant #432" file="npc/commands/core.py" line="339">
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #433" file="npc/commands/core.py" line="339">
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #434" file="npc/commands/core.py" line="339">
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #435" file="npc/commands/core.py" line="339">
			<system-out>    openable = [outfile] if outfile and outfile != '-' else None</system-out>
		</testcase>
		<testcase name="Mutant #436" file="npc/commands/core.py" line="366">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #437" file="npc/commands/core.py" line="366">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #438" file="npc/commands/core.py" line="367">
			<system-out>    dryrun = kwargs.get('dryrun', False)</system-out>
		</testcase>
		<testcase name="Mutant #439" file="npc/commands/core.py" line="367">
			<system-out>    dryrun = kwargs.get('dryrun', False)</system-out>
		</testcase>
		<testcase name="Mutant #440" file="npc/commands/core.py" line="367">
			<system-out>    dryrun = kwargs.get('dryrun', False)</system-out>
		</testcase>
		<testcase name="Mutant #441" file="npc/commands/core.py" line="368">
			<system-out>    if search is None:</system-out>
		</testcase>
		<testcase name="Mutant #442" file="npc/commands/core.py" line="369">
			<system-out>        search = []</system-out>
		</testcase>
		<testcase name="Mutant #443" file="npc/commands/core.py" line="371">
			<system-out>    if not ignore:</system-out>
		</testcase>
		<testcase name="Mutant #444" file="npc/commands/core.py" line="372">
			<system-out>        ignore = []</system-out>
		</testcase>
		<testcase name="Mutant #445" file="npc/commands/core.py" line="373">
			<system-out>    ignore.extend(prefs.get_ignored_paths('find'))</system-out>
		</testcase>
		<testcase name="Mutant #446" file="npc/commands/core.py" line="375">
			<system-out>    rules = list(flatten(rules))</system-out>
		</testcase>
		<testcase name="Mutant #447" file="npc/commands/core.py" line="378">
			<system-out>    characters = list(parser.get_characters(flatten(search), ignore))</system-out>
		</testcase>
		<testcase name="Mutant #448" file="npc/commands/core.py" line="380">
			<system-out>    filtered_chars = find_characters(rules, characters=characters)</system-out>
		</testcase>
		<testcase name="Mutant #449" file="npc/commands/core.py" line="382">
			<system-out>    paths = [char.path for char in filtered_chars]</system-out>
		</testcase>
		<testcase name="Mutant #450" file="npc/commands/core.py" line="385">
			<system-out>        openable = []</system-out>
		</testcase>
		<testcase name="Mutant #451" file="npc/commands/core.py" line="386">
			<system-out>        printables = paths</system-out>
		</testcase>
		<testcase name="Mutant #452" file="npc/commands/core.py" line="388">
			<system-out>        openable = paths</system-out>
		</testcase>
		<testcase name="Mutant #453" file="npc/commands/core.py" line="389">
			<system-out>        printables = []</system-out>
		</testcase>
		<testcase name="Mutant #454" file="npc/commands/core.py" line="411">
			<system-out>    rule = rules.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #455" file="npc/commands/core.py" line="411">
			<system-out>    rule = rules.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #456" file="npc/commands/core.py" line="413">
			<system-out>    if &quot;~:&quot; in rule:</system-out>
		</testcase>
		<testcase name="Mutant #457" file="npc/commands/core.py" line="413">
			<system-out>    if &quot;~:&quot; in rule:</system-out>
		</testcase>
		<testcase name="Mutant #458" file="npc/commands/core.py" line="414">
			<system-out>        sep = &quot;~:&quot;</system-out>
		</testcase>
		<testcase name="Mutant #459" file="npc/commands/core.py" line="414">
			<system-out>        sep = &quot;~:&quot;</system-out>
		</testcase>
		<testcase name="Mutant #460" file="npc/commands/core.py" line="415">
			<system-out>        mod = lambda x: not x</system-out>
		</testcase>
		<testcase name="Mutant #461" file="npc/commands/core.py" line="415">
			<system-out>        mod = lambda x: not x</system-out>
		</testcase>
		<testcase name="Mutant #462" file="npc/commands/core.py" line="415">
			<system-out>        mod = lambda x: not x</system-out>
		</testcase>
		<testcase name="Mutant #463" file="npc/commands/core.py" line="417">
			<system-out>        sep = &quot;:&quot;</system-out>
		</testcase>
		<testcase name="Mutant #464" file="npc/commands/core.py" line="417">
			<system-out>        sep = &quot;:&quot;</system-out>
		</testcase>
		<testcase name="Mutant #465" file="npc/commands/core.py" line="418">
			<system-out>        mod = lambda x: x</system-out>
		</testcase>
		<testcase name="Mutant #466" file="npc/commands/core.py" line="418">
			<system-out>        mod = lambda x: x</system-out>
		</testcase>
		<testcase name="Mutant #467" file="npc/commands/core.py" line="420">
			<system-out>    parts = rule.split(sep, 1)</system-out>
		</testcase>
		<testcase name="Mutant #468" file="npc/commands/core.py" line="420">
			<system-out>    parts = rule.split(sep, 1)</system-out>
		</testcase>
		<testcase name="Mutant #469" file="npc/commands/core.py" line="422">
			<system-out>    if len(parts) == 2:</system-out>
		</testcase>
		<testcase name="Mutant #470" file="npc/commands/core.py" line="422">
			<system-out>    if len(parts) == 2:</system-out>
		</testcase>
		<testcase name="Mutant #471" file="npc/commands/core.py" line="423">
			<system-out>        tag = parts[0].strip().casefold()</system-out>
		</testcase>
		<testcase name="Mutant #472" file="npc/commands/core.py" line="423">
			<system-out>        tag = parts[0].strip().casefold()</system-out>
		</testcase>
		<testcase name="Mutant #473" file="npc/commands/core.py" line="425">
			<system-out>        if not tag:</system-out>
		</testcase>
		<testcase name="Mutant #474" file="npc/commands/core.py" line="427">
			<system-out>            tag = 'name'</system-out>
		</testcase>
		<testcase name="Mutant #475" file="npc/commands/core.py" line="427">
			<system-out>            tag = 'name'</system-out>
		</testcase>
		<testcase name="Mutant #476" file="npc/commands/core.py" line="430">
			<system-out>        if tag == 'desc':</system-out>
		</testcase>
		<testcase name="Mutant #477" file="npc/commands/core.py" line="430">
			<system-out>        if tag == 'desc':</system-out>
		</testcase>
		<testcase name="Mutant #478" file="npc/commands/core.py" line="431">
			<system-out>            tag = 'description'</system-out>
		</testcase>
		<testcase name="Mutant #479" file="npc/commands/core.py" line="431">
			<system-out>            tag = 'description'</system-out>
		</testcase>
		<testcase name="Mutant #480" file="npc/commands/core.py" line="433">
			<system-out>        text = parts[1].strip().casefold()</system-out>
		</testcase>
		<testcase name="Mutant #481" file="npc/commands/core.py" line="433">
			<system-out>        text = parts[1].strip().casefold()</system-out>
		</testcase>
		<testcase name="Mutant #482" file="npc/commands/core.py" line="434">
			<system-out>    elif len(parts) == 1:</system-out>
		</testcase>
		<testcase name="Mutant #483" file="npc/commands/core.py" line="434">
			<system-out>    elif len(parts) == 1:</system-out>
		</testcase>
		<testcase name="Mutant #484" file="npc/commands/core.py" line="435">
			<system-out>        tag = 'name'</system-out>
		</testcase>
		<testcase name="Mutant #485" file="npc/commands/core.py" line="435">
			<system-out>        tag = 'name'</system-out>
		</testcase>
		<testcase name="Mutant #486" file="npc/commands/core.py" line="436">
			<system-out>        text = parts[0].strip().casefold()</system-out>
		</testcase>
		<testcase name="Mutant #487" file="npc/commands/core.py" line="436">
			<system-out>        text = parts[0].strip().casefold()</system-out>
		</testcase>
		<testcase name="Mutant #488" file="npc/commands/core.py" line="438">
			<system-out>    filtered_chars = [char for char in characters if mod(char.tags(tag).contains(text))]</system-out>
		</testcase>
		<testcase name="Mutant #489" file="npc/commands/core.py" line="440">
			<system-out>    if not rules:</system-out>
		</testcase>
		<testcase name="Mutant #490" file="npc/commands/create_character.py" line="11">
			<system-out>def standard(name, ctype, *, dead=False, foreign=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #491" file="npc/commands/create_character.py" line="11">
			<system-out>def standard(name, ctype, *, dead=False, foreign=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #492" file="npc/commands/create_character.py" line="37">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #493" file="npc/commands/create_character.py" line="37">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #494" file="npc/commands/create_character.py" line="38">
			<system-out>    groups = kwargs.get('groups', [])</system-out>
		</testcase>
		<testcase name="Mutant #495" file="npc/commands/create_character.py" line="38">
			<system-out>    groups = kwargs.get('groups', [])</system-out>
		</testcase>
		<testcase name="Mutant #496" file="npc/commands/create_character.py" line="39">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #497" file="npc/commands/create_character.py" line="39">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #498" file="npc/commands/create_character.py" line="39">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #499" file="npc/commands/create_character.py" line="40">
			<system-out>    ctype = ctype.lower()</system-out>
		</testcase>
		<testcase name="Mutant #500" file="npc/commands/create_character.py" line="42">
			<system-out>    if not prefs.get(&quot;types.{}.sheet_template&quot;.format(ctype)):</system-out>
		</testcase>
		<testcase name="Mutant #501" file="npc/commands/create_character.py" line="42">
			<system-out>    if not prefs.get(&quot;types.{}.sheet_template&quot;.format(ctype)):</system-out>
		</testcase>
		<testcase name="Mutant #502" file="npc/commands/create_character.py" line="43">
			<system-out>        return result.ConfigError(errmsg=&quot;Character type '{}' does not have a sheet template&quot;.format(ctype))</system-out>
		</testcase>
		<testcase name="Mutant #503" file="npc/commands/create_character.py" line="52">
			<system-out>        prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #504" file="npc/commands/create_character.py" line="57">
			<system-out>                      court=None, motley=None, dead=False, foreign=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #505" file="npc/commands/create_character.py" line="57">
			<system-out>                      court=None, motley=None, dead=False, foreign=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #506" file="npc/commands/create_character.py" line="88">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #507" file="npc/commands/create_character.py" line="88">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #508" file="npc/commands/create_character.py" line="89">
			<system-out>    groups = kwargs.get('groups', [])</system-out>
		</testcase>
		<testcase name="Mutant #509" file="npc/commands/create_character.py" line="89">
			<system-out>    groups = kwargs.get('groups', [])</system-out>
		</testcase>
		<testcase name="Mutant #510" file="npc/commands/create_character.py" line="90">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #511" file="npc/commands/create_character.py" line="90">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #512" file="npc/commands/create_character.py" line="90">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #513" file="npc/commands/create_character.py" line="91">
			<system-out>    freehold = kwargs.get('freehold', None)</system-out>
		</testcase>
		<testcase name="Mutant #514" file="npc/commands/create_character.py" line="91">
			<system-out>    freehold = kwargs.get('freehold', None)</system-out>
		</testcase>
		<testcase name="Mutant #515" file="npc/commands/create_character.py" line="92">
			<system-out>    entitlement = kwargs.get('entitlement', None)</system-out>
		</testcase>
		<testcase name="Mutant #516" file="npc/commands/create_character.py" line="92">
			<system-out>    entitlement = kwargs.get('entitlement', None)</system-out>
		</testcase>
		<testcase name="Mutant #517" file="npc/commands/create_character.py" line="96">
			<system-out>        ctype='changeling',</system-out>
		</testcase>
		<testcase name="Mutant #518" file="npc/commands/create_character.py" line="101">
			<system-out>        prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #519" file="npc/commands/create_character.py" line="102">
			<system-out>    temp_char.tags('seeming').append(seeming.title())</system-out>
		</testcase>
		<testcase name="Mutant #520" file="npc/commands/create_character.py" line="103">
			<system-out>    temp_char.tags('kith').append(kith.title())</system-out>
		</testcase>
		<testcase name="Mutant #521" file="npc/commands/create_character.py" line="105">
			<system-out>        temp_char.tags('court').append(court.title())</system-out>
		</testcase>
		<testcase name="Mutant #522" file="npc/commands/create_character.py" line="107">
			<system-out>        temp_char.tags('motley').append(motley)</system-out>
		</testcase>
		<testcase name="Mutant #523" file="npc/commands/create_character.py" line="109">
			<system-out>        temp_char.tags('freehold').append(freehold)</system-out>
		</testcase>
		<testcase name="Mutant #524" file="npc/commands/create_character.py" line="111">
			<system-out>        temp_char.tags('entitlement').append(entitlement)</system-out>
		</testcase>
		<testcase name="Mutant #525" file="npc/commands/create_character.py" line="117">
			<system-out>            r'^(\s+)seeming(\s+)\w+$',</system-out>
		</testcase>
		<testcase name="Mutant #526" file="npc/commands/create_character.py" line="118">
			<system-out>            re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #527" file="npc/commands/create_character.py" line="119">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #528" file="npc/commands/create_character.py" line="121">
			<system-out>            r'^(\s+)kith(\s+)\w+$',</system-out>
		</testcase>
		<testcase name="Mutant #529" file="npc/commands/create_character.py" line="122">
			<system-out>            re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #530" file="npc/commands/create_character.py" line="123">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #531" file="npc/commands/create_character.py" line="125">
			<system-out>        seeming_name = temp_char.tags('seeming').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #532" file="npc/commands/create_character.py" line="125">
			<system-out>        seeming_name = temp_char.tags('seeming').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #533" file="npc/commands/create_character.py" line="126">
			<system-out>        seeming_key = seeming.lower()</system-out>
		</testcase>
		<testcase name="Mutant #534" file="npc/commands/create_character.py" line="127">
			<system-out>        if seeming_key in prefs.get('changeling.seemings'):</system-out>
		</testcase>
		<testcase name="Mutant #535" file="npc/commands/create_character.py" line="127">
			<system-out>        if seeming_key in prefs.get('changeling.seemings'):</system-out>
		</testcase>
		<testcase name="Mutant #536" file="npc/commands/create_character.py" line="128">
			<system-out>            seeming_notes = &quot;{}; {}&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #537" file="npc/commands/create_character.py" line="129">
			<system-out>                prefs.get(&quot;changeling.blessings.{}&quot;.format(seeming_key)),</system-out>
		</testcase>
		<testcase name="Mutant #538" file="npc/commands/create_character.py" line="130">
			<system-out>                prefs.get(&quot;changeling.curses.{}&quot;.format(seeming_key)))</system-out>
		</testcase>
		<testcase name="Mutant #539" file="npc/commands/create_character.py" line="130">
			<system-out>                prefs.get(&quot;changeling.curses.{}&quot;.format(seeming_key)))</system-out>
		</testcase>
		<testcase name="Mutant #540" file="npc/commands/create_character.py" line="132">
			<system-out>                r&quot;\g&lt;1&gt;Seeming\g&lt;2&gt;{} ({})&quot;.format(seeming_name, seeming_notes),</system-out>
		</testcase>
		<testcase name="Mutant #541" file="npc/commands/create_character.py" line="134">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #542" file="npc/commands/create_character.py" line="136">
			<system-out>            print_err(&quot;Unrecognized seeming '{}'&quot;.format(seeming_name))</system-out>
		</testcase>
		<testcase name="Mutant #543" file="npc/commands/create_character.py" line="138">
			<system-out>        kith_name = temp_char.tags('kith').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #544" file="npc/commands/create_character.py" line="138">
			<system-out>        kith_name = temp_char.tags('kith').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #545" file="npc/commands/create_character.py" line="139">
			<system-out>        kith_key = kith.lower()</system-out>
		</testcase>
		<testcase name="Mutant #546" file="npc/commands/create_character.py" line="140">
			<system-out>        if kith_key in prefs.get('changeling.kiths.{}'.format(seeming_key), []):</system-out>
		</testcase>
		<testcase name="Mutant #547" file="npc/commands/create_character.py" line="140">
			<system-out>        if kith_key in prefs.get('changeling.kiths.{}'.format(seeming_key), []):</system-out>
		</testcase>
		<testcase name="Mutant #548" file="npc/commands/create_character.py" line="141">
			<system-out>            kith_notes = prefs.get(&quot;changeling.blessings.{}&quot;.format(kith_key))</system-out>
		</testcase>
		<testcase name="Mutant #549" file="npc/commands/create_character.py" line="141">
			<system-out>            kith_notes = prefs.get(&quot;changeling.blessings.{}&quot;.format(kith_key))</system-out>
		</testcase>
		<testcase name="Mutant #550" file="npc/commands/create_character.py" line="143">
			<system-out>                r&quot;\g&lt;1&gt;Kith\g&lt;2&gt;{} ({})&quot;.format(kith_name, kith_notes),</system-out>
		</testcase>
		<testcase name="Mutant #551" file="npc/commands/create_character.py" line="145">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #552" file="npc/commands/create_character.py" line="147">
			<system-out>            print_err(&quot;Unrecognized kith '{}' for seeming '{}'&quot;.format(kith_name, seeming_name))</system-out>
		</testcase>
		<testcase name="Mutant #553" file="npc/commands/create_character.py" line="178">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #554" file="npc/commands/create_character.py" line="178">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #555" file="npc/commands/create_character.py" line="179">
			<system-out>    groups = kwargs.get('groups', [])</system-out>
		</testcase>
		<testcase name="Mutant #556" file="npc/commands/create_character.py" line="179">
			<system-out>    groups = kwargs.get('groups', [])</system-out>
		</testcase>
		<testcase name="Mutant #557" file="npc/commands/create_character.py" line="180">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #558" file="npc/commands/create_character.py" line="180">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #559" file="npc/commands/create_character.py" line="180">
			<system-out>    location = kwargs.get('location', False)</system-out>
		</testcase>
		<testcase name="Mutant #560" file="npc/commands/create_character.py" line="181">
			<system-out>    dead = kwargs.get('dead', False)</system-out>
		</testcase>
		<testcase name="Mutant #561" file="npc/commands/create_character.py" line="181">
			<system-out>    dead = kwargs.get('dead', False)</system-out>
		</testcase>
		<testcase name="Mutant #562" file="npc/commands/create_character.py" line="181">
			<system-out>    dead = kwargs.get('dead', False)</system-out>
		</testcase>
		<testcase name="Mutant #563" file="npc/commands/create_character.py" line="182">
			<system-out>    foreign = kwargs.get('foreign', False)</system-out>
		</testcase>
		<testcase name="Mutant #564" file="npc/commands/create_character.py" line="182">
			<system-out>    foreign = kwargs.get('foreign', False)</system-out>
		</testcase>
		<testcase name="Mutant #565" file="npc/commands/create_character.py" line="182">
			<system-out>    foreign = kwargs.get('foreign', False)</system-out>
		</testcase>
		<testcase name="Mutant #566" file="npc/commands/create_character.py" line="186">
			<system-out>        ctype='werewolf',</system-out>
		</testcase>
		<testcase name="Mutant #567" file="npc/commands/create_character.py" line="191">
			<system-out>        prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #568" file="npc/commands/create_character.py" line="192">
			<system-out>    temp_char.tags('auspice').append(auspice.title())</system-out>
		</testcase>
		<testcase name="Mutant #569" file="npc/commands/create_character.py" line="194">
			<system-out>        temp_char.tags('tribe').append(tribe.title())</system-out>
		</testcase>
		<testcase name="Mutant #570" file="npc/commands/create_character.py" line="196">
			<system-out>        temp_char.tags('pack').append(pack)</system-out>
		</testcase>
		<testcase name="Mutant #571" file="npc/commands/create_character.py" line="220">
			<system-out>    attributes = prefs.get('tag_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #572" file="npc/commands/create_character.py" line="220">
			<system-out>    attributes = prefs.get('tag_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #573" file="npc/commands/create_character.py" line="221">
			<system-out>    attributes['description'] = [prefs.get('character_header')]</system-out>
		</testcase>
		<testcase name="Mutant #574" file="npc/commands/create_character.py" line="221">
			<system-out>    attributes['description'] = [prefs.get('character_header')]</system-out>
		</testcase>
		<testcase name="Mutant #575" file="npc/commands/create_character.py" line="221">
			<system-out>    attributes['description'] = [prefs.get('character_header')]</system-out>
		</testcase>
		<testcase name="Mutant #576" file="npc/commands/create_character.py" line="222">
			<system-out>    attributes['type'] = [ctype.title()]</system-out>
		</testcase>
		<testcase name="Mutant #577" file="npc/commands/create_character.py" line="222">
			<system-out>    attributes['type'] = [ctype.title()]</system-out>
		</testcase>
		<testcase name="Mutant #578" file="npc/commands/create_character.py" line="224">
			<system-out>        attributes['group'] = groups</system-out>
		</testcase>
		<testcase name="Mutant #579" file="npc/commands/create_character.py" line="224">
			<system-out>        attributes['group'] = groups</system-out>
		</testcase>
		<testcase name="Mutant #580" file="npc/commands/create_character.py" line="225">
			<system-out>    if dead is not False:</system-out>
		</testcase>
		<testcase name="Mutant #581" file="npc/commands/create_character.py" line="225">
			<system-out>    if dead is not False:</system-out>
		</testcase>
		<testcase name="Mutant #582" file="npc/commands/create_character.py" line="226">
			<system-out>        if dead is True:</system-out>
		</testcase>
		<testcase name="Mutant #583" file="npc/commands/create_character.py" line="226">
			<system-out>        if dead is True:</system-out>
		</testcase>
		<testcase name="Mutant #584" file="npc/commands/create_character.py" line="227">
			<system-out>            dead = ''</system-out>
		</testcase>
		<testcase name="Mutant #585" file="npc/commands/create_character.py" line="227">
			<system-out>            dead = ''</system-out>
		</testcase>
		<testcase name="Mutant #586" file="npc/commands/create_character.py" line="228">
			<system-out>        attributes['dead'] = dead</system-out>
		</testcase>
		<testcase name="Mutant #587" file="npc/commands/create_character.py" line="228">
			<system-out>        attributes['dead'] = dead</system-out>
		</testcase>
		<testcase name="Mutant #588" file="npc/commands/create_character.py" line="229">
			<system-out>    if foreign is not False:</system-out>
		</testcase>
		<testcase name="Mutant #589" file="npc/commands/create_character.py" line="229">
			<system-out>    if foreign is not False:</system-out>
		</testcase>
		<testcase name="Mutant #590" file="npc/commands/create_character.py" line="230">
			<system-out>        attributes['foreign'] = foreign</system-out>
		</testcase>
		<testcase name="Mutant #591" file="npc/commands/create_character.py" line="230">
			<system-out>        attributes['foreign'] = foreign</system-out>
		</testcase>
		<testcase name="Mutant #592" file="npc/commands/create_character.py" line="231">
			<system-out>    if location is not False:</system-out>
		</testcase>
		<testcase name="Mutant #593" file="npc/commands/create_character.py" line="231">
			<system-out>    if location is not False:</system-out>
		</testcase>
		<testcase name="Mutant #594" file="npc/commands/create_character.py" line="232">
			<system-out>        attributes['location'] = location</system-out>
		</testcase>
		<testcase name="Mutant #595" file="npc/commands/create_character.py" line="232">
			<system-out>        attributes['location'] = location</system-out>
		</testcase>
		<testcase name="Mutant #596" file="npc/commands/create_character.py" line="255">
			<system-out>    template_path = prefs.get('types.{}.sheet_template'.format(character.type_key))</system-out>
		</testcase>
		<testcase name="Mutant #597" file="npc/commands/create_character.py" line="255">
			<system-out>    template_path = prefs.get('types.{}.sheet_template'.format(character.type_key))</system-out>
		</testcase>
		<testcase name="Mutant #598" file="npc/commands/create_character.py" line="256">
			<system-out>    if not template_path:</system-out>
		</testcase>
		<testcase name="Mutant #599" file="npc/commands/create_character.py" line="257">
			<system-out>        return result.ConfigError(errmsg=&quot;Could not find template {}&quot;.format(character.type_key))</system-out>
		</testcase>
		<testcase name="Mutant #600" file="npc/commands/create_character.py" line="260">
			<system-out>    target_path = create_path_from_character(character, prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #601" file="npc/commands/create_character.py" line="262">
			<system-out>    filename = name + template_path.suffix</system-out>
		</testcase>
		<testcase name="Mutant #602" file="npc/commands/create_character.py" line="262">
			<system-out>    filename = name + template_path.suffix</system-out>
		</testcase>
		<testcase name="Mutant #603" file="npc/commands/create_character.py" line="263">
			<system-out>    target_path = target_path.joinpath(filename)</system-out>
		</testcase>
		<testcase name="Mutant #604" file="npc/commands/create_character.py" line="265">
			<system-out>        return result.FSError(errmsg=&quot;Character '{}' already exists!&quot;.format(name))</system-out>
		</testcase>
		<testcase name="Mutant #605" file="npc/commands/create_character.py" line="268">
			<system-out>    header = '\n\n' + character.build_header() + '\n\n'</system-out>
		</testcase>
		<testcase name="Mutant #606" file="npc/commands/create_character.py" line="268">
			<system-out>    header = '\n\n' + character.build_header() + '\n\n'</system-out>
		</testcase>
		<testcase name="Mutant #607" file="npc/commands/create_character.py" line="268">
			<system-out>    header = '\n\n' + character.build_header() + '\n\n'</system-out>
		</testcase>
		<testcase name="Mutant #608" file="npc/commands/create_character.py" line="268">
			<system-out>    header = '\n\n' + character.build_header() + '\n\n'</system-out>
		</testcase>
		<testcase name="Mutant #609" file="npc/commands/create_character.py" line="268">
			<system-out>    header = '\n\n' + character.build_header() + '\n\n'</system-out>
		</testcase>
		<testcase name="Mutant #610" file="npc/commands/create_character.py" line="272">
			<system-out>        with open(template_path, 'r') as template_data:</system-out>
		</testcase>
		<testcase name="Mutant #611" file="npc/commands/create_character.py" line="273">
			<system-out>            data = header + template_data.read()</system-out>
		</testcase>
		<testcase name="Mutant #612" file="npc/commands/create_character.py" line="273">
			<system-out>            data = header + template_data.read()</system-out>
		</testcase>
		<testcase name="Mutant #613" file="npc/commands/create_character.py" line="275">
			<system-out>        return result.FSError(errmsg=err.strerror + &quot; ({})&quot;.format(template_path))</system-out>
		</testcase>
		<testcase name="Mutant #614" file="npc/commands/create_character.py" line="275">
			<system-out>        return result.FSError(errmsg=err.strerror + &quot; ({})&quot;.format(template_path))</system-out>
		</testcase>
		<testcase name="Mutant #615" file="npc/commands/create_character.py" line="278">
			<system-out>        data = fn(data)</system-out>
		</testcase>
		<testcase name="Mutant #616" file="npc/commands/create_character.py" line="282">
			<system-out>        with open(target_path, 'w') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #617" file="npc/commands/create_character.py" line="285">
			<system-out>        return result.FSError(errmsg=err.strerror + &quot; ({})&quot;.format(target_path))</system-out>
		</testcase>
		<testcase name="Mutant #618" file="npc/commands/create_character.py" line="285">
			<system-out>        return result.FSError(errmsg=err.strerror + &quot; ({})&quot;.format(target_path))</system-out>
		</testcase>
		<testcase name="Mutant #619" file="npc/commands/util/core.py" line="86">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #620" file="npc/commands/util/core.py" line="86">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #621" file="npc/commands/util/core.py" line="88">
			<system-out>    if not base_path:</system-out>
		</testcase>
		<testcase name="Mutant #622" file="npc/commands/util/core.py" line="89">
			<system-out>        base_path = prefs.get('paths.required.characters')</system-out>
		</testcase>
		<testcase name="Mutant #623" file="npc/commands/util/core.py" line="89">
			<system-out>        base_path = prefs.get('paths.required.characters')</system-out>
		</testcase>
		<testcase name="Mutant #624" file="npc/commands/util/core.py" line="90">
			<system-out>    if not hierarchy:</system-out>
		</testcase>
		<testcase name="Mutant #625" file="npc/commands/util/core.py" line="91">
			<system-out>        hierarchy = prefs.get('paths.hierarchy')</system-out>
		</testcase>
		<testcase name="Mutant #626" file="npc/commands/util/core.py" line="91">
			<system-out>        hierarchy = prefs.get('paths.hierarchy')</system-out>
		</testcase>
		<testcase name="Mutant #627" file="npc/commands/util/core.py" line="93">
			<system-out>    target_path = Path(base_path)</system-out>
		</testcase>
		<testcase name="Mutant #628" file="npc/commands/util/core.py" line="97">
			<system-out>        test_path = base.joinpath(potential)</system-out>
		</testcase>
		<testcase name="Mutant #629" file="npc/commands/util/core.py" line="104">
			<system-out>            'types.{char_type}.missing_values.{component}'.format(</system-out>
		</testcase>
		<testcase name="Mutant #630" file="npc/commands/util/core.py" line="107">
			<system-out>            '')</system-out>
		</testcase>
		<testcase name="Mutant #631" file="npc/commands/util/core.py" line="109">
			<system-out>    for component in hierarchy.split('/'):</system-out>
		</testcase>
		<testcase name="Mutant #632" file="npc/commands/util/core.py" line="110">
			<system-out>        if not(component.startswith('{') and component.endswith('}')):</system-out>
		</testcase>
		<testcase name="Mutant #633" file="npc/commands/util/core.py" line="110">
			<system-out>        if not(component.startswith('{') and component.endswith('}')):</system-out>
		</testcase>
		<testcase name="Mutant #634" file="npc/commands/util/core.py" line="110">
			<system-out>        if not(component.startswith('{') and component.endswith('}')):</system-out>
		</testcase>
		<testcase name="Mutant #635" file="npc/commands/util/core.py" line="110">
			<system-out>        if not(component.startswith('{') and component.endswith('}')):</system-out>
		</testcase>
		<testcase name="Mutant #636" file="npc/commands/util/core.py" line="112">
			<system-out>            target_path = add_path_if_exists(target_path, component)</system-out>
		</testcase>
		<testcase name="Mutant #637" file="npc/commands/util/core.py" line="113">
			<system-out>            continue</system-out>
		</testcase>
		<testcase name="Mutant #638" file="npc/commands/util/core.py" line="115">
			<system-out>        component = component.strip('{}')</system-out>
		</testcase>
		<testcase name="Mutant #639" file="npc/commands/util/core.py" line="115">
			<system-out>        component = component.strip('{}')</system-out>
		</testcase>
		<testcase name="Mutant #640" file="npc/commands/util/core.py" line="117">
			<system-out>        if '?' in component:</system-out>
		</testcase>
		<testcase name="Mutant #641" file="npc/commands/util/core.py" line="117">
			<system-out>        if '?' in component:</system-out>
		</testcase>
		<testcase name="Mutant #642" file="npc/commands/util/core.py" line="118">
			<system-out>            tag_name, literal = component.split('?')</system-out>
		</testcase>
		<testcase name="Mutant #643" file="npc/commands/util/core.py" line="118">
			<system-out>            tag_name, literal = component.split('?')</system-out>
		</testcase>
		<testcase name="Mutant #644" file="npc/commands/util/core.py" line="119">
			<system-out>            tag_name = prefs.translate_tag_for_character_type(character.type_key, tag_name)</system-out>
		</testcase>
		<testcase name="Mutant #645" file="npc/commands/util/core.py" line="120">
			<system-out>            if tag_name == 'foreign':</system-out>
		</testcase>
		<testcase name="Mutant #646" file="npc/commands/util/core.py" line="120">
			<system-out>            if tag_name == 'foreign':</system-out>
		</testcase>
		<testcase name="Mutant #647" file="npc/commands/util/core.py" line="123">
			<system-out>                    target_path = add_path_if_exists(target_path, literal)</system-out>
		</testcase>
		<testcase name="Mutant #648" file="npc/commands/util/core.py" line="125">
			<system-out>                target_path = add_path_if_exists(target_path, literal)</system-out>
		</testcase>
		<testcase name="Mutant #649" file="npc/commands/util/core.py" line="126">
			<system-out>            continue</system-out>
		</testcase>
		<testcase name="Mutant #650" file="npc/commands/util/core.py" line="128">
			<system-out>        tag_name = prefs.translate_tag_for_character_type(character.type_key, component)</system-out>
		</testcase>
		<testcase name="Mutant #651" file="npc/commands/util/core.py" line="129">
			<system-out>        if tag_name == 'type':</system-out>
		</testcase>
		<testcase name="Mutant #652" file="npc/commands/util/core.py" line="129">
			<system-out>        if tag_name == 'type':</system-out>
		</testcase>
		<testcase name="Mutant #653" file="npc/commands/util/core.py" line="131">
			<system-out>            target_path = add_path_if_exists(target_path, prefs.get('types.{}.type_path'.format(character.type_key), placeholder('type')))</system-out>
		</testcase>
		<testcase name="Mutant #654" file="npc/commands/util/core.py" line="131">
			<system-out>            target_path = add_path_if_exists(target_path, prefs.get('types.{}.type_path'.format(character.type_key), placeholder('type')))</system-out>
		</testcase>
		<testcase name="Mutant #655" file="npc/commands/util/core.py" line="131">
			<system-out>            target_path = add_path_if_exists(target_path, prefs.get('types.{}.type_path'.format(character.type_key), placeholder('type')))</system-out>
		</testcase>
		<testcase name="Mutant #656" file="npc/commands/util/core.py" line="132">
			<system-out>        elif tag_name == 'group':</system-out>
		</testcase>
		<testcase name="Mutant #657" file="npc/commands/util/core.py" line="132">
			<system-out>        elif tag_name == 'group':</system-out>
		</testcase>
		<testcase name="Mutant #658" file="npc/commands/util/core.py" line="134">
			<system-out>            target_path = add_path_if_exists(target_path, character.tags('group').first_value())</system-out>
		</testcase>
		<testcase name="Mutant #659" file="npc/commands/util/core.py" line="134">
			<system-out>            target_path = add_path_if_exists(target_path, character.tags('group').first_value())</system-out>
		</testcase>
		<testcase name="Mutant #660" file="npc/commands/util/core.py" line="135">
			<system-out>        elif tag_name in ['rank', 'ranks']:</system-out>
		</testcase>
		<testcase name="Mutant #661" file="npc/commands/util/core.py" line="135">
			<system-out>        elif tag_name in ['rank', 'ranks']:</system-out>
		</testcase>
		<testcase name="Mutant #662" file="npc/commands/util/core.py" line="135">
			<system-out>        elif tag_name in ['rank', 'ranks']:</system-out>
		</testcase>
		<testcase name="Mutant #663" file="npc/commands/util/core.py" line="137">
			<system-out>            val = character.tags('group').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #664" file="npc/commands/util/core.py" line="137">
			<system-out>            val = character.tags('group').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #665" file="npc/commands/util/core.py" line="138">
			<system-out>            for rank in character.tags('group').subtag(val):</system-out>
		</testcase>
		<testcase name="Mutant #666" file="npc/commands/util/core.py" line="139">
			<system-out>                target_path = add_path_if_exists(target_path, rank)</system-out>
		</testcase>
		<testcase name="Mutant #667" file="npc/commands/util/core.py" line="140">
			<system-out>        elif tag_name == 'groups':</system-out>
		</testcase>
		<testcase name="Mutant #668" file="npc/commands/util/core.py" line="140">
			<system-out>        elif tag_name == 'groups':</system-out>
		</testcase>
		<testcase name="Mutant #669" file="npc/commands/util/core.py" line="142">
			<system-out>            for group_name in character.tags('group'):</system-out>
		</testcase>
		<testcase name="Mutant #670" file="npc/commands/util/core.py" line="143">
			<system-out>                target_path = add_path_if_exists(target_path, group_name)</system-out>
		</testcase>
		<testcase name="Mutant #671" file="npc/commands/util/core.py" line="144">
			<system-out>        elif tag_name == 'groups+ranks':</system-out>
		</testcase>
		<testcase name="Mutant #672" file="npc/commands/util/core.py" line="144">
			<system-out>        elif tag_name == 'groups+ranks':</system-out>
		</testcase>
		<testcase name="Mutant #673" file="npc/commands/util/core.py" line="147">
			<system-out>            for group_name in character.tags('group'):</system-out>
		</testcase>
		<testcase name="Mutant #674" file="npc/commands/util/core.py" line="148">
			<system-out>                target_path = add_path_if_exists(target_path, group_name)</system-out>
		</testcase>
		<testcase name="Mutant #675" file="npc/commands/util/core.py" line="149">
			<system-out>                for rank in character.tags('group').subtag(group_name):</system-out>
		</testcase>
		<testcase name="Mutant #676" file="npc/commands/util/core.py" line="150">
			<system-out>                    target_path = add_path_if_exists(target_path, rank)</system-out>
		</testcase>
		<testcase name="Mutant #677" file="npc/commands/util/core.py" line="151">
			<system-out>        elif tag_name == 'locations':</system-out>
		</testcase>
		<testcase name="Mutant #678" file="npc/commands/util/core.py" line="151">
			<system-out>        elif tag_name == 'locations':</system-out>
		</testcase>
		<testcase name="Mutant #679" file="npc/commands/util/core.py" line="153">
			<system-out>            location_value = character.tags('location').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #680" file="npc/commands/util/core.py" line="153">
			<system-out>            location_value = character.tags('location').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #681" file="npc/commands/util/core.py" line="154">
			<system-out>            if not location_value:</system-out>
		</testcase>
		<testcase name="Mutant #682" file="npc/commands/util/core.py" line="155">
			<system-out>                location_value = placeholder('location')</system-out>
		</testcase>
		<testcase name="Mutant #683" file="npc/commands/util/core.py" line="155">
			<system-out>                location_value = placeholder('location')</system-out>
		</testcase>
		<testcase name="Mutant #684" file="npc/commands/util/core.py" line="156">
			<system-out>            target_path = add_path_if_exists(target_path, location_value)</system-out>
		</testcase>
		<testcase name="Mutant #685" file="npc/commands/util/core.py" line="158">
			<system-out>            foreign_value = character.tags('foreign').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #686" file="npc/commands/util/core.py" line="158">
			<system-out>            foreign_value = character.tags('foreign').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #687" file="npc/commands/util/core.py" line="159">
			<system-out>            if not foreign_value:</system-out>
		</testcase>
		<testcase name="Mutant #688" file="npc/commands/util/core.py" line="160">
			<system-out>                foreign_value = placeholder('foreign')</system-out>
		</testcase>
		<testcase name="Mutant #689" file="npc/commands/util/core.py" line="160">
			<system-out>                foreign_value = placeholder('foreign')</system-out>
		</testcase>
		<testcase name="Mutant #690" file="npc/commands/util/core.py" line="161">
			<system-out>            target_path = add_path_if_exists(target_path, foreign_value)</system-out>
		</testcase>
		<testcase name="Mutant #691" file="npc/commands/util/core.py" line="164">
			<system-out>            val = character.tags(tag_name).first_value()</system-out>
		</testcase>
		<testcase name="Mutant #692" file="npc/commands/util/core.py" line="165">
			<system-out>            if not val:</system-out>
		</testcase>
		<testcase name="Mutant #693" file="npc/commands/util/core.py" line="166">
			<system-out>                val = placeholder(tag_name)</system-out>
		</testcase>
		<testcase name="Mutant #694" file="npc/commands/util/core.py" line="167">
			<system-out>            target_path = add_path_if_exists(target_path, val)</system-out>
		</testcase>
		<testcase name="Mutant #695" file="npc/commands/util/core.py" line="182">
			<system-out>        if not dirs and not files:</system-out>
		</testcase>
		<testcase name="Mutant #696" file="npc/commands/util/core.py" line="182">
			<system-out>        if not dirs and not files:</system-out>
		</testcase>
		<testcase name="Mutant #697" file="npc/commands/util/core.py" line="182">
			<system-out>        if not dirs and not files:</system-out>
		</testcase>
		<testcase name="Mutant #698" file="npc/commands/util/core.py" line="185">
			<system-out>@contextmanager</system-out>
		</testcase>
		<testcase name="Mutant #699" file="npc/commands/util/core.py" line="186">
			<system-out>def smart_open(filename=None, binary=False):</system-out>
		</testcase>
		<testcase name="Mutant #700" file="npc/commands/util/core.py" line="206">
			<system-out>    if filename and filename != '-':</system-out>
		</testcase>
		<testcase name="Mutant #701" file="npc/commands/util/core.py" line="206">
			<system-out>    if filename and filename != '-':</system-out>
		</testcase>
		<testcase name="Mutant #702" file="npc/commands/util/core.py" line="206">
			<system-out>    if filename and filename != '-':</system-out>
		</testcase>
		<testcase name="Mutant #703" file="npc/commands/util/core.py" line="207">
			<system-out>        stream = open(filename, 'wb') if binary else open(filename, 'w')</system-out>
		</testcase>
		<testcase name="Mutant #704" file="npc/commands/util/core.py" line="207">
			<system-out>        stream = open(filename, 'wb') if binary else open(filename, 'w')</system-out>
		</testcase>
		<testcase name="Mutant #705" file="npc/commands/util/core.py" line="207">
			<system-out>        stream = open(filename, 'wb') if binary else open(filename, 'w')</system-out>
		</testcase>
		<testcase name="Mutant #706" file="npc/commands/util/core.py" line="209">
			<system-out>        stream = sys.stdout.buffer if binary else sys.stdout</system-out>
		</testcase>
		<testcase name="Mutant #707" file="npc/commands/util/core.py" line="214">
			<system-out>        if stream is not sys.stdout:</system-out>
		</testcase>
		<testcase name="Mutant #708" file="npc/commands/util/character_sorter.py" line="22">
			<system-out>    if keys is None:</system-out>
		</testcase>
		<testcase name="Mutant #709" file="npc/commands/util/character_sorter.py" line="23">
			<system-out>        keys = ['last']</system-out>
		</testcase>
		<testcase name="Mutant #710" file="npc/commands/util/character_sorter.py" line="23">
			<system-out>        keys = ['last']</system-out>
		</testcase>
		<testcase name="Mutant #711" file="npc/commands/util/character_sorter.py" line="25">
			<system-out>    sorter = CharacterSorter(keys, prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #712" file="npc/commands/util/character_sorter.py" line="47">
			<system-out>        self.keys = keys</system-out>
		</testcase>
		<testcase name="Mutant #713" file="npc/commands/util/character_sorter.py" line="48">
			<system-out>        self.prefs = prefs</system-out>
		</testcase>
		<testcase name="Mutant #714" file="npc/commands/util/character_sorter.py" line="50">
			<system-out>        self.comparers = []</system-out>
		</testcase>
		<testcase name="Mutant #715" file="npc/commands/util/character_sorter.py" line="53">
			<system-out>            n = c.tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #716" file="npc/commands/util/character_sorter.py" line="53">
			<system-out>            n = c.tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #717" file="npc/commands/util/character_sorter.py" line="54">
			<system-out>            if not n:</system-out>
		</testcase>
		<testcase name="Mutant #718" file="npc/commands/util/character_sorter.py" line="55">
			<system-out>                n = ''</system-out>
		</testcase>
		<testcase name="Mutant #719" file="npc/commands/util/character_sorter.py" line="55">
			<system-out>                n = ''</system-out>
		</testcase>
		<testcase name="Mutant #720" file="npc/commands/util/character_sorter.py" line="56">
			<system-out>            return n.split(' ')[0]</system-out>
		</testcase>
		<testcase name="Mutant #721" file="npc/commands/util/character_sorter.py" line="56">
			<system-out>            return n.split(' ')[0]</system-out>
		</testcase>
		<testcase name="Mutant #722" file="npc/commands/util/character_sorter.py" line="59">
			<system-out>            n = c.tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #723" file="npc/commands/util/character_sorter.py" line="59">
			<system-out>            n = c.tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #724" file="npc/commands/util/character_sorter.py" line="60">
			<system-out>            if not n:</system-out>
		</testcase>
		<testcase name="Mutant #725" file="npc/commands/util/character_sorter.py" line="61">
			<system-out>                n = ''</system-out>
		</testcase>
		<testcase name="Mutant #726" file="npc/commands/util/character_sorter.py" line="61">
			<system-out>                n = ''</system-out>
		</testcase>
		<testcase name="Mutant #727" file="npc/commands/util/character_sorter.py" line="62">
			<system-out>            return n.split(' ')[-1]</system-out>
		</testcase>
		<testcase name="Mutant #728" file="npc/commands/util/character_sorter.py" line="62">
			<system-out>            return n.split(' ')[-1]</system-out>
		</testcase>
		<testcase name="Mutant #729" file="npc/commands/util/character_sorter.py" line="62">
			<system-out>            return n.split(' ')[-1]</system-out>
		</testcase>
		<testcase name="Mutant #730" file="npc/commands/util/character_sorter.py" line="65">
			<system-out>            'first': first,</system-out>
		</testcase>
		<testcase name="Mutant #731" file="npc/commands/util/character_sorter.py" line="66">
			<system-out>            'last': last</system-out>
		</testcase>
		<testcase name="Mutant #732" file="npc/commands/util/character_sorter.py" line="67">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #733" file="npc/commands/util/character_sorter.py" line="71">
			<system-out>            if self.prefs is not None:</system-out>
		</testcase>
		<testcase name="Mutant #734" file="npc/commands/util/character_sorter.py" line="72">
			<system-out>                tag_name = self.prefs.translate_tag_for_character_type(character.type_key, tag_name)</system-out>
		</testcase>
		<testcase name="Mutant #735" file="npc/commands/util/character_sorter.py" line="90">
			<system-out>        if len(self.comparers) == 0:</system-out>
		</testcase>
		<testcase name="Mutant #736" file="npc/commands/util/character_sorter.py" line="90">
			<system-out>        if len(self.comparers) == 0:</system-out>
		</testcase>
		<testcase name="Mutant #737" file="npc/commands/util/character_sorter.py" line="92">
			<system-out>                tag_name = key[1:] if key.startswith('-') else key</system-out>
		</testcase>
		<testcase name="Mutant #738" file="npc/commands/util/character_sorter.py" line="92">
			<system-out>                tag_name = key[1:] if key.startswith('-') else key</system-out>
		</testcase>
		<testcase name="Mutant #739" file="npc/commands/util/character_sorter.py" line="92">
			<system-out>                tag_name = key[1:] if key.startswith('-') else key</system-out>
		</testcase>
		<testcase name="Mutant #740" file="npc/commands/util/character_sorter.py" line="93">
			<system-out>                if not tag_name in self.functions:</system-out>
		</testcase>
		<testcase name="Mutant #741" file="npc/commands/util/character_sorter.py" line="93">
			<system-out>                if not tag_name in self.functions:</system-out>
		</testcase>
		<testcase name="Mutant #742" file="npc/commands/util/character_sorter.py" line="94">
			<system-out>                    self.functions[tag_name] = self.generic_get(tag_name)</system-out>
		</testcase>
		<testcase name="Mutant #743" file="npc/commands/util/character_sorter.py" line="95">
			<system-out>                self.comparers.append((self.functions[tag_name], 1 if tag_name == key else -1))</system-out>
		</testcase>
		<testcase name="Mutant #744" file="npc/commands/util/character_sorter.py" line="95">
			<system-out>                self.comparers.append((self.functions[tag_name], 1 if tag_name == key else -1))</system-out>
		</testcase>
		<testcase name="Mutant #745" file="npc/commands/util/character_sorter.py" line="95">
			<system-out>                self.comparers.append((self.functions[tag_name], 1 if tag_name == key else -1))</system-out>
		</testcase>
		<testcase name="Mutant #746" file="npc/commands/util/character_sorter.py" line="95">
			<system-out>                self.comparers.append((self.functions[tag_name], 1 if tag_name == key else -1))</system-out>
		</testcase>
		<testcase name="Mutant #747" file="npc/commands/util/character_sorter.py" line="101">
			<system-out>            result = self.cmp(func(left), func(right))</system-out>
		</testcase>
		<testcase name="Mutant #748" file="npc/commands/util/character_sorter.py" line="103">
			<system-out>                return polarity * result</system-out>
		</testcase>
		<testcase name="Mutant #749" file="npc/commands/util/character_sorter.py" line="105">
			<system-out>            return 0</system-out>
		</testcase>
		<testcase name="Mutant #750" file="npc/commands/util/character_sorter.py" line="109">
			<system-out>            return (a &gt; b) - (a &lt; b)</system-out>
		</testcase>
		<testcase name="Mutant #751" file="npc/commands/util/character_sorter.py" line="109">
			<system-out>            return (a &gt; b) - (a &lt; b)</system-out>
		</testcase>
		<testcase name="Mutant #752" file="npc/commands/util/character_sorter.py" line="109">
			<system-out>            return (a &gt; b) - (a &lt; b)</system-out>
		</testcase>
		<testcase name="Mutant #753" file="npc/commands/util/character_sorter.py" line="111">
			<system-out>            return -1</system-out>
		</testcase>
		<testcase name="Mutant #754" file="npc/commands/util/character_sorter.py" line="111">
			<system-out>            return -1</system-out>
		</testcase>
		<testcase name="Mutant #755" file="npc/util/core.py" line="26">
			<system-out>    if file_path.suffix == '.yaml':</system-out>
		</testcase>
		<testcase name="Mutant #756" file="npc/util/core.py" line="26">
			<system-out>    if file_path.suffix == '.yaml':</system-out>
		</testcase>
		<testcase name="Mutant #757" file="npc/util/core.py" line="28">
			<system-out>    if file_path.suffix == '.json':</system-out>
		</testcase>
		<testcase name="Mutant #758" file="npc/util/core.py" line="28">
			<system-out>    if file_path.suffix == '.json':</system-out>
		</testcase>
		<testcase name="Mutant #759" file="npc/util/core.py" line="31">
			<system-out>    raise errors.FormatError(&quot;Unrecognized format for {}&quot;.format(file_path))</system-out>
		</testcase>
		<testcase name="Mutant #760" file="npc/util/core.py" line="43">
			<system-out>    with open(filename, 'r') as f:</system-out>
		</testcase>
		<testcase name="Mutant #761" file="npc/util/core.py" line="47">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #762" file="npc/util/core.py" line="47">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #763" file="npc/util/core.py" line="48">
			<system-out>            nicemsg = nicestr.format(filename, err.problem, err.problem_mark.line, err.problem_mark.column)</system-out>
		</testcase>
		<testcase name="Mutant #764" file="npc/util/core.py" line="79">
			<system-out>            r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|&quot;(?:\\.|[^\\&quot;])*&quot;',</system-out>
		</testcase>
		<testcase name="Mutant #765" file="npc/util/core.py" line="80">
			<system-out>            re.DOTALL | re.MULTILINE</system-out>
		</testcase>
		<testcase name="Mutant #766" file="npc/util/core.py" line="81">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #767" file="npc/util/core.py" line="83">
			<system-out>            s = match.group(0)</system-out>
		</testcase>
		<testcase name="Mutant #768" file="npc/util/core.py" line="83">
			<system-out>            s = match.group(0)</system-out>
		</testcase>
		<testcase name="Mutant #769" file="npc/util/core.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #770" file="npc/util/core.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #771" file="npc/util/core.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #772" file="npc/util/core.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #773" file="npc/util/core.py" line="92">
			<system-out>        trailing_object_commas_re = re.compile(r'(,)\s*}(?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #774" file="npc/util/core.py" line="92">
			<system-out>        trailing_object_commas_re = re.compile(r'(,)\s*}(?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #775" file="npc/util/core.py" line="93">
			<system-out>        trailing_array_commas_re = re.compile(r'(,)\s*\](?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #776" file="npc/util/core.py" line="93">
			<system-out>        trailing_array_commas_re = re.compile(r'(,)\s*\](?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #777" file="npc/util/core.py" line="95">
			<system-out>        objects_fixed = trailing_object_commas_re.sub(&quot;}&quot;, json_like)</system-out>
		</testcase>
		<testcase name="Mutant #778" file="npc/util/core.py" line="95">
			<system-out>        objects_fixed = trailing_object_commas_re.sub(&quot;}&quot;, json_like)</system-out>
		</testcase>
		<testcase name="Mutant #779" file="npc/util/core.py" line="97">
			<system-out>        return trailing_array_commas_re.sub(&quot;]&quot;, objects_fixed)</system-out>
		</testcase>
		<testcase name="Mutant #780" file="npc/util/core.py" line="100">
			<system-out>        content = ''.join(json_file.readlines())</system-out>
		</testcase>
		<testcase name="Mutant #781" file="npc/util/core.py" line="100">
			<system-out>        content = ''.join(json_file.readlines())</system-out>
		</testcase>
		<testcase name="Mutant #782" file="npc/util/core.py" line="101">
			<system-out>        content = remove_comments(content) # Remove comments</system-out>
		</testcase>
		<testcase name="Mutant #783" file="npc/util/core.py" line="102">
			<system-out>        content = remove_trailing_commas(content) # Remove trailing commas</system-out>
		</testcase>
		<testcase name="Mutant #784" file="npc/util/core.py" line="108">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #785" file="npc/util/core.py" line="108">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #786" file="npc/util/core.py" line="109">
			<system-out>            nicemsg = nicestr.format(filename, err.msg, err.lineno, err.colno)</system-out>
		</testcase>
		<testcase name="Mutant #787" file="npc/util/core.py" line="112">
			<system-out>            err.strerror = &quot;Could not load '{0}': {1}&quot;.format(filename, err.strerror)</system-out>
		</testcase>
		<testcase name="Mutant #788" file="npc/util/core.py" line="112">
			<system-out>            err.strerror = &quot;Could not load '{0}': {1}&quot;.format(filename, err.strerror)</system-out>
		</testcase>
		<testcase name="Mutant #789" file="npc/util/core.py" line="140">
			<system-out>        if hasattr(item, '__iter__') and not isinstance(item, str):</system-out>
		</testcase>
		<testcase name="Mutant #790" file="npc/util/core.py" line="140">
			<system-out>        if hasattr(item, '__iter__') and not isinstance(item, str):</system-out>
		</testcase>
		<testcase name="Mutant #791" file="npc/util/core.py" line="140">
			<system-out>        if hasattr(item, '__iter__') and not isinstance(item, str):</system-out>
		</testcase>
		<testcase name="Mutant #792" file="npc/util/core.py" line="157">
			<system-out>    if value is None:</system-out>
		</testcase>
		<testcase name="Mutant #793" file="npc/util/core.py" line="158">
			<system-out>        target_dict[key]</system-out>
		</testcase>
		<testcase name="Mutant #794" file="npc/util/core.py" line="159">
			<system-out>    elif hasattr(value, '__iter__') and not isinstance(value, str):</system-out>
		</testcase>
		<testcase name="Mutant #795" file="npc/util/core.py" line="159">
			<system-out>    elif hasattr(value, '__iter__') and not isinstance(value, str):</system-out>
		</testcase>
		<testcase name="Mutant #796" file="npc/util/core.py" line="159">
			<system-out>    elif hasattr(value, '__iter__') and not isinstance(value, str):</system-out>
		</testcase>
		<testcase name="Mutant #797" file="npc/util/core.py" line="160">
			<system-out>        target_dict[key] += value</system-out>
		</testcase>
		<testcase name="Mutant #798" file="npc/util/core.py" line="160">
			<system-out>        target_dict[key] += value</system-out>
		</testcase>
		<testcase name="Mutant #799" file="npc/util/core.py" line="176">
			<system-out>    current_dir = Path.cwd()</system-out>
		</testcase>
		<testcase name="Mutant #800" file="npc/util/core.py" line="177">
			<system-out>    base = current_dir.resolve()</system-out>
		</testcase>
		<testcase name="Mutant #801" file="npc/util/core.py" line="178">
			<system-out>    old_base = Path('')</system-out>
		</testcase>
		<testcase name="Mutant #802" file="npc/util/core.py" line="178">
			<system-out>    old_base = Path('')</system-out>
		</testcase>
		<testcase name="Mutant #803" file="npc/util/core.py" line="179">
			<system-out>    while not base.joinpath('.npc').is_dir():</system-out>
		</testcase>
		<testcase name="Mutant #804" file="npc/util/core.py" line="179">
			<system-out>    while not base.joinpath('.npc').is_dir():</system-out>
		</testcase>
		<testcase name="Mutant #805" file="npc/util/core.py" line="180">
			<system-out>        old_base = base</system-out>
		</testcase>
		<testcase name="Mutant #806" file="npc/util/core.py" line="181">
			<system-out>        base = base.parent.resolve()</system-out>
		</testcase>
		<testcase name="Mutant #807" file="npc/util/core.py" line="197">
			<system-out>    editor = determine_editor(sys.platform, prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #808" file="npc/util/core.py" line="200">
			<system-out>        path_to_open = Path(file_path)</system-out>
		</testcase>
		<testcase name="Mutant #809" file="npc/util/core.py" line="217">
			<system-out>    if prefs.get('editor'):</system-out>
		</testcase>
		<testcase name="Mutant #810" file="npc/util/core.py" line="218">
			<system-out>        return prefs.get('editor')</system-out>
		</testcase>
		<testcase name="Mutant #811" file="npc/util/core.py" line="219">
			<system-out>    elif 'linux' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #812" file="npc/util/core.py" line="219">
			<system-out>    elif 'linux' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #813" file="npc/util/core.py" line="220">
			<system-out>        return 'xdg-open'</system-out>
		</testcase>
		<testcase name="Mutant #814" file="npc/util/core.py" line="221">
			<system-out>    elif 'darwin' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #815" file="npc/util/core.py" line="221">
			<system-out>    elif 'darwin' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #816" file="npc/util/core.py" line="222">
			<system-out>        return 'open'</system-out>
		</testcase>
		<testcase name="Mutant #817" file="npc/util/core.py" line="224">
			<system-out>        return 'start'</system-out>
		</testcase>
		<testcase name="Mutant #818" file="npc/util/core.py" line="230">
			<system-out>    _instances = {}</system-out>
		</testcase>
		<testcase name="Mutant #819" file="npc/util/core.py" line="232">
			<system-out>        if cls not in cls._instances:</system-out>
		</testcase>
		<testcase name="Mutant #820" file="npc/util/core.py" line="233">
			<system-out>            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #821" file="npc/util/core.py" line="250">
			<system-out>    serial_args = [full_args.pop(k) for k in argnames]</system-out>
		</testcase>
		<testcase name="Mutant #822" file="npc/util/core.py" line="270">
			<system-out>        if argname in full_args and full_args[argname] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #823" file="npc/util/core.py" line="270">
			<system-out>        if argname in full_args and full_args[argname] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #824" file="npc/util/core.py" line="270">
			<system-out>        if argname in full_args and full_args[argname] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #825" file="npc/util/core.py" line="271">
			<system-out>            full_args[argname] = [s.strip() for s in full_args[argname].split(',') if s]</system-out>
		</testcase>
		<testcase name="Mutant #826" file="npc/util/core.py" line="271">
			<system-out>            full_args[argname] = [s.strip() for s in full_args[argname].split(',') if s]</system-out>
		</testcase>
		<testcase name="Mutant #827" file="npc/util/errors.py" line="16">
			<system-out>        self.strerror = strerror</system-out>
		</testcase>
		<testcase name="Mutant #828" file="npc/util/errors.py" line="28">
			<system-out>    def __init__(self, strerror, path, lineno=0, colno=0):</system-out>
		</testcase>
		<testcase name="Mutant #829" file="npc/util/errors.py" line="28">
			<system-out>    def __init__(self, strerror, path, lineno=0, colno=0):</system-out>
		</testcase>
		<testcase name="Mutant #830" file="npc/util/errors.py" line="29">
			<system-out>        self.strerror = strerror</system-out>
		</testcase>
		<testcase name="Mutant #831" file="npc/util/errors.py" line="30">
			<system-out>        self.path = path</system-out>
		</testcase>
		<testcase name="Mutant #832" file="npc/util/errors.py" line="31">
			<system-out>        self.lineno = lineno</system-out>
		</testcase>
		<testcase name="Mutant #833" file="npc/util/errors.py" line="32">
			<system-out>        self.colno = colno</system-out>
		</testcase>
		<testcase name="Mutant #834" file="npc/util/copyCore.py" line="26">
			<system-out>    if file_path.suffix == '.yaml':</system-out>
		</testcase>
		<testcase name="Mutant #835" file="npc/util/copyCore.py" line="26">
			<system-out>    if file_path.suffix == '.yaml':</system-out>
		</testcase>
		<testcase name="Mutant #836" file="npc/util/copyCore.py" line="28">
			<system-out>    if file_path.suffix == '.json':</system-out>
		</testcase>
		<testcase name="Mutant #837" file="npc/util/copyCore.py" line="28">
			<system-out>    if file_path.suffix == '.json':</system-out>
		</testcase>
		<testcase name="Mutant #838" file="npc/util/copyCore.py" line="31">
			<system-out>    raise errors.FormatError(&quot;Unrecognized format for {}&quot;.format(file_path))</system-out>
		</testcase>
		<testcase name="Mutant #839" file="npc/util/copyCore.py" line="43">
			<system-out>    with open(filename, 'r') as f:</system-out>
		</testcase>
		<testcase name="Mutant #840" file="npc/util/copyCore.py" line="47">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #841" file="npc/util/copyCore.py" line="47">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #842" file="npc/util/copyCore.py" line="48">
			<system-out>            nicemsg = nicestr.format(filename, err.problem, err.problem_mark.line, err.problem_mark.column)</system-out>
		</testcase>
		<testcase name="Mutant #843" file="npc/util/copyCore.py" line="79">
			<system-out>            r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|&quot;(?:\\.|[^\\&quot;])*&quot;',</system-out>
		</testcase>
		<testcase name="Mutant #844" file="npc/util/copyCore.py" line="80">
			<system-out>            re.DOTALL | re.MULTILINE</system-out>
		</testcase>
		<testcase name="Mutant #845" file="npc/util/copyCore.py" line="81">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #846" file="npc/util/copyCore.py" line="83">
			<system-out>            s = match.group(0)</system-out>
		</testcase>
		<testcase name="Mutant #847" file="npc/util/copyCore.py" line="83">
			<system-out>            s = match.group(0)</system-out>
		</testcase>
		<testcase name="Mutant #848" file="npc/util/copyCore.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #849" file="npc/util/copyCore.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #850" file="npc/util/copyCore.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #851" file="npc/util/copyCore.py" line="84">
			<system-out>            if s[0] == '/': return &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #852" file="npc/util/copyCore.py" line="92">
			<system-out>        trailing_object_commas_re = re.compile(r'(,)\s*}(?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #853" file="npc/util/copyCore.py" line="92">
			<system-out>        trailing_object_commas_re = re.compile(r'(,)\s*}(?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #854" file="npc/util/copyCore.py" line="93">
			<system-out>        trailing_array_commas_re = re.compile(r'(,)\s*\](?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #855" file="npc/util/copyCore.py" line="93">
			<system-out>        trailing_array_commas_re = re.compile(r'(,)\s*\](?=([^&quot;\\]*(\\.|&quot;([^&quot;\\]*\\.)*[^&quot;\\]*&quot;))*[^&quot;]*$)')</system-out>
		</testcase>
		<testcase name="Mutant #856" file="npc/util/copyCore.py" line="95">
			<system-out>        objects_fixed = trailing_object_commas_re.sub(&quot;}&quot;, json_like)</system-out>
		</testcase>
		<testcase name="Mutant #857" file="npc/util/copyCore.py" line="95">
			<system-out>        objects_fixed = trailing_object_commas_re.sub(&quot;}&quot;, json_like)</system-out>
		</testcase>
		<testcase name="Mutant #858" file="npc/util/copyCore.py" line="97">
			<system-out>        return trailing_array_commas_re.sub(&quot;]&quot;, objects_fixed)</system-out>
		</testcase>
		<testcase name="Mutant #859" file="npc/util/copyCore.py" line="100">
			<system-out>        content = ''.join(json_file.readlines())</system-out>
		</testcase>
		<testcase name="Mutant #860" file="npc/util/copyCore.py" line="100">
			<system-out>        content = ''.join(json_file.readlines())</system-out>
		</testcase>
		<testcase name="Mutant #861" file="npc/util/copyCore.py" line="101">
			<system-out>        content = remove_comments(content) # Remove comments</system-out>
		</testcase>
		<testcase name="Mutant #862" file="npc/util/copyCore.py" line="102">
			<system-out>        content = remove_trailing_commas(content) # Remove trailing commas</system-out>
		</testcase>
		<testcase name="Mutant #863" file="npc/util/copyCore.py" line="108">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #864" file="npc/util/copyCore.py" line="108">
			<system-out>            nicestr = &quot;Bad syntax in '{0}' line {2} column {3}: {1}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #865" file="npc/util/copyCore.py" line="109">
			<system-out>            nicemsg = nicestr.format(filename, err.msg, err.lineno, err.colno)</system-out>
		</testcase>
		<testcase name="Mutant #866" file="npc/util/copyCore.py" line="112">
			<system-out>            err.strerror = &quot;Could not load '{0}': {1}&quot;.format(filename, err.strerror)</system-out>
		</testcase>
		<testcase name="Mutant #867" file="npc/util/copyCore.py" line="112">
			<system-out>            err.strerror = &quot;Could not load '{0}': {1}&quot;.format(filename, err.strerror)</system-out>
		</testcase>
		<testcase name="Mutant #868" file="npc/util/copyCore.py" line="140">
			<system-out>        if hasattr(item, '__iter__') and not isinstance(item, str):</system-out>
		</testcase>
		<testcase name="Mutant #869" file="npc/util/copyCore.py" line="140">
			<system-out>        if hasattr(item, '__iter__') and not isinstance(item, str):</system-out>
		</testcase>
		<testcase name="Mutant #870" file="npc/util/copyCore.py" line="140">
			<system-out>        if hasattr(item, '__iter__') and not isinstance(item, str):</system-out>
		</testcase>
		<testcase name="Mutant #871" file="npc/util/copyCore.py" line="157">
			<system-out>    if value is None:</system-out>
		</testcase>
		<testcase name="Mutant #872" file="npc/util/copyCore.py" line="158">
			<system-out>        target_dict[key]</system-out>
		</testcase>
		<testcase name="Mutant #873" file="npc/util/copyCore.py" line="159">
			<system-out>    elif hasattr(value, '__iter__') and not isinstance(value, str):</system-out>
		</testcase>
		<testcase name="Mutant #874" file="npc/util/copyCore.py" line="159">
			<system-out>    elif hasattr(value, '__iter__') and not isinstance(value, str):</system-out>
		</testcase>
		<testcase name="Mutant #875" file="npc/util/copyCore.py" line="159">
			<system-out>    elif hasattr(value, '__iter__') and not isinstance(value, str):</system-out>
		</testcase>
		<testcase name="Mutant #876" file="npc/util/copyCore.py" line="160">
			<system-out>        target_dict[key] += value</system-out>
		</testcase>
		<testcase name="Mutant #877" file="npc/util/copyCore.py" line="160">
			<system-out>        target_dict[key] += value</system-out>
		</testcase>
		<testcase name="Mutant #878" file="npc/util/copyCore.py" line="176">
			<system-out>    current_dir = Path.cwd()</system-out>
		</testcase>
		<testcase name="Mutant #879" file="npc/util/copyCore.py" line="177">
			<system-out>    base = current_dir.resolve()</system-out>
		</testcase>
		<testcase name="Mutant #880" file="npc/util/copyCore.py" line="178">
			<system-out>    old_base = Path('')</system-out>
		</testcase>
		<testcase name="Mutant #881" file="npc/util/copyCore.py" line="178">
			<system-out>    old_base = Path('')</system-out>
		</testcase>
		<testcase name="Mutant #882" file="npc/util/copyCore.py" line="179">
			<system-out>    while not base.joinpath('.npc').is_dir():</system-out>
		</testcase>
		<testcase name="Mutant #883" file="npc/util/copyCore.py" line="179">
			<system-out>    while not base.joinpath('.npc').is_dir():</system-out>
		</testcase>
		<testcase name="Mutant #884" file="npc/util/copyCore.py" line="180">
			<system-out>        old_base = base</system-out>
		</testcase>
		<testcase name="Mutant #885" file="npc/util/copyCore.py" line="181">
			<system-out>        base = base.parent.resolve()</system-out>
		</testcase>
		<testcase name="Mutant #886" file="npc/util/copyCore.py" line="197">
			<system-out>    editor = determine_editor(sys.platform, prefs=prefs)</system-out>
		</testcase>
		<testcase name="Mutant #887" file="npc/util/copyCore.py" line="200">
			<system-out>        path_to_open = Path(file_path)</system-out>
		</testcase>
		<testcase name="Mutant #888" file="npc/util/copyCore.py" line="217">
			<system-out>    if prefs.get('editor'):</system-out>
		</testcase>
		<testcase name="Mutant #889" file="npc/util/copyCore.py" line="218">
			<system-out>        return prefs.get('editor')</system-out>
		</testcase>
		<testcase name="Mutant #890" file="npc/util/copyCore.py" line="219">
			<system-out>    elif 'linux' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #891" file="npc/util/copyCore.py" line="219">
			<system-out>    elif 'linux' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #892" file="npc/util/copyCore.py" line="220">
			<system-out>        return 'xdg-open'</system-out>
		</testcase>
		<testcase name="Mutant #893" file="npc/util/copyCore.py" line="221">
			<system-out>    elif 'darwin' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #894" file="npc/util/copyCore.py" line="221">
			<system-out>    elif 'darwin' in platform:</system-out>
		</testcase>
		<testcase name="Mutant #895" file="npc/util/copyCore.py" line="222">
			<system-out>        return 'open'</system-out>
		</testcase>
		<testcase name="Mutant #896" file="npc/util/copyCore.py" line="224">
			<system-out>        return 'start'</system-out>
		</testcase>
		<testcase name="Mutant #897" file="npc/util/copyCore.py" line="230">
			<system-out>    _instances = {}</system-out>
		</testcase>
		<testcase name="Mutant #898" file="npc/util/copyCore.py" line="232">
			<system-out>        if cls not in cls._instances:</system-out>
		</testcase>
		<testcase name="Mutant #899" file="npc/util/copyCore.py" line="233">
			<system-out>            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #900" file="npc/util/copyCore.py" line="250">
			<system-out>    serial_args = [full_args.pop(k) for k in argnames]</system-out>
		</testcase>
		<testcase name="Mutant #901" file="npc/util/copyCore.py" line="270">
			<system-out>        if argname in full_args and full_args[argname] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #902" file="npc/util/copyCore.py" line="270">
			<system-out>        if argname in full_args and full_args[argname] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #903" file="npc/util/copyCore.py" line="270">
			<system-out>        if argname in full_args and full_args[argname] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #904" file="npc/util/copyCore.py" line="271">
			<system-out>            full_args[argname] = [s.strip() for s in full_args[argname].split(',') if s]</system-out>
		</testcase>
		<testcase name="Mutant #905" file="npc/util/copyCore.py" line="271">
			<system-out>            full_args[argname] = [s.strip() for s in full_args[argname].split(',') if s]</system-out>
		</testcase>
		<testcase name="Mutant #906" file="npc/util/result.py" line="33">
			<system-out>        self.success = success</system-out>
		</testcase>
		<testcase name="Mutant #907" file="npc/util/result.py" line="34">
			<system-out>        self.openable = kwargs.get('openable', [])</system-out>
		</testcase>
		<testcase name="Mutant #908" file="npc/util/result.py" line="34">
			<system-out>        self.openable = kwargs.get('openable', [])</system-out>
		</testcase>
		<testcase name="Mutant #909" file="npc/util/result.py" line="35">
			<system-out>        self.errcode = kwargs.get('errcode', 0)</system-out>
		</testcase>
		<testcase name="Mutant #910" file="npc/util/result.py" line="35">
			<system-out>        self.errcode = kwargs.get('errcode', 0)</system-out>
		</testcase>
		<testcase name="Mutant #911" file="npc/util/result.py" line="35">
			<system-out>        self.errcode = kwargs.get('errcode', 0)</system-out>
		</testcase>
		<testcase name="Mutant #912" file="npc/util/result.py" line="36">
			<system-out>        self.errmsg = kwargs.get('errmsg', '')</system-out>
		</testcase>
		<testcase name="Mutant #913" file="npc/util/result.py" line="36">
			<system-out>        self.errmsg = kwargs.get('errmsg', '')</system-out>
		</testcase>
		<testcase name="Mutant #914" file="npc/util/result.py" line="36">
			<system-out>        self.errmsg = kwargs.get('errmsg', '')</system-out>
		</testcase>
		<testcase name="Mutant #915" file="npc/util/result.py" line="37">
			<system-out>        self.printables = kwargs.get('printables', [])</system-out>
		</testcase>
		<testcase name="Mutant #916" file="npc/util/result.py" line="37">
			<system-out>        self.printables = kwargs.get('printables', [])</system-out>
		</testcase>
		<testcase name="Mutant #917" file="npc/util/result.py" line="41">
			<system-out>            return &quot;Success&quot;</system-out>
		</testcase>
		<testcase name="Mutant #918" file="npc/util/result.py" line="50">
			<system-out>        super().__init__(True, errcode=0, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #919" file="npc/util/result.py" line="50">
			<system-out>        super().__init__(True, errcode=0, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #920" file="npc/util/result.py" line="53">
			<system-out>        return &quot;Success&quot;</system-out>
		</testcase>
		<testcase name="Mutant #921" file="npc/util/result.py" line="56">
			<system-out>        return True</system-out>
		</testcase>
		<testcase name="Mutant #922" file="npc/util/result.py" line="65">
			<system-out>        super().__init__(False, errcode=1, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #923" file="npc/util/result.py" line="65">
			<system-out>        super().__init__(False, errcode=1, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #924" file="npc/util/result.py" line="71">
			<system-out>        return False</system-out>
		</testcase>
		<testcase name="Mutant #925" file="npc/formatters/sectioners.py" line="27">
			<system-out>    if key == 'last':</system-out>
		</testcase>
		<testcase name="Mutant #926" file="npc/formatters/sectioners.py" line="27">
			<system-out>    if key == 'last':</system-out>
		</testcase>
		<testcase name="Mutant #927" file="npc/formatters/sectioners.py" line="56">
			<system-out>        self.current_text = None</system-out>
		</testcase>
		<testcase name="Mutant #928" file="npc/formatters/sectioners.py" line="57">
			<system-out>        self.heading_level = heading_level</system-out>
		</testcase>
		<testcase name="Mutant #929" file="npc/formatters/sectioners.py" line="58">
			<system-out>        self.prefs = prefs</system-out>
		</testcase>
		<testcase name="Mutant #930" file="npc/formatters/sectioners.py" line="60">
			<system-out>        self.tempdir = tempfile.TemporaryDirectory()</system-out>
		</testcase>
		<testcase name="Mutant #931" file="npc/formatters/sectioners.py" line="61">
			<system-out>        self.templates_cache = {} # cache for template objects by format</system-out>
		</testcase>
		<testcase name="Mutant #932" file="npc/formatters/sectioners.py" line="71">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #933" file="npc/formatters/sectioners.py" line="81">
			<system-out>        return 'simple'</system-out>
		</testcase>
		<testcase name="Mutant #934" file="npc/formatters/sectioners.py" line="111">
			<system-out>        return self.text_for(character) != self.current_text</system-out>
		</testcase>
		<testcase name="Mutant #935" file="npc/formatters/sectioners.py" line="125">
			<system-out>        self.current_text = self.text_for(character)</system-out>
		</testcase>
		<testcase name="Mutant #936" file="npc/formatters/sectioners.py" line="159">
			<system-out>        if output_format in self.templates_cache:</system-out>
		</testcase>
		<testcase name="Mutant #937" file="npc/formatters/sectioners.py" line="164">
			<system-out>                &quot;listing.templates.{output_format}.sections.{template_key}&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #938" file="npc/formatters/sectioners.py" line="166">
			<system-out>                    template_key=self.template_key)))</system-out>
		</testcase>
		<testcase name="Mutant #939" file="npc/formatters/sectioners.py" line="167">
			<system-out>        self.templates_cache[output_format] = Template(filename=template_path, module_directory=self.tempdir.name, **encoding_options)</system-out>
		</testcase>
		<testcase name="Mutant #940" file="npc/formatters/sectioners.py" line="180">
			<system-out>        self.tag_name = tag</system-out>
		</testcase>
		<testcase name="Mutant #941" file="npc/formatters/sectioners.py" line="181">
			<system-out>        self.prefs = prefs</system-out>
		</testcase>
		<testcase name="Mutant #942" file="npc/formatters/sectioners.py" line="194">
			<system-out>        tag = self.prefs.translate_tag_for_character_type(character.type_key, self.tag_name)</system-out>
		</testcase>
		<testcase name="Mutant #943" file="npc/formatters/sectioners.py" line="210">
			<system-out>        full_name = character.tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #944" file="npc/formatters/sectioners.py" line="210">
			<system-out>        full_name = character.tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #945" file="npc/formatters/sectioners.py" line="212">
			<system-out>            return None if full_name is None else full_name.split(' ')[-1][0]</system-out>
		</testcase>
		<testcase name="Mutant #946" file="npc/formatters/sectioners.py" line="212">
			<system-out>            return None if full_name is None else full_name.split(' ')[-1][0]</system-out>
		</testcase>
		<testcase name="Mutant #947" file="npc/formatters/sectioners.py" line="212">
			<system-out>            return None if full_name is None else full_name.split(' ')[-1][0]</system-out>
		</testcase>
		<testcase name="Mutant #948" file="npc/formatters/sectioners.py" line="212">
			<system-out>            return None if full_name is None else full_name.split(' ')[-1][0]</system-out>
		</testcase>
		<testcase name="Mutant #949" file="npc/formatters/sectioners.py" line="212">
			<system-out>            return None if full_name is None else full_name.split(' ')[-1][0]</system-out>
		</testcase>
		<testcase name="Mutant #950" file="npc/formatters/json.py" line="11">
			<system-out>def listing(characters, outstream, *, metadata_format=False, metadata=None, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #951" file="npc/formatters/json.py" line="30">
			<system-out>    if not metadata:</system-out>
		</testcase>
		<testcase name="Mutant #952" file="npc/formatters/json.py" line="31">
			<system-out>        metadata = {}</system-out>
		</testcase>
		<testcase name="Mutant #953" file="npc/formatters/json.py" line="33">
			<system-out>    characters = [c.tags for c in characters]</system-out>
		</testcase>
		<testcase name="Mutant #954" file="npc/formatters/json.py" line="36">
			<system-out>        meta = {'meta': True, **metadata}</system-out>
		</testcase>
		<testcase name="Mutant #955" file="npc/formatters/json.py" line="36">
			<system-out>        meta = {'meta': True, **metadata}</system-out>
		</testcase>
		<testcase name="Mutant #956" file="npc/formatters/json.py" line="36">
			<system-out>        meta = {'meta': True, **metadata}</system-out>
		</testcase>
		<testcase name="Mutant #957" file="npc/formatters/json.py" line="36">
			<system-out>        meta = {'meta': True, **metadata}</system-out>
		</testcase>
		<testcase name="Mutant #958" file="npc/formatters/json.py" line="37">
			<system-out>        characters = [meta] + characters</system-out>
		</testcase>
		<testcase name="Mutant #959" file="npc/formatters/json.py" line="37">
			<system-out>        characters = [meta] + characters</system-out>
		</testcase>
		<testcase name="Mutant #960" file="npc/formatters/core.py" line="50">
			<system-out>        self.metadata = kwargs.get('metadata', {})</system-out>
		</testcase>
		<testcase name="Mutant #961" file="npc/formatters/core.py" line="50">
			<system-out>        self.metadata = kwargs.get('metadata', {})</system-out>
		</testcase>
		<testcase name="Mutant #962" file="npc/formatters/core.py" line="51">
			<system-out>        self.metadata_format = kwargs.get('metadata_format')</system-out>
		</testcase>
		<testcase name="Mutant #963" file="npc/formatters/core.py" line="51">
			<system-out>        self.metadata_format = kwargs.get('metadata_format')</system-out>
		</testcase>
		<testcase name="Mutant #964" file="npc/formatters/core.py" line="52">
			<system-out>        self.sectioners = kwargs.get('sectioners', [])</system-out>
		</testcase>
		<testcase name="Mutant #965" file="npc/formatters/core.py" line="52">
			<system-out>        self.sectioners = kwargs.get('sectioners', [])</system-out>
		</testcase>
		<testcase name="Mutant #966" file="npc/formatters/core.py" line="53">
			<system-out>        self.partial = kwargs.get('partial', False)</system-out>
		</testcase>
		<testcase name="Mutant #967" file="npc/formatters/core.py" line="53">
			<system-out>        self.partial = kwargs.get('partial', False)</system-out>
		</testcase>
		<testcase name="Mutant #968" file="npc/formatters/core.py" line="53">
			<system-out>        self.partial = kwargs.get('partial', False)</system-out>
		</testcase>
		<testcase name="Mutant #969" file="npc/formatters/core.py" line="54">
			<system-out>        self.update_progress = kwargs.get('update_progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #970" file="npc/formatters/core.py" line="54">
			<system-out>        self.update_progress = kwargs.get('update_progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #971" file="npc/formatters/core.py" line="54">
			<system-out>        self.update_progress = kwargs.get('update_progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #972" file="npc/formatters/core.py" line="54">
			<system-out>        self.update_progress = kwargs.get('update_progress', lambda i, t: False)</system-out>
		</testcase>
		<testcase name="Mutant #973" file="npc/formatters/core.py" line="55">
			<system-out>        self.prefs = kwargs.get('prefs')</system-out>
		</testcase>
		<testcase name="Mutant #974" file="npc/formatters/core.py" line="55">
			<system-out>        self.prefs = kwargs.get('prefs')</system-out>
		</testcase>
		<testcase name="Mutant #975" file="npc/formatters/core.py" line="57">
			<system-out>        self.encoding_options = {}</system-out>
		</testcase>
		<testcase name="Mutant #976" file="npc/formatters/core.py" line="59">
			<system-out>            &quot;metadata&quot;: self.metadata</system-out>
		</testcase>
		<testcase name="Mutant #977" file="npc/formatters/core.py" line="60">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #978" file="npc/formatters/core.py" line="63">
			<system-out>            self.character_header_level = max(s.heading_level for s in self.sectioners) + 1</system-out>
		</testcase>
		<testcase name="Mutant #979" file="npc/formatters/core.py" line="63">
			<system-out>            self.character_header_level = max(s.heading_level for s in self.sectioners) + 1</system-out>
		</testcase>
		<testcase name="Mutant #980" file="npc/formatters/core.py" line="63">
			<system-out>            self.character_header_level = max(s.heading_level for s in self.sectioners) + 1</system-out>
		</testcase>
		<testcase name="Mutant #981" file="npc/formatters/core.py" line="65">
			<system-out>            self.character_header_level = 1</system-out>
		</testcase>
		<testcase name="Mutant #982" file="npc/formatters/core.py" line="65">
			<system-out>            self.character_header_level = 1</system-out>
		</testcase>
		<testcase name="Mutant #983" file="npc/formatters/core.py" line="67">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #984" file="npc/formatters/core.py" line="92">
			<system-out>        @lru_cache(maxsize=32)</system-out>
		</testcase>
		<testcase name="Mutant #985" file="npc/formatters/core.py" line="92">
			<system-out>        @lru_cache(maxsize=32)</system-out>
		</testcase>
		<testcase name="Mutant #986" file="npc/formatters/core.py" line="99">
			<system-out>        header_result = self.render_header(outstream)</system-out>
		</testcase>
		<testcase name="Mutant #987" file="npc/formatters/core.py" line="100">
			<system-out>        if not header_result:</system-out>
		</testcase>
		<testcase name="Mutant #988" file="npc/formatters/core.py" line="105">
			<system-out>            _out_write = outstream.write</system-out>
		</testcase>
		<testcase name="Mutant #989" file="npc/formatters/core.py" line="107">
			<system-out>            total = len(characters)</system-out>
		</testcase>
		<testcase name="Mutant #990" file="npc/formatters/core.py" line="108">
			<system-out>            self.update_progress(0, total)</system-out>
		</testcase>
		<testcase name="Mutant #991" file="npc/formatters/core.py" line="114">
			<system-out>                body_file = _prefs_cache(&quot;listing.templates.{list_format}.character.{type}&quot;.format(list_format=self.list_format, type=char.type_key))</system-out>
		</testcase>
		<testcase name="Mutant #992" file="npc/formatters/core.py" line="114">
			<system-out>                body_file = _prefs_cache(&quot;listing.templates.{list_format}.character.{type}&quot;.format(list_format=self.list_format, type=char.type_key))</system-out>
		</testcase>
		<testcase name="Mutant #993" file="npc/formatters/core.py" line="115">
			<system-out>                if not body_file:</system-out>
		</testcase>
		<testcase name="Mutant #994" file="npc/formatters/core.py" line="116">
			<system-out>                    body_file = _prefs_cache(&quot;listing.templates.{list_format}.character.default&quot;.format(list_format=self.list_format))</system-out>
		</testcase>
		<testcase name="Mutant #995" file="npc/formatters/core.py" line="116">
			<system-out>                    body_file = _prefs_cache(&quot;listing.templates.{list_format}.character.default&quot;.format(list_format=self.list_format))</system-out>
		</testcase>
		<testcase name="Mutant #996" file="npc/formatters/core.py" line="117">
			<system-out>                if not body_file:</system-out>
		</testcase>
		<testcase name="Mutant #997" file="npc/formatters/core.py" line="118">
			<system-out>                    return result.ConfigError(errmsg=&quot;Cannot find default character template for {list_format} listing&quot;.format(list_format=self.list_format))</system-out>
		</testcase>
		<testcase name="Mutant #998" file="npc/formatters/core.py" line="120">
			<system-out>                body_template = Template(filename=str(body_file), module_directory=tempdir, **self.encoding_options)</system-out>
		</testcase>
		<testcase name="Mutant #999" file="npc/formatters/core.py" line="122">
			<system-out>                self.update_progress(index + 1, total)</system-out>
		</testcase>
		<testcase name="Mutant #1000" file="npc/formatters/core.py" line="122">
			<system-out>                self.update_progress(index + 1, total)</system-out>
		</testcase>
		<testcase name="Mutant #1001" file="npc/formatters/core.py" line="140">
			<system-out>        if self.partial or not self.metadata_format:</system-out>
		</testcase>
		<testcase name="Mutant #1002" file="npc/formatters/core.py" line="140">
			<system-out>        if self.partial or not self.metadata_format:</system-out>
		</testcase>
		<testcase name="Mutant #1003" file="npc/formatters/core.py" line="145">
			<system-out>            &quot;listing.templates.{list_format}.header.{metadata_format}&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #1004" file="npc/formatters/core.py" line="147">
			<system-out>                metadata_format=self.metadata_format))</system-out>
		</testcase>
		<testcase name="Mutant #1005" file="npc/formatters/core.py" line="148">
			<system-out>        if not header_file:</system-out>
		</testcase>
		<testcase name="Mutant #1006" file="npc/formatters/core.py" line="149">
			<system-out>            return result.OptionError(errmsg=&quot;Unrecognized metadata format '{}'&quot;.format(self.metadata_format))</system-out>
		</testcase>
		<testcase name="Mutant #1007" file="npc/formatters/core.py" line="151">
			<system-out>        header_template = Template(filename=str(header_file), **self.encoding_options)</system-out>
		</testcase>
		<testcase name="Mutant #1008" file="npc/formatters/core.py" line="173">
			<system-out>                &quot;listing.templates.{list_format}.footer&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #1009" file="npc/formatters/core.py" line="175">
			<system-out>            **self.encoding_options)</system-out>
		</testcase>
		<testcase name="Mutant #1010" file="npc/formatters/core.py" line="192">
			<system-out>            &quot;tags&quot;: character.tags.present(),</system-out>
		</testcase>
		<testcase name="Mutant #1011" file="npc/formatters/core.py" line="193">
			<system-out>            &quot;header_level&quot;: self.character_header_level</system-out>
		</testcase>
		<testcase name="Mutant #1012" file="npc/formatters/core.py" line="230">
			<system-out>        if self.metadata_format == &quot;yaml&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1013" file="npc/formatters/core.py" line="230">
			<system-out>        if self.metadata_format == &quot;yaml&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1014" file="npc/formatters/core.py" line="231">
			<system-out>            self.metadata_format = &quot;yfm&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1015" file="npc/formatters/core.py" line="231">
			<system-out>            self.metadata_format = &quot;yfm&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1016" file="npc/formatters/core.py" line="232">
			<system-out>        elif self.metadata_format == &quot;multimarkdown&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1017" file="npc/formatters/core.py" line="232">
			<system-out>        elif self.metadata_format == &quot;multimarkdown&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1018" file="npc/formatters/core.py" line="233">
			<system-out>            self.metadata_format = 'mmd'</system-out>
		</testcase>
		<testcase name="Mutant #1019" file="npc/formatters/core.py" line="233">
			<system-out>            self.metadata_format = 'mmd'</system-out>
		</testcase>
		<testcase name="Mutant #1020" file="npc/formatters/core.py" line="235">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1021" file="npc/formatters/core.py" line="237">
			<system-out>        return 'markdown'</system-out>
		</testcase>
		<testcase name="Mutant #1022" file="npc/formatters/core.py" line="271">
			<system-out>        self.encoding = kwargs.get('encoding', self.prefs.get('listing.html_encoding'))</system-out>
		</testcase>
		<testcase name="Mutant #1023" file="npc/formatters/core.py" line="271">
			<system-out>        self.encoding = kwargs.get('encoding', self.prefs.get('listing.html_encoding'))</system-out>
		</testcase>
		<testcase name="Mutant #1024" file="npc/formatters/core.py" line="271">
			<system-out>        self.encoding = kwargs.get('encoding', self.prefs.get('listing.html_encoding'))</system-out>
		</testcase>
		<testcase name="Mutant #1025" file="npc/formatters/core.py" line="273">
			<system-out>            'output_encoding': self.encoding,</system-out>
		</testcase>
		<testcase name="Mutant #1026" file="npc/formatters/core.py" line="274">
			<system-out>            'encoding_errors': 'xmlcharrefreplace'</system-out>
		</testcase>
		<testcase name="Mutant #1027" file="npc/formatters/core.py" line="274">
			<system-out>            'encoding_errors': 'xmlcharrefreplace'</system-out>
		</testcase>
		<testcase name="Mutant #1028" file="npc/formatters/core.py" line="275">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #1029" file="npc/formatters/core.py" line="277">
			<system-out>            &quot;encoding&quot;: self.encoding,</system-out>
		</testcase>
		<testcase name="Mutant #1030" file="npc/formatters/core.py" line="278">
			<system-out>            'encoding_errors': 'xmlcharrefreplace',</system-out>
		</testcase>
		<testcase name="Mutant #1031" file="npc/formatters/core.py" line="278">
			<system-out>            'encoding_errors': 'xmlcharrefreplace',</system-out>
		</testcase>
		<testcase name="Mutant #1032" file="npc/formatters/core.py" line="279">
			<system-out>            &quot;metadata&quot;: self.metadata</system-out>
		</testcase>
		<testcase name="Mutant #1033" file="npc/formatters/core.py" line="280">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #1034" file="npc/formatters/core.py" line="282">
			<system-out>        self.metadata_format = kwargs.get('metadata_format', 'plain')</system-out>
		</testcase>
		<testcase name="Mutant #1035" file="npc/formatters/core.py" line="282">
			<system-out>        self.metadata_format = kwargs.get('metadata_format', 'plain')</system-out>
		</testcase>
		<testcase name="Mutant #1036" file="npc/formatters/core.py" line="282">
			<system-out>        self.metadata_format = kwargs.get('metadata_format', 'plain')</system-out>
		</testcase>
		<testcase name="Mutant #1037" file="npc/formatters/core.py" line="284">
			<system-out>        self.md_converter = Markdown(extensions=['markdown.extensions.smarty'])</system-out>
		</testcase>
		<testcase name="Mutant #1038" file="npc/formatters/core.py" line="284">
			<system-out>        self.md_converter = Markdown(extensions=['markdown.extensions.smarty'])</system-out>
		</testcase>
		<testcase name="Mutant #1039" file="npc/formatters/core.py" line="285">
			<system-out>        self._clean_conv = self.md_converter.reset</system-out>
		</testcase>
		<testcase name="Mutant #1040" file="npc/formatters/core.py" line="287">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1041" file="npc/formatters/core.py" line="289">
			<system-out>        return 'html'</system-out>
		</testcase>
		<testcase name="Mutant #1042" file="npc/formatters/core.py" line="304">
			<system-out>            &quot;tags&quot;: character.tags.present(),</system-out>
		</testcase>
		<testcase name="Mutant #1043" file="npc/formatters/core.py" line="305">
			<system-out>            &quot;header_level&quot;: self.character_header_level,</system-out>
		</testcase>
		<testcase name="Mutant #1044" file="npc/formatters/core.py" line="306">
			<system-out>            &quot;mdconv&quot;: self._clean_conv().convert</system-out>
		</testcase>
		<testcase name="Mutant #1045" file="npc/formatters/markdown.py" line="11">
			<system-out>SUPPORTED_METADATA_TYPES = ['yaml', 'yfm', 'multimarkdown', 'mmd']</system-out>
		</testcase>
		<testcase name="Mutant #1046" file="npc/formatters/markdown.py" line="11">
			<system-out>SUPPORTED_METADATA_TYPES = ['yaml', 'yfm', 'multimarkdown', 'mmd']</system-out>
		</testcase>
		<testcase name="Mutant #1047" file="npc/formatters/markdown.py" line="11">
			<system-out>SUPPORTED_METADATA_TYPES = ['yaml', 'yfm', 'multimarkdown', 'mmd']</system-out>
		</testcase>
		<testcase name="Mutant #1048" file="npc/formatters/markdown.py" line="11">
			<system-out>SUPPORTED_METADATA_TYPES = ['yaml', 'yfm', 'multimarkdown', 'mmd']</system-out>
		</testcase>
		<testcase name="Mutant #1049" file="npc/formatters/markdown.py" line="11">
			<system-out>SUPPORTED_METADATA_TYPES = ['yaml', 'yfm', 'multimarkdown', 'mmd']</system-out>
		</testcase>
		<testcase name="Mutant #1050" file="npc/formatters/markdown.py" line="14">
			<system-out>def listing(characters, outstream, *, metadata=None, partial=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #1051" file="npc/formatters/markdown.py" line="42">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1052" file="npc/formatters/markdown.py" line="42">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1053" file="npc/formatters/markdown.py" line="43">
			<system-out>    if metadata is None:</system-out>
		</testcase>
		<testcase name="Mutant #1054" file="npc/formatters/markdown.py" line="44">
			<system-out>        metadata = {}</system-out>
		</testcase>
		<testcase name="Mutant #1055" file="npc/formatters/markdown.py" line="48">
			<system-out>        sectioners=kwargs.get('sectioners', []),</system-out>
		</testcase>
		<testcase name="Mutant #1056" file="npc/formatters/markdown.py" line="49">
			<system-out>        update_progress=kwargs.get('update_progress', lambda i, t: False),</system-out>
		</testcase>
		<testcase name="Mutant #1057" file="npc/formatters/markdown.py" line="49">
			<system-out>        update_progress=kwargs.get('update_progress', lambda i, t: False),</system-out>
		</testcase>
		<testcase name="Mutant #1058" file="npc/formatters/markdown.py" line="49">
			<system-out>        update_progress=kwargs.get('update_progress', lambda i, t: False),</system-out>
		</testcase>
		<testcase name="Mutant #1059" file="npc/formatters/markdown.py" line="51">
			<system-out>        metadata_format=kwargs.get('metadata_format'),</system-out>
		</testcase>
		<testcase name="Mutant #1060" file="npc/formatters/markdown.py" line="53">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #1061" file="npc/formatters/markdown.py" line="72">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1062" file="npc/formatters/markdown.py" line="72">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1063" file="npc/formatters/markdown.py" line="75">
			<system-out>        table_template = Template(filename=str(prefs.get(&quot;report.templates.markdown&quot;)), module_directory=tempdir)</system-out>
		</testcase>
		<testcase name="Mutant #1064" file="npc/formatters/markdown.py" line="75">
			<system-out>        table_template = Template(filename=str(prefs.get(&quot;report.templates.markdown&quot;)), module_directory=tempdir)</system-out>
		</testcase>
		<testcase name="Mutant #1065" file="npc/formatters/html.py" line="11">
			<system-out>SUPPORTED_METADATA_TYPES = ['meta']</system-out>
		</testcase>
		<testcase name="Mutant #1066" file="npc/formatters/html.py" line="11">
			<system-out>SUPPORTED_METADATA_TYPES = ['meta']</system-out>
		</testcase>
		<testcase name="Mutant #1067" file="npc/formatters/html.py" line="14">
			<system-out>def listing(characters, outstream, *, metadata=None, partial=False, **kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #1068" file="npc/formatters/html.py" line="45">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1069" file="npc/formatters/html.py" line="45">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1070" file="npc/formatters/html.py" line="46">
			<system-out>    if metadata is None:</system-out>
		</testcase>
		<testcase name="Mutant #1071" file="npc/formatters/html.py" line="47">
			<system-out>        metadata = {}</system-out>
		</testcase>
		<testcase name="Mutant #1072" file="npc/formatters/html.py" line="51">
			<system-out>        sectioners=kwargs.get('sectioners', []),</system-out>
		</testcase>
		<testcase name="Mutant #1073" file="npc/formatters/html.py" line="52">
			<system-out>        update_progress=kwargs.get('update_progress', lambda i, t: False),</system-out>
		</testcase>
		<testcase name="Mutant #1074" file="npc/formatters/html.py" line="52">
			<system-out>        update_progress=kwargs.get('update_progress', lambda i, t: False),</system-out>
		</testcase>
		<testcase name="Mutant #1075" file="npc/formatters/html.py" line="52">
			<system-out>        update_progress=kwargs.get('update_progress', lambda i, t: False),</system-out>
		</testcase>
		<testcase name="Mutant #1076" file="npc/formatters/html.py" line="54">
			<system-out>        metadata_format=kwargs.get('metadata_format'),</system-out>
		</testcase>
		<testcase name="Mutant #1077" file="npc/formatters/html.py" line="55">
			<system-out>        encoding=kwargs.get('encoding', prefs.get('listing.html_encoding')),</system-out>
		</testcase>
		<testcase name="Mutant #1078" file="npc/formatters/html.py" line="55">
			<system-out>        encoding=kwargs.get('encoding', prefs.get('listing.html_encoding')),</system-out>
		</testcase>
		<testcase name="Mutant #1079" file="npc/formatters/html.py" line="57">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #1080" file="npc/formatters/html.py" line="78">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1081" file="npc/formatters/html.py" line="78">
			<system-out>    prefs = kwargs.get('prefs', settings.InternalSettings())</system-out>
		</testcase>
		<testcase name="Mutant #1082" file="npc/formatters/html.py" line="79">
			<system-out>    encoding = kwargs.get('encoding', prefs.get('report.html_encoding'))</system-out>
		</testcase>
		<testcase name="Mutant #1083" file="npc/formatters/html.py" line="79">
			<system-out>    encoding = kwargs.get('encoding', prefs.get('report.html_encoding'))</system-out>
		</testcase>
		<testcase name="Mutant #1084" file="npc/formatters/html.py" line="79">
			<system-out>    encoding = kwargs.get('encoding', prefs.get('report.html_encoding'))</system-out>
		</testcase>
		<testcase name="Mutant #1085" file="npc/formatters/html.py" line="82">
			<system-out>        'output_encoding': encoding,</system-out>
		</testcase>
		<testcase name="Mutant #1086" file="npc/formatters/html.py" line="83">
			<system-out>        'encoding_errors': 'xmlcharrefreplace'</system-out>
		</testcase>
		<testcase name="Mutant #1087" file="npc/formatters/html.py" line="83">
			<system-out>        'encoding_errors': 'xmlcharrefreplace'</system-out>
		</testcase>
		<testcase name="Mutant #1088" file="npc/formatters/html.py" line="84">
			<system-out>    }</system-out>
		</testcase>
		<testcase name="Mutant #1089" file="npc/formatters/html.py" line="88">
			<system-out>            filename=str(prefs.get(&quot;report.templates.html&quot;)),</system-out>
		</testcase>
		<testcase name="Mutant #1090" file="npc/formatters/html.py" line="90">
			<system-out>            **encoding_options)</system-out>
		</testcase>
		<testcase name="Mutant #1091" file="npc/formatters/helpers.py" line="9">
			<system-out>BINARY_TYPES = ['html']</system-out>
		</testcase>
		<testcase name="Mutant #1092" file="npc/formatters/helpers.py" line="9">
			<system-out>BINARY_TYPES = ['html']</system-out>
		</testcase>
		<testcase name="Mutant #1093" file="npc/formatters/helpers.py" line="13">
			<system-out>    &quot;md&quot;: &quot;markdown&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1094" file="npc/formatters/helpers.py" line="13">
			<system-out>    &quot;md&quot;: &quot;markdown&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1095" file="npc/formatters/helpers.py" line="14">
			<system-out>    &quot;markdown&quot;: &quot;markdown&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1096" file="npc/formatters/helpers.py" line="14">
			<system-out>    &quot;markdown&quot;: &quot;markdown&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1097" file="npc/formatters/helpers.py" line="15">
			<system-out>    &quot;htm&quot;: &quot;html&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1098" file="npc/formatters/helpers.py" line="15">
			<system-out>    &quot;htm&quot;: &quot;html&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1099" file="npc/formatters/helpers.py" line="16">
			<system-out>    &quot;html&quot;: &quot;html&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1100" file="npc/formatters/helpers.py" line="16">
			<system-out>    &quot;html&quot;: &quot;html&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1101" file="npc/formatters/helpers.py" line="17">
			<system-out>    &quot;json&quot;: &quot;json&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1102" file="npc/formatters/helpers.py" line="17">
			<system-out>    &quot;json&quot;: &quot;json&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1103" file="npc/formatters/helpers.py" line="18">
			<system-out>}</system-out>
		</testcase>
		<testcase name="Mutant #1104" file="npc/formatters/helpers.py" line="35">
			<system-out>    format_name = get_canonical_format_name(format_name)</system-out>
		</testcase>
		<testcase name="Mutant #1105" file="npc/formatters/helpers.py" line="36">
			<system-out>    if format_name == 'markdown':</system-out>
		</testcase>
		<testcase name="Mutant #1106" file="npc/formatters/helpers.py" line="36">
			<system-out>    if format_name == 'markdown':</system-out>
		</testcase>
		<testcase name="Mutant #1107" file="npc/formatters/helpers.py" line="38">
			<system-out>    if format_name == 'html':</system-out>
		</testcase>
		<testcase name="Mutant #1108" file="npc/formatters/helpers.py" line="38">
			<system-out>    if format_name == 'html':</system-out>
		</testcase>
		<testcase name="Mutant #1109" file="npc/formatters/helpers.py" line="40">
			<system-out>    if format_name == 'json':</system-out>
		</testcase>
		<testcase name="Mutant #1110" file="npc/formatters/helpers.py" line="40">
			<system-out>    if format_name == 'json':</system-out>
		</testcase>
		<testcase name="Mutant #1111" file="npc/formatters/helpers.py" line="56">
			<system-out>    format_name = get_canonical_format_name(format_name)</system-out>
		</testcase>
		<testcase name="Mutant #1112" file="npc/formatters/helpers.py" line="57">
			<system-out>    if format_name == 'markdown':</system-out>
		</testcase>
		<testcase name="Mutant #1113" file="npc/formatters/helpers.py" line="57">
			<system-out>    if format_name == 'markdown':</system-out>
		</testcase>
		<testcase name="Mutant #1114" file="npc/formatters/helpers.py" line="59">
			<system-out>    if format_name == 'html':</system-out>
		</testcase>
		<testcase name="Mutant #1115" file="npc/formatters/helpers.py" line="59">
			<system-out>    if format_name == 'html':</system-out>
		</testcase>
		<testcase name="Mutant #1116" file="npc/formatters/helpers.py" line="61">
			<system-out>    if format_name == 'json':</system-out>
		</testcase>
		<testcase name="Mutant #1117" file="npc/formatters/helpers.py" line="61">
			<system-out>    if format_name == 'json':</system-out>
		</testcase>
		<testcase name="Mutant #1118" file="npc/gui/init_dialog.py" line="21">
			<system-out>        self.prefs = prefs</system-out>
		</testcase>
		<testcase name="Mutant #1119" file="npc/gui/init_dialog.py" line="23">
			<system-out>            &quot;create_types&quot;: False,</system-out>
		</testcase>
		<testcase name="Mutant #1120" file="npc/gui/init_dialog.py" line="23">
			<system-out>            &quot;create_types&quot;: False,</system-out>
		</testcase>
		<testcase name="Mutant #1121" file="npc/gui/init_dialog.py" line="24">
			<system-out>            &quot;campaign_name&quot;: &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1122" file="npc/gui/init_dialog.py" line="24">
			<system-out>            &quot;campaign_name&quot;: &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1123" file="npc/gui/init_dialog.py" line="25">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #1124" file="npc/gui/init_dialog.py" line="30">
			<system-out>        self.checkBoxCreateTypes.toggled.connect(lambda val: self.set_value('create_types', val))</system-out>
		</testcase>
		<testcase name="Mutant #1125" file="npc/gui/init_dialog.py" line="30">
			<system-out>        self.checkBoxCreateTypes.toggled.connect(lambda val: self.set_value('create_types', val))</system-out>
		</testcase>
		<testcase name="Mutant #1126" file="npc/gui/init_dialog.py" line="31">
			<system-out>        self.initCampaignTitle.textChanged.connect(lambda text: self.set_value('campaign_name', text))</system-out>
		</testcase>
		<testcase name="Mutant #1127" file="npc/gui/init_dialog.py" line="31">
			<system-out>        self.initCampaignTitle.textChanged.connect(lambda text: self.set_value('campaign_name', text))</system-out>
		</testcase>
		<testcase name="Mutant #1128" file="npc/gui/init_dialog.py" line="34">
			<system-out>        self.values[key] = value</system-out>
		</testcase>
		<testcase name="Mutant #1129" file="npc/gui/init_dialog.py" line="39">
			<system-out>            result = command(dryrun=True, prefs=self.prefs, **self.values)</system-out>
		</testcase>
		<testcase name="Mutant #1130" file="npc/gui/init_dialog.py" line="39">
			<system-out>            result = command(dryrun=True, prefs=self.prefs, **self.values)</system-out>
		</testcase>
		<testcase name="Mutant #1131" file="npc/gui/init_dialog.py" line="40">
			<system-out>            self.initFoldersToCreate.setText(&quot;\n&quot;.join(sorted(result.changes)))</system-out>
		</testcase>
		<testcase name="Mutant #1132" file="npc/gui/init_dialog.py" line="44">
			<system-out>        self.checkBoxCreateTypes.setChecked(False)</system-out>
		</testcase>
		<testcase name="Mutant #1133" file="npc/gui/init_dialog.py" line="45">
			<system-out>        self.initCampaignTitle.setText(&quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1134" file="npc/gui/init_dialog.py" line="47">
			<system-out>    def set_campaign_name(self, new_name, enabled=True):</system-out>
		</testcase>
		<testcase name="Mutant #1135" file="npc/gui/init_dialog.py" line="66">
			<system-out>        result = self.exec_()</system-out>
		</testcase>
		<testcase name="Mutant #1136" file="npc/gui/init_dialog.py" line="67">
			<system-out>        return result == self.Accepted</system-out>
		</testcase>
		<testcase name="Mutant #1137" file="npc/gui/commands.py" line="18">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'ctype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1138" file="npc/gui/commands.py" line="18">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'ctype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1139" file="npc/gui/commands.py" line="18">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'ctype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1140" file="npc/gui/commands.py" line="22">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1141" file="npc/gui/commands.py" line="22">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1142" file="npc/gui/commands.py" line="22">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1143" file="npc/gui/commands.py" line="22">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1144" file="npc/gui/util.py" line="5">
			<system-out>@contextmanager</system-out>
		</testcase>
		<testcase name="Mutant #1145" file="npc/gui/main_window.py" line="24">
			<system-out>        self.prefs = prefs</system-out>
		</testcase>
		<testcase name="Mutant #1146" file="npc/gui/main_window.py" line="25">
			<system-out>        self.campaign_root = path.expanduser('~')</system-out>
		</testcase>
		<testcase name="Mutant #1147" file="npc/gui/main_window.py" line="25">
			<system-out>        self.campaign_root = path.expanduser('~')</system-out>
		</testcase>
		<testcase name="Mutant #1148" file="npc/gui/main_window.py" line="26">
			<system-out>        self.qsettings = QtCore.QSettings('Aurule', 'NPC')</system-out>
		</testcase>
		<testcase name="Mutant #1149" file="npc/gui/main_window.py" line="26">
			<system-out>        self.qsettings = QtCore.QSettings('Aurule', 'NPC')</system-out>
		</testcase>
		<testcase name="Mutant #1150" file="npc/gui/main_window.py" line="26">
			<system-out>        self.qsettings = QtCore.QSettings('Aurule', 'NPC')</system-out>
		</testcase>
		<testcase name="Mutant #1151" file="npc/gui/main_window.py" line="37">
			<system-out>        if campaign is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1152" file="npc/gui/main_window.py" line="42">
			<system-out>        self.window = window</system-out>
		</testcase>
		<testcase name="Mutant #1153" file="npc/gui/main_window.py" line="51">
			<system-out>        self.table_search_text = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1154" file="npc/gui/main_window.py" line="51">
			<system-out>        self.table_search_text = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1155" file="npc/gui/main_window.py" line="52">
			<system-out>        self.table_timer = QtCore.QTimer()</system-out>
		</testcase>
		<testcase name="Mutant #1156" file="npc/gui/main_window.py" line="53">
			<system-out>        self.table_timer.setSingleShot(True)</system-out>
		</testcase>
		<testcase name="Mutant #1157" file="npc/gui/main_window.py" line="54">
			<system-out>        self.table_timer.setInterval(350)</system-out>
		</testcase>
		<testcase name="Mutant #1158" file="npc/gui/main_window.py" line="58">
			<system-out>        self.character_table_model = CharacterTableModel(self)</system-out>
		</testcase>
		<testcase name="Mutant #1159" file="npc/gui/main_window.py" line="62">
			<system-out>            QtGui.QKeySequence(&quot;Return&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #1160" file="npc/gui/main_window.py" line="64">
			<system-out>            context=QtCore.Qt.WidgetWithChildrenShortcut)</system-out>
		</testcase>
		<testcase name="Mutant #1161" file="npc/gui/main_window.py" line="67">
			<system-out>        self.characterCount = QtWidgets.QLabel()</system-out>
		</testcase>
		<testcase name="Mutant #1162" file="npc/gui/main_window.py" line="72">
			<system-out>            QtGui.QKeySequence(&quot;Ctrl+L&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #1163" file="npc/gui/main_window.py" line="74">
			<system-out>            context=QtCore.Qt.WindowShortcut)</system-out>
		</testcase>
		<testcase name="Mutant #1164" file="npc/gui/main_window.py" line="80">
			<system-out>                visible=False,</system-out>
		</testcase>
		<testcase name="Mutant #1165" file="npc/gui/main_window.py" line="82">
			<system-out>                ) for i in range(5)</system-out>
		</testcase>
		<testcase name="Mutant #1166" file="npc/gui/main_window.py" line="83">
			<system-out>            ]</system-out>
		</testcase>
		<testcase name="Mutant #1167" file="npc/gui/main_window.py" line="94">
			<system-out>        self.table_search_text = newtext</system-out>
		</testcase>
		<testcase name="Mutant #1168" file="npc/gui/main_window.py" line="103">
			<system-out>        self.table_header = self.characterTableView.horizontalHeader()</system-out>
		</testcase>
		<testcase name="Mutant #1169" file="npc/gui/main_window.py" line="104">
			<system-out>        self.table_header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)</system-out>
		</testcase>
		<testcase name="Mutant #1170" file="npc/gui/main_window.py" line="105">
			<system-out>        self.table_header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)</system-out>
		</testcase>
		<testcase name="Mutant #1171" file="npc/gui/main_window.py" line="110">
			<system-out>        self.about_dialog = QtWidgets.QDialog(self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1172" file="npc/gui/main_window.py" line="133">
			<system-out>        campaign_paths = self.qsettings.value('recentCampaigns/paths', [])</system-out>
		</testcase>
		<testcase name="Mutant #1173" file="npc/gui/main_window.py" line="133">
			<system-out>        campaign_paths = self.qsettings.value('recentCampaigns/paths', [])</system-out>
		</testcase>
		<testcase name="Mutant #1174" file="npc/gui/main_window.py" line="134">
			<system-out>        campaign_titles = self.qsettings.value('recentCampaigns/titles', [])</system-out>
		</testcase>
		<testcase name="Mutant #1175" file="npc/gui/main_window.py" line="134">
			<system-out>        campaign_titles = self.qsettings.value('recentCampaigns/titles', [])</system-out>
		</testcase>
		<testcase name="Mutant #1176" file="npc/gui/main_window.py" line="136">
			<system-out>        num_recent_campaigns = min(len(campaign_paths), 5)</system-out>
		</testcase>
		<testcase name="Mutant #1177" file="npc/gui/main_window.py" line="136">
			<system-out>        num_recent_campaigns = min(len(campaign_paths), 5)</system-out>
		</testcase>
		<testcase name="Mutant #1178" file="npc/gui/main_window.py" line="139">
			<system-out>            text = &quot;&amp;{num}. {title} ({path})&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #1179" file="npc/gui/main_window.py" line="140">
			<system-out>                                        num=i+1,</system-out>
		</testcase>
		<testcase name="Mutant #1180" file="npc/gui/main_window.py" line="140">
			<system-out>                                        num=i+1,</system-out>
		</testcase>
		<testcase name="Mutant #1181" file="npc/gui/main_window.py" line="142">
			<system-out>                                        path=campaign_paths[i])</system-out>
		</testcase>
		<testcase name="Mutant #1182" file="npc/gui/main_window.py" line="145">
			<system-out>            self.recentCampaignActions[i].setVisible(True)</system-out>
		</testcase>
		<testcase name="Mutant #1183" file="npc/gui/main_window.py" line="148">
			<system-out>            action.setVisible(False)</system-out>
		</testcase>
		<testcase name="Mutant #1184" file="npc/gui/main_window.py" line="150">
			<system-out>        self.menuOpen_Recent_Campaign.setEnabled(num_recent_campaigns &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1185" file="npc/gui/main_window.py" line="150">
			<system-out>        self.menuOpen_Recent_Campaign.setEnabled(num_recent_campaigns &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1186" file="npc/gui/main_window.py" line="159">
			<system-out>        campaign_paths = self.qsettings.remove('recentCampaigns/paths')</system-out>
		</testcase>
		<testcase name="Mutant #1187" file="npc/gui/main_window.py" line="159">
			<system-out>        campaign_paths = self.qsettings.remove('recentCampaigns/paths')</system-out>
		</testcase>
		<testcase name="Mutant #1188" file="npc/gui/main_window.py" line="160">
			<system-out>        campaign_titles = self.qsettings.remove('recentCampaigns/titles')</system-out>
		</testcase>
		<testcase name="Mutant #1189" file="npc/gui/main_window.py" line="160">
			<system-out>        campaign_titles = self.qsettings.remove('recentCampaigns/titles')</system-out>
		</testcase>
		<testcase name="Mutant #1190" file="npc/gui/main_window.py" line="165">
			<system-out>        search_rules = self.table_search_text.split(';')</system-out>
		</testcase>
		<testcase name="Mutant #1191" file="npc/gui/main_window.py" line="165">
			<system-out>        search_rules = self.table_search_text.split(';')</system-out>
		</testcase>
		<testcase name="Mutant #1192" file="npc/gui/main_window.py" line="166">
			<system-out>        all_characters = list(npc.parser.get_characters())</system-out>
		</testcase>
		<testcase name="Mutant #1193" file="npc/gui/main_window.py" line="167">
			<system-out>        filtered_characters = npc.commands.find_characters(search_rules, all_characters)</system-out>
		</testcase>
		<testcase name="Mutant #1194" file="npc/gui/main_window.py" line="172">
			<system-out>        if len(all_characters) == len(filtered_characters):</system-out>
		</testcase>
		<testcase name="Mutant #1195" file="npc/gui/main_window.py" line="173">
			<system-out>            status_text = &quot;{} characters&quot;.format(len(all_characters))</system-out>
		</testcase>
		<testcase name="Mutant #1196" file="npc/gui/main_window.py" line="173">
			<system-out>            status_text = &quot;{} characters&quot;.format(len(all_characters))</system-out>
		</testcase>
		<testcase name="Mutant #1197" file="npc/gui/main_window.py" line="175">
			<system-out>            status_text = &quot;{} of {} characters&quot;.format(len(filtered_characters), len(all_characters))</system-out>
		</testcase>
		<testcase name="Mutant #1198" file="npc/gui/main_window.py" line="175">
			<system-out>            status_text = &quot;{} of {} characters&quot;.format(len(filtered_characters), len(all_characters))</system-out>
		</testcase>
		<testcase name="Mutant #1199" file="npc/gui/main_window.py" line="180">
			<system-out>        char = self.character_table_model.characters[index.row()]</system-out>
		</testcase>
		<testcase name="Mutant #1200" file="npc/gui/main_window.py" line="181">
			<system-out>        npc.util.open_files(char.get('path'), prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1201" file="npc/gui/main_window.py" line="185">
			<system-out>        indexes = self.characterTableView.selectedIndexes()</system-out>
		</testcase>
		<testcase name="Mutant #1202" file="npc/gui/main_window.py" line="186">
			<system-out>        characters = [self.character_table_model.characters[i.row()].get('path') for i in indexes]</system-out>
		</testcase>
		<testcase name="Mutant #1203" file="npc/gui/main_window.py" line="186">
			<system-out>        characters = [self.character_table_model.characters[i.row()].get('path') for i in indexes]</system-out>
		</testcase>
		<testcase name="Mutant #1204" file="npc/gui/main_window.py" line="197">
			<system-out>        _translate = QtCore.QCoreApplication.translate</system-out>
		</testcase>
		<testcase name="Mutant #1205" file="npc/gui/main_window.py" line="198">
			<system-out>        self.menuFile.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;File&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1206" file="npc/gui/main_window.py" line="198">
			<system-out>        self.menuFile.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;File&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1207" file="npc/gui/main_window.py" line="208">
			<system-out>            'Open Campaign',</system-out>
		</testcase>
		<testcase name="Mutant #1208" file="npc/gui/main_window.py" line="209">
			<system-out>            str(QtCore.QStandardPaths.StandardLocation(QtCore.QStandardPaths.DocumentsLocation)))</system-out>
		</testcase>
		<testcase name="Mutant #1209" file="npc/gui/main_window.py" line="219">
			<system-out>        action = self.window.sender()</system-out>
		</testcase>
		<testcase name="Mutant #1210" file="npc/gui/main_window.py" line="232">
			<system-out>        root_dir = path.expanduser(root_dir)</system-out>
		</testcase>
		<testcase name="Mutant #1211" file="npc/gui/main_window.py" line="234">
			<system-out>            chdir(root_dir)</system-out>
		</testcase>
		<testcase name="Mutant #1212" file="npc/gui/main_window.py" line="236">
			<system-out>            util.show_error(&quot;Cannot open campaign&quot;, &quot;Cannot open the folder at {}&quot;.format(root_dir), self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1213" file="npc/gui/main_window.py" line="236">
			<system-out>            util.show_error(&quot;Cannot open campaign&quot;, &quot;Cannot open the folder at {}&quot;.format(root_dir), self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1214" file="npc/gui/main_window.py" line="238">
			<system-out>        self.campaign_root = root_dir</system-out>
		</testcase>
		<testcase name="Mutant #1215" file="npc/gui/main_window.py" line="241">
			<system-out>        campaigns = self.qsettings.value('recentCampaigns/paths', [])</system-out>
		</testcase>
		<testcase name="Mutant #1216" file="npc/gui/main_window.py" line="241">
			<system-out>        campaigns = self.qsettings.value('recentCampaigns/paths', [])</system-out>
		</testcase>
		<testcase name="Mutant #1217" file="npc/gui/main_window.py" line="242">
			<system-out>        campaign_titles = self.qsettings.value('recentCampaigns/titles', [])</system-out>
		</testcase>
		<testcase name="Mutant #1218" file="npc/gui/main_window.py" line="242">
			<system-out>        campaign_titles = self.qsettings.value('recentCampaigns/titles', [])</system-out>
		</testcase>
		<testcase name="Mutant #1219" file="npc/gui/main_window.py" line="250">
			<system-out>        campaigns.insert(0, root_dir)</system-out>
		</testcase>
		<testcase name="Mutant #1220" file="npc/gui/main_window.py" line="251">
			<system-out>        campaign_titles.insert(0, self.prefs.get('campaign_name'))</system-out>
		</testcase>
		<testcase name="Mutant #1221" file="npc/gui/main_window.py" line="251">
			<system-out>        campaign_titles.insert(0, self.prefs.get('campaign_name'))</system-out>
		</testcase>
		<testcase name="Mutant #1222" file="npc/gui/main_window.py" line="252">
			<system-out>        del campaigns[5:]</system-out>
		</testcase>
		<testcase name="Mutant #1223" file="npc/gui/main_window.py" line="253">
			<system-out>        del campaign_titles[5:]</system-out>
		</testcase>
		<testcase name="Mutant #1224" file="npc/gui/main_window.py" line="255">
			<system-out>        self.qsettings.setValue('recentCampaigns/paths', campaigns)</system-out>
		</testcase>
		<testcase name="Mutant #1225" file="npc/gui/main_window.py" line="256">
			<system-out>        self.qsettings.setValue('recentCampaigns/titles', campaign_titles)</system-out>
		</testcase>
		<testcase name="Mutant #1226" file="npc/gui/main_window.py" line="260">
			<system-out>    @contextmanager</system-out>
		</testcase>
		<testcase name="Mutant #1227" file="npc/gui/main_window.py" line="275">
			<system-out>        dlg = dialog_class(*args, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1228" file="npc/gui/main_window.py" line="284">
			<system-out>            result = command('user', show_defaults=True, prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1229" file="npc/gui/main_window.py" line="284">
			<system-out>            result = command('user', show_defaults=True, prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1230" file="npc/gui/main_window.py" line="284">
			<system-out>            result = command('user', show_defaults=True, prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1231" file="npc/gui/main_window.py" line="286">
			<system-out>            if not result.success:</system-out>
		</testcase>
		<testcase name="Mutant #1232" file="npc/gui/main_window.py" line="287">
			<system-out>                util.show_error('Could not open user settings', result.errmsg, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1233" file="npc/gui/main_window.py" line="295">
			<system-out>            result = command('campaign', show_defaults=True, prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1234" file="npc/gui/main_window.py" line="295">
			<system-out>            result = command('campaign', show_defaults=True, prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1235" file="npc/gui/main_window.py" line="295">
			<system-out>            result = command('campaign', show_defaults=True, prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1236" file="npc/gui/main_window.py" line="297">
			<system-out>            if not result.success:</system-out>
		</testcase>
		<testcase name="Mutant #1237" file="npc/gui/main_window.py" line="298">
			<system-out>                util.show_error('Could not open campaign settings', result.errmsg, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1238" file="npc/gui/main_window.py" line="306">
			<system-out>            new_prefs = settings.Settings()</system-out>
		</testcase>
		<testcase name="Mutant #1239" file="npc/gui/main_window.py" line="308">
			<system-out>            util.show_error(&quot;Could not open settings&quot;, err.strerror, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1240" file="npc/gui/main_window.py" line="311">
			<system-out>        settings_errors = settings.lint_settings(new_prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1241" file="npc/gui/main_window.py" line="313">
			<system-out>            message = &quot;\n&quot;.join(settings_errors)</system-out>
		</testcase>
		<testcase name="Mutant #1242" file="npc/gui/main_window.py" line="313">
			<system-out>            message = &quot;\n&quot;.join(settings_errors)</system-out>
		</testcase>
		<testcase name="Mutant #1243" file="npc/gui/main_window.py" line="314">
			<system-out>            util.show_error(&quot;Error in settings&quot;, message, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1244" file="npc/gui/main_window.py" line="317">
			<system-out>        self.prefs = new_prefs</system-out>
		</testcase>
		<testcase name="Mutant #1245" file="npc/gui/main_window.py" line="318">
			<system-out>        self.window.setWindowTitle(&quot;NPC - {}&quot;.format(self.prefs.get('campaign_name')))</system-out>
		</testcase>
		<testcase name="Mutant #1246" file="npc/gui/main_window.py" line="318">
			<system-out>        self.window.setWindowTitle(&quot;NPC - {}&quot;.format(self.prefs.get('campaign_name')))</system-out>
		</testcase>
		<testcase name="Mutant #1247" file="npc/gui/main_window.py" line="323">
			<system-out>            result = command(prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1248" file="npc/gui/main_window.py" line="325">
			<system-out>            if not result.success:</system-out>
		</testcase>
		<testcase name="Mutant #1249" file="npc/gui/main_window.py" line="326">
			<system-out>                util.show_error('Could not create session files', result.errmsg, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1250" file="npc/gui/main_window.py" line="334">
			<system-out>            if path.exists(self.prefs.get_settings_path('campaign')):</system-out>
		</testcase>
		<testcase name="Mutant #1251" file="npc/gui/main_window.py" line="335">
			<system-out>                init_dialog.set_campaign_name(self.prefs.get('campaign_name'), enabled=False)</system-out>
		</testcase>
		<testcase name="Mutant #1252" file="npc/gui/main_window.py" line="335">
			<system-out>                init_dialog.set_campaign_name(self.prefs.get('campaign_name'), enabled=False)</system-out>
		</testcase>
		<testcase name="Mutant #1253" file="npc/gui/main_window.py" line="340">
			<system-out>                values = init_dialog.values</system-out>
		</testcase>
		<testcase name="Mutant #1254" file="npc/gui/main_window.py" line="347">
			<system-out>            if not new_character_dialog.run():</system-out>
		</testcase>
		<testcase name="Mutant #1255" file="npc/gui/main_window.py" line="350">
			<system-out>            values = new_character_dialog.values</system-out>
		</testcase>
		<testcase name="Mutant #1256" file="npc/gui/main_window.py" line="351">
			<system-out>            cmd = values.pop(&quot;command&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1257" file="npc/gui/main_window.py" line="351">
			<system-out>            cmd = values.pop(&quot;command&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1258" file="npc/gui/main_window.py" line="353">
			<system-out>                result = command(values)</system-out>
		</testcase>
		<testcase name="Mutant #1259" file="npc/gui/main_window.py" line="354">
			<system-out>                if not result.success:</system-out>
		</testcase>
		<testcase name="Mutant #1260" file="npc/gui/main_window.py" line="355">
			<system-out>                    util.show_error(&quot;Could not create character&quot;, result.errmsg, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1261" file="npc/gui/main_window.py" line="362">
			<system-out>            result = command('session', prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1262" file="npc/gui/main_window.py" line="362">
			<system-out>            result = command('session', prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1263" file="npc/gui/main_window.py" line="364">
			<system-out>            if not result.success:</system-out>
		</testcase>
		<testcase name="Mutant #1264" file="npc/gui/main_window.py" line="365">
			<system-out>                util.show_error('Could not open session file', result.errmsg, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1265" file="npc/gui/main_window.py" line="373">
			<system-out>            result = command('plot', prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1266" file="npc/gui/main_window.py" line="373">
			<system-out>            result = command('plot', prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1267" file="npc/gui/main_window.py" line="375">
			<system-out>            if not result.success:</system-out>
		</testcase>
		<testcase name="Mutant #1268" file="npc/gui/main_window.py" line="376">
			<system-out>                util.show_error('Could not open plot file', result.errmsg, self.window)</system-out>
		</testcase>
		<testcase name="Mutant #1269" file="npc/gui/main_window.py" line="391">
			<system-out>        self.labelVersion.setText(&quot;Version {0}&quot;.format(__version__))</system-out>
		</testcase>
		<testcase name="Mutant #1270" file="npc/gui/main_window.py" line="397">
			<system-out>        self.characters = []</system-out>
		</testcase>
		<testcase name="Mutant #1271" file="npc/gui/main_window.py" line="399">
			<system-out>            &quot;name&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1272" file="npc/gui/main_window.py" line="400">
			<system-out>            &quot;type&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1273" file="npc/gui/main_window.py" line="401">
			<system-out>        ]</system-out>
		</testcase>
		<testcase name="Mutant #1274" file="npc/gui/main_window.py" line="403">
			<system-out>            &quot;Name&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1275" file="npc/gui/main_window.py" line="404">
			<system-out>            &quot;Type&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1276" file="npc/gui/main_window.py" line="405">
			<system-out>        ]</system-out>
		</testcase>
		<testcase name="Mutant #1277" file="npc/gui/main_window.py" line="415">
			<system-out>        self.characters = new_chars</system-out>
		</testcase>
		<testcase name="Mutant #1278" file="npc/gui/main_window.py" line="428">
			<system-out>        if role == QtCore.Qt.DisplayRole:</system-out>
		</testcase>
		<testcase name="Mutant #1279" file="npc/gui/main_window.py" line="429">
			<system-out>            tag = self.column_header_tags[index.column()]</system-out>
		</testcase>
		<testcase name="Mutant #1280" file="npc/gui/main_window.py" line="436">
			<system-out>        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:</system-out>
		</testcase>
		<testcase name="Mutant #1281" file="npc/gui/main_window.py" line="436">
			<system-out>        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:</system-out>
		</testcase>
		<testcase name="Mutant #1282" file="npc/gui/main_window.py" line="436">
			<system-out>        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:</system-out>
		</testcase>
		<testcase name="Mutant #1283" file="npc/gui/new_character.py" line="28">
			<system-out>        self.prefs = prefs</system-out>
		</testcase>
		<testcase name="Mutant #1284" file="npc/gui/new_character.py" line="29">
			<system-out>        self.type_specific_widgets = []</system-out>
		</testcase>
		<testcase name="Mutant #1285" file="npc/gui/new_character.py" line="30">
			<system-out>        self.current_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1286" file="npc/gui/new_character.py" line="30">
			<system-out>        self.current_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1287" file="npc/gui/new_character.py" line="32">
			<system-out>            &quot;command&quot;: commands.create_standard,</system-out>
		</testcase>
		<testcase name="Mutant #1288" file="npc/gui/new_character.py" line="33">
			<system-out>            &quot;name&quot;: &quot;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1289" file="npc/gui/new_character.py" line="33">
			<system-out>            &quot;name&quot;: &quot;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1290" file="npc/gui/new_character.py" line="34">
			<system-out>            &quot;ctype&quot;: &quot;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1291" file="npc/gui/new_character.py" line="34">
			<system-out>            &quot;ctype&quot;: &quot;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1292" file="npc/gui/new_character.py" line="35">
			<system-out>            &quot;dead&quot;: False,</system-out>
		</testcase>
		<testcase name="Mutant #1293" file="npc/gui/new_character.py" line="35">
			<system-out>            &quot;dead&quot;: False,</system-out>
		</testcase>
		<testcase name="Mutant #1294" file="npc/gui/new_character.py" line="36">
			<system-out>            &quot;foreign&quot;: False,</system-out>
		</testcase>
		<testcase name="Mutant #1295" file="npc/gui/new_character.py" line="36">
			<system-out>            &quot;foreign&quot;: False,</system-out>
		</testcase>
		<testcase name="Mutant #1296" file="npc/gui/new_character.py" line="37">
			<system-out>            &quot;location&quot;: &quot;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1297" file="npc/gui/new_character.py" line="37">
			<system-out>            &quot;location&quot;: &quot;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1298" file="npc/gui/new_character.py" line="38">
			<system-out>            &quot;groups&quot;: [],</system-out>
		</testcase>
		<testcase name="Mutant #1299" file="npc/gui/new_character.py" line="39">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #1300" file="npc/gui/new_character.py" line="43">
			<system-out>        self.path_dislpay = QtWidgets.QLabel(self)</system-out>
		</testcase>
		<testcase name="Mutant #1301" file="npc/gui/new_character.py" line="44">
			<system-out>        self.infoForm.insertRow(5, 'Path:', self.path_dislpay)</system-out>
		</testcase>
		<testcase name="Mutant #1302" file="npc/gui/new_character.py" line="44">
			<system-out>        self.infoForm.insertRow(5, 'Path:', self.path_dislpay)</system-out>
		</testcase>
		<testcase name="Mutant #1303" file="npc/gui/new_character.py" line="45">
			<system-out>        self.path_timer = QtCore.QTimer()</system-out>
		</testcase>
		<testcase name="Mutant #1304" file="npc/gui/new_character.py" line="46">
			<system-out>        self.path_timer.setSingleShot(True)</system-out>
		</testcase>
		<testcase name="Mutant #1305" file="npc/gui/new_character.py" line="47">
			<system-out>        self.path_timer.setInterval(300)</system-out>
		</testcase>
		<testcase name="Mutant #1306" file="npc/gui/new_character.py" line="50">
			<system-out>        self.typeSelect.currentTextChanged.connect(lambda text: self.set_value(&quot;ctype&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1307" file="npc/gui/new_character.py" line="50">
			<system-out>        self.typeSelect.currentTextChanged.connect(lambda text: self.set_value(&quot;ctype&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1308" file="npc/gui/new_character.py" line="51">
			<system-out>        self.characterName.textChanged.connect(lambda text: self.set_value(&quot;name&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1309" file="npc/gui/new_character.py" line="51">
			<system-out>        self.characterName.textChanged.connect(lambda text: self.set_value(&quot;name&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1310" file="npc/gui/new_character.py" line="52">
			<system-out>        self.groupName.textChanged.connect(lambda text: self.set_value(&quot;groups&quot;, [text]))</system-out>
		</testcase>
		<testcase name="Mutant #1311" file="npc/gui/new_character.py" line="52">
			<system-out>        self.groupName.textChanged.connect(lambda text: self.set_value(&quot;groups&quot;, [text]))</system-out>
		</testcase>
		<testcase name="Mutant #1312" file="npc/gui/new_character.py" line="57">
			<system-out>        self.locName.textChanged.connect(lambda text: self.set_value(&quot;location&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1313" file="npc/gui/new_character.py" line="57">
			<system-out>        self.locName.textChanged.connect(lambda text: self.set_value(&quot;location&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1314" file="npc/gui/new_character.py" line="66">
			<system-out>            item = self.typeSelect.addItem(type_key.title(), userData=type_key)</system-out>
		</testcase>
		<testcase name="Mutant #1315" file="npc/gui/new_character.py" line="67">
			<system-out>        default_index = self.typeSelect.findText(self.prefs.get('gui.defaults.character_type').title())</system-out>
		</testcase>
		<testcase name="Mutant #1316" file="npc/gui/new_character.py" line="67">
			<system-out>        default_index = self.typeSelect.findText(self.prefs.get('gui.defaults.character_type').title())</system-out>
		</testcase>
		<testcase name="Mutant #1317" file="npc/gui/new_character.py" line="68">
			<system-out>        if default_index != -1:</system-out>
		</testcase>
		<testcase name="Mutant #1318" file="npc/gui/new_character.py" line="68">
			<system-out>        if default_index != -1:</system-out>
		</testcase>
		<testcase name="Mutant #1319" file="npc/gui/new_character.py" line="68">
			<system-out>        if default_index != -1:</system-out>
		</testcase>
		<testcase name="Mutant #1320" file="npc/gui/new_character.py" line="85">
			<system-out>        self.values[key] = value</system-out>
		</testcase>
		<testcase name="Mutant #1321" file="npc/gui/new_character.py" line="91">
			<system-out>        values = self.values.copy()</system-out>
		</testcase>
		<testcase name="Mutant #1322" file="npc/gui/new_character.py" line="93">
			<system-out>        tags = {}</system-out>
		</testcase>
		<testcase name="Mutant #1323" file="npc/gui/new_character.py" line="94">
			<system-out>        tags['type'] = values['ctype']</system-out>
		</testcase>
		<testcase name="Mutant #1324" file="npc/gui/new_character.py" line="94">
			<system-out>        tags['type'] = values['ctype']</system-out>
		</testcase>
		<testcase name="Mutant #1325" file="npc/gui/new_character.py" line="94">
			<system-out>        tags['type'] = values['ctype']</system-out>
		</testcase>
		<testcase name="Mutant #1326" file="npc/gui/new_character.py" line="95">
			<system-out>        if values['groups']:</system-out>
		</testcase>
		<testcase name="Mutant #1327" file="npc/gui/new_character.py" line="96">
			<system-out>            tags['group'] = values.pop('groups')</system-out>
		</testcase>
		<testcase name="Mutant #1328" file="npc/gui/new_character.py" line="96">
			<system-out>            tags['group'] = values.pop('groups')</system-out>
		</testcase>
		<testcase name="Mutant #1329" file="npc/gui/new_character.py" line="96">
			<system-out>            tags['group'] = values.pop('groups')</system-out>
		</testcase>
		<testcase name="Mutant #1330" file="npc/gui/new_character.py" line="100">
			<system-out>        temp_char = Character()</system-out>
		</testcase>
		<testcase name="Mutant #1331" file="npc/gui/new_character.py" line="101">
			<system-out>        temp_char.merge_all({**self.prefs.get('tag_defaults'), **tags})</system-out>
		</testcase>
		<testcase name="Mutant #1332" file="npc/gui/new_character.py" line="101">
			<system-out>        temp_char.merge_all({**self.prefs.get('tag_defaults'), **tags})</system-out>
		</testcase>
		<testcase name="Mutant #1333" file="npc/gui/new_character.py" line="101">
			<system-out>        temp_char.merge_all({**self.prefs.get('tag_defaults'), **tags})</system-out>
		</testcase>
		<testcase name="Mutant #1334" file="npc/gui/new_character.py" line="103">
			<system-out>        template_path = self.prefs.get('types.{}.sheet_template'.format(temp_char.type_key))</system-out>
		</testcase>
		<testcase name="Mutant #1335" file="npc/gui/new_character.py" line="103">
			<system-out>        template_path = self.prefs.get('types.{}.sheet_template'.format(temp_char.type_key))</system-out>
		</testcase>
		<testcase name="Mutant #1336" file="npc/gui/new_character.py" line="104">
			<system-out>        char_name = values['name']</system-out>
		</testcase>
		<testcase name="Mutant #1337" file="npc/gui/new_character.py" line="104">
			<system-out>        char_name = values['name']</system-out>
		</testcase>
		<testcase name="Mutant #1338" file="npc/gui/new_character.py" line="106">
			<system-out>            filename = char_name + path.splitext(template_path)[1]</system-out>
		</testcase>
		<testcase name="Mutant #1339" file="npc/gui/new_character.py" line="106">
			<system-out>            filename = char_name + path.splitext(template_path)[1]</system-out>
		</testcase>
		<testcase name="Mutant #1340" file="npc/gui/new_character.py" line="106">
			<system-out>            filename = char_name + path.splitext(template_path)[1]</system-out>
		</testcase>
		<testcase name="Mutant #1341" file="npc/gui/new_character.py" line="108">
			<system-out>            filename = ''</system-out>
		</testcase>
		<testcase name="Mutant #1342" file="npc/gui/new_character.py" line="108">
			<system-out>            filename = ''</system-out>
		</testcase>
		<testcase name="Mutant #1343" file="npc/gui/new_character.py" line="109">
			<system-out>        base_path = create_path_from_character(temp_char, prefs=self.prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1344" file="npc/gui/new_character.py" line="110">
			<system-out>        final_path = path.join(base_path, filename)</system-out>
		</testcase>
		<testcase name="Mutant #1345" file="npc/gui/new_character.py" line="112">
			<system-out>        path_exists = path.exists(final_path)</system-out>
		</testcase>
		<testcase name="Mutant #1346" file="npc/gui/new_character.py" line="115">
			<system-out>            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)</system-out>
		</testcase>
		<testcase name="Mutant #1347" file="npc/gui/new_character.py" line="117">
			<system-out>            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(True)</system-out>
		</testcase>
		<testcase name="Mutant #1348" file="npc/gui/new_character.py" line="119">
			<system-out>        if path_exists and char_name:</system-out>
		</testcase>
		<testcase name="Mutant #1349" file="npc/gui/new_character.py" line="120">
			<system-out>            self.path_dislpay.setText(&quot;Character already exists&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1350" file="npc/gui/new_character.py" line="129">
			<system-out>                self.set_value(&quot;foreign&quot;, self.foreignText.text())</system-out>
		</testcase>
		<testcase name="Mutant #1351" file="npc/gui/new_character.py" line="131">
			<system-out>                self.set_value(&quot;foreign&quot;, True)</system-out>
		</testcase>
		<testcase name="Mutant #1352" file="npc/gui/new_character.py" line="131">
			<system-out>                self.set_value(&quot;foreign&quot;, True)</system-out>
		</testcase>
		<testcase name="Mutant #1353" file="npc/gui/new_character.py" line="133">
			<system-out>            self.set_value(&quot;foreign&quot;, False)</system-out>
		</testcase>
		<testcase name="Mutant #1354" file="npc/gui/new_character.py" line="133">
			<system-out>            self.set_value(&quot;foreign&quot;, False)</system-out>
		</testcase>
		<testcase name="Mutant #1355" file="npc/gui/new_character.py" line="140">
			<system-out>                self.set_value(&quot;dead&quot;, self.deceasedText.toPlainText())</system-out>
		</testcase>
		<testcase name="Mutant #1356" file="npc/gui/new_character.py" line="142">
			<system-out>                self.set_value(&quot;dead&quot;, True)</system-out>
		</testcase>
		<testcase name="Mutant #1357" file="npc/gui/new_character.py" line="142">
			<system-out>                self.set_value(&quot;dead&quot;, True)</system-out>
		</testcase>
		<testcase name="Mutant #1358" file="npc/gui/new_character.py" line="144">
			<system-out>            self.set_value(&quot;dead&quot;, False)</system-out>
		</testcase>
		<testcase name="Mutant #1359" file="npc/gui/new_character.py" line="144">
			<system-out>            self.set_value(&quot;dead&quot;, False)</system-out>
		</testcase>
		<testcase name="Mutant #1360" file="npc/gui/new_character.py" line="157">
			<system-out>        self.type_specific_widgets = []</system-out>
		</testcase>
		<testcase name="Mutant #1361" file="npc/gui/new_character.py" line="159">
			<system-out>        new_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1362" file="npc/gui/new_character.py" line="159">
			<system-out>        new_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1363" file="npc/gui/new_character.py" line="160">
			<system-out>        type_key = self.typeSelect.itemData(index)</system-out>
		</testcase>
		<testcase name="Mutant #1364" file="npc/gui/new_character.py" line="161">
			<system-out>        if type_key == 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #1365" file="npc/gui/new_character.py" line="161">
			<system-out>        if type_key == 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #1366" file="npc/gui/new_character.py" line="162">
			<system-out>            new_vbox_height_offset = self.create_changeling_controls()</system-out>
		</testcase>
		<testcase name="Mutant #1367" file="npc/gui/new_character.py" line="163">
			<system-out>        elif type_key == 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #1368" file="npc/gui/new_character.py" line="163">
			<system-out>        elif type_key == 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #1369" file="npc/gui/new_character.py" line="164">
			<system-out>            new_vbox_height_offset = self.create_werewolf_controls()</system-out>
		</testcase>
		<testcase name="Mutant #1370" file="npc/gui/new_character.py" line="168">
			<system-out>        new_vbox_height_offset += len(self.type_specific_widgets)*6</system-out>
		</testcase>
		<testcase name="Mutant #1371" file="npc/gui/new_character.py" line="168">
			<system-out>        new_vbox_height_offset += len(self.type_specific_widgets)*6</system-out>
		</testcase>
		<testcase name="Mutant #1372" file="npc/gui/new_character.py" line="168">
			<system-out>        new_vbox_height_offset += len(self.type_specific_widgets)*6</system-out>
		</testcase>
		<testcase name="Mutant #1373" file="npc/gui/new_character.py" line="168">
			<system-out>        new_vbox_height_offset += len(self.type_specific_widgets)*6</system-out>
		</testcase>
		<testcase name="Mutant #1374" file="npc/gui/new_character.py" line="172">
			<system-out>            self.height() - self.current_vbox_height_offset + new_vbox_height_offset)</system-out>
		</testcase>
		<testcase name="Mutant #1375" file="npc/gui/new_character.py" line="172">
			<system-out>            self.height() - self.current_vbox_height_offset + new_vbox_height_offset)</system-out>
		</testcase>
		<testcase name="Mutant #1376" file="npc/gui/new_character.py" line="173">
			<system-out>        self.current_vbox_height_offset = new_vbox_height_offset</system-out>
		</testcase>
		<testcase name="Mutant #1377" file="npc/gui/new_character.py" line="204">
			<system-out>        self.set_value(&quot;command&quot;, commands.create_standard)</system-out>
		</testcase>
		<testcase name="Mutant #1378" file="npc/gui/new_character.py" line="206">
			<system-out>        return 0</system-out>
		</testcase>
		<testcase name="Mutant #1379" file="npc/gui/new_character.py" line="214">
			<system-out>        new_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1380" file="npc/gui/new_character.py" line="214">
			<system-out>        new_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1381" file="npc/gui/new_character.py" line="215">
			<system-out>        seeming_select = QtWidgets.QComboBox(self)</system-out>
		</testcase>
		<testcase name="Mutant #1382" file="npc/gui/new_character.py" line="216">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Seeming', seeming_select)</system-out>
		</testcase>
		<testcase name="Mutant #1383" file="npc/gui/new_character.py" line="216">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Seeming', seeming_select)</system-out>
		</testcase>
		<testcase name="Mutant #1384" file="npc/gui/new_character.py" line="216">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Seeming', seeming_select)</system-out>
		</testcase>
		<testcase name="Mutant #1385" file="npc/gui/new_character.py" line="216">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Seeming', seeming_select)</system-out>
		</testcase>
		<testcase name="Mutant #1386" file="npc/gui/new_character.py" line="219">
			<system-out>        kith_select = QtWidgets.QComboBox(self)</system-out>
		</testcase>
		<testcase name="Mutant #1387" file="npc/gui/new_character.py" line="220">
			<system-out>        new_vbox_height_offset += self.new_row(3, '&amp;Kith', kith_select)</system-out>
		</testcase>
		<testcase name="Mutant #1388" file="npc/gui/new_character.py" line="220">
			<system-out>        new_vbox_height_offset += self.new_row(3, '&amp;Kith', kith_select)</system-out>
		</testcase>
		<testcase name="Mutant #1389" file="npc/gui/new_character.py" line="220">
			<system-out>        new_vbox_height_offset += self.new_row(3, '&amp;Kith', kith_select)</system-out>
		</testcase>
		<testcase name="Mutant #1390" file="npc/gui/new_character.py" line="220">
			<system-out>        new_vbox_height_offset += self.new_row(3, '&amp;Kith', kith_select)</system-out>
		</testcase>
		<testcase name="Mutant #1391" file="npc/gui/new_character.py" line="223">
			<system-out>        courtInput = QtWidgets.QLineEdit(self)</system-out>
		</testcase>
		<testcase name="Mutant #1392" file="npc/gui/new_character.py" line="224">
			<system-out>        new_vbox_height_offset += self.new_row(4, '&amp;Court', courtInput)</system-out>
		</testcase>
		<testcase name="Mutant #1393" file="npc/gui/new_character.py" line="224">
			<system-out>        new_vbox_height_offset += self.new_row(4, '&amp;Court', courtInput)</system-out>
		</testcase>
		<testcase name="Mutant #1394" file="npc/gui/new_character.py" line="224">
			<system-out>        new_vbox_height_offset += self.new_row(4, '&amp;Court', courtInput)</system-out>
		</testcase>
		<testcase name="Mutant #1395" file="npc/gui/new_character.py" line="224">
			<system-out>        new_vbox_height_offset += self.new_row(4, '&amp;Court', courtInput)</system-out>
		</testcase>
		<testcase name="Mutant #1396" file="npc/gui/new_character.py" line="228">
			<system-out>        def update_kiths(_=0):</system-out>
		</testcase>
		<testcase name="Mutant #1397" file="npc/gui/new_character.py" line="234">
			<system-out>        seeming_select.currentTextChanged.connect(lambda text: self.set_value('seeming', text))</system-out>
		</testcase>
		<testcase name="Mutant #1398" file="npc/gui/new_character.py" line="234">
			<system-out>        seeming_select.currentTextChanged.connect(lambda text: self.set_value('seeming', text))</system-out>
		</testcase>
		<testcase name="Mutant #1399" file="npc/gui/new_character.py" line="235">
			<system-out>        kith_select.currentTextChanged.connect(lambda text: self.set_value('kith', text))</system-out>
		</testcase>
		<testcase name="Mutant #1400" file="npc/gui/new_character.py" line="235">
			<system-out>        kith_select.currentTextChanged.connect(lambda text: self.set_value('kith', text))</system-out>
		</testcase>
		<testcase name="Mutant #1401" file="npc/gui/new_character.py" line="236">
			<system-out>        courtInput.textChanged.connect(lambda text: self.set_value(&quot;court&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1402" file="npc/gui/new_character.py" line="236">
			<system-out>        courtInput.textChanged.connect(lambda text: self.set_value(&quot;court&quot;, text))</system-out>
		</testcase>
		<testcase name="Mutant #1403" file="npc/gui/new_character.py" line="238">
			<system-out>        for seeming in self.prefs.get('changeling.seemings'):</system-out>
		</testcase>
		<testcase name="Mutant #1404" file="npc/gui/new_character.py" line="239">
			<system-out>            seeming_select.addItem(seeming.title(), userData=[kith.title() for kith in self.prefs.get('changeling.kiths.{}'.format(seeming))])</system-out>
		</testcase>
		<testcase name="Mutant #1405" file="npc/gui/new_character.py" line="241">
			<system-out>        self.set_value(&quot;command&quot;, commands.create_changeling)</system-out>
		</testcase>
		<testcase name="Mutant #1406" file="npc/gui/new_character.py" line="251">
			<system-out>        new_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1407" file="npc/gui/new_character.py" line="251">
			<system-out>        new_vbox_height_offset = 0</system-out>
		</testcase>
		<testcase name="Mutant #1408" file="npc/gui/new_character.py" line="253">
			<system-out>        auspice_select = QtWidgets.QComboBox(self)</system-out>
		</testcase>
		<testcase name="Mutant #1409" file="npc/gui/new_character.py" line="254">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Auspice', auspice_select)</system-out>
		</testcase>
		<testcase name="Mutant #1410" file="npc/gui/new_character.py" line="254">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Auspice', auspice_select)</system-out>
		</testcase>
		<testcase name="Mutant #1411" file="npc/gui/new_character.py" line="254">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Auspice', auspice_select)</system-out>
		</testcase>
		<testcase name="Mutant #1412" file="npc/gui/new_character.py" line="254">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Auspice', auspice_select)</system-out>
		</testcase>
		<testcase name="Mutant #1413" file="npc/gui/new_character.py" line="255">
			<system-out>        for auspice in self.prefs.get('werewolf.auspices'):</system-out>
		</testcase>
		<testcase name="Mutant #1414" file="npc/gui/new_character.py" line="259">
			<system-out>        tribe_select = QtWidgets.QComboBox(self)</system-out>
		</testcase>
		<testcase name="Mutant #1415" file="npc/gui/new_character.py" line="260">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Tribe', tribe_select)</system-out>
		</testcase>
		<testcase name="Mutant #1416" file="npc/gui/new_character.py" line="260">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Tribe', tribe_select)</system-out>
		</testcase>
		<testcase name="Mutant #1417" file="npc/gui/new_character.py" line="260">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Tribe', tribe_select)</system-out>
		</testcase>
		<testcase name="Mutant #1418" file="npc/gui/new_character.py" line="260">
			<system-out>        new_vbox_height_offset += self.new_row(2, '&amp;Tribe', tribe_select)</system-out>
		</testcase>
		<testcase name="Mutant #1419" file="npc/gui/new_character.py" line="261">
			<system-out>        for tribe in self.prefs.get('werewolf.tribes.moon'):</system-out>
		</testcase>
		<testcase name="Mutant #1420" file="npc/gui/new_character.py" line="264">
			<system-out>        for tribe in self.prefs.get('werewolf.tribes.pure'):</system-out>
		</testcase>
		<testcase name="Mutant #1421" file="npc/gui/new_character.py" line="269">
			<system-out>        auspice_select.currentTextChanged.connect(lambda text: self.set_value('auspice', text))</system-out>
		</testcase>
		<testcase name="Mutant #1422" file="npc/gui/new_character.py" line="269">
			<system-out>        auspice_select.currentTextChanged.connect(lambda text: self.set_value('auspice', text))</system-out>
		</testcase>
		<testcase name="Mutant #1423" file="npc/gui/new_character.py" line="270">
			<system-out>        tribe_select.currentTextChanged.connect(lambda text: self.set_value('tribe', text))</system-out>
		</testcase>
		<testcase name="Mutant #1424" file="npc/gui/new_character.py" line="270">
			<system-out>        tribe_select.currentTextChanged.connect(lambda text: self.set_value('tribe', text))</system-out>
		</testcase>
		<testcase name="Mutant #1425" file="npc/gui/new_character.py" line="283">
			<system-out>        result = self.exec_()</system-out>
		</testcase>
		<testcase name="Mutant #1426" file="npc/gui/new_character.py" line="284">
			<system-out>        return result == self.Accepted and self.values['name']</system-out>
		</testcase>
		<testcase name="Mutant #1427" file="npc/gui/new_character.py" line="284">
			<system-out>        return result == self.Accepted and self.values['name']</system-out>
		</testcase>
		<testcase name="Mutant #1428" file="npc/gui/new_character.py" line="284">
			<system-out>        return result == self.Accepted and self.values['name']</system-out>
		</testcase>
		<testcase name="Mutant #1429" file="npc/gui/__init__.py" line="16">
			<system-out>    parser = _make_parser()</system-out>
		</testcase>
		<testcase name="Mutant #1430" file="npc/gui/__init__.py" line="17">
			<system-out>    if not argv:</system-out>
		</testcase>
		<testcase name="Mutant #1431" file="npc/gui/__init__.py" line="18">
			<system-out>        argv = sys.argv[1:]</system-out>
		</testcase>
		<testcase name="Mutant #1432" file="npc/gui/__init__.py" line="18">
			<system-out>        argv = sys.argv[1:]</system-out>
		</testcase>
		<testcase name="Mutant #1433" file="npc/gui/__init__.py" line="19">
			<system-out>    args = parser.parse_args(argv)</system-out>
		</testcase>
		<testcase name="Mutant #1434" file="npc/gui/__init__.py" line="22">
			<system-out>        prefs = settings.Settings()</system-out>
		</testcase>
		<testcase name="Mutant #1435" file="npc/gui/__init__.py" line="26">
			<system-out>    setting_errors = settings.lint_settings(prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1436" file="npc/gui/__init__.py" line="28">
			<system-out>        message = &quot;Error in settings\n&quot;.join(setting_errors)</system-out>
		</testcase>
		<testcase name="Mutant #1437" file="npc/gui/__init__.py" line="28">
			<system-out>        message = &quot;Error in settings\n&quot;.join(setting_errors)</system-out>
		</testcase>
		<testcase name="Mutant #1438" file="npc/gui/__init__.py" line="29">
			<system-out>        startup_error(message)</system-out>
		</testcase>
		<testcase name="Mutant #1439" file="npc/gui/__init__.py" line="31">
			<system-out>    app = QtWidgets.QApplication(argv)</system-out>
		</testcase>
		<testcase name="Mutant #1440" file="npc/gui/__init__.py" line="32">
			<system-out>    window = QtWidgets.QMainWindow()</system-out>
		</testcase>
		<testcase name="Mutant #1441" file="npc/gui/__init__.py" line="34">
			<system-out>    prog = MainWindow(window, prefs, campaign=args.campaign)</system-out>
		</testcase>
		<testcase name="Mutant #1442" file="npc/gui/__init__.py" line="49">
			<system-out>    app = QtWidgets.QApplication([])</system-out>
		</testcase>
		<testcase name="Mutant #1443" file="npc/gui/__init__.py" line="52">
			<system-out>        'Could not start NPC',</system-out>
		</testcase>
		<testcase name="Mutant #1444" file="npc/gui/__init__.py" line="68">
			<system-out>    parser = argparse.ArgumentParser(description='GM helper script to manage game files - GUI')</system-out>
		</testcase>
		<testcase name="Mutant #1445" file="npc/gui/__init__.py" line="68">
			<system-out>    parser = argparse.ArgumentParser(description='GM helper script to manage game files - GUI')</system-out>
		</testcase>
		<testcase name="Mutant #1446" file="npc/gui/__init__.py" line="69">
			<system-out>    parser.add_argument('--campaign', default=None, help=&quot;Use the campaign files in a different directory&quot;, metavar='DIR')</system-out>
		</testcase>
		<testcase name="Mutant #1447" file="npc/gui/__init__.py" line="69">
			<system-out>    parser.add_argument('--campaign', default=None, help=&quot;Use the campaign files in a different directory&quot;, metavar='DIR')</system-out>
		</testcase>
		<testcase name="Mutant #1448" file="npc/gui/__init__.py" line="69">
			<system-out>    parser.add_argument('--campaign', default=None, help=&quot;Use the campaign files in a different directory&quot;, metavar='DIR')</system-out>
		</testcase>
		<testcase name="Mutant #1449" file="npc/gui/__init__.py" line="70">
			<system-out>    parser.add_argument('--version', action='version', version=npc.__version__)</system-out>
		</testcase>
		<testcase name="Mutant #1450" file="npc/gui/__init__.py" line="70">
			<system-out>    parser.add_argument('--version', action='version', version=npc.__version__)</system-out>
		</testcase>
		<testcase name="Mutant #1451" file="npc/gui/__init__.py" line="71">
			<system-out>    parser.set_defaults(debug=False)</system-out>
		</testcase>
		<testcase name="Mutant #1452" file="npc/gui/uis/about.py" line="12">
			<system-out>        AboutDialog.setObjectName(&quot;AboutDialog&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1453" file="npc/gui/uis/about.py" line="14">
			<system-out>        AboutDialog.resize(271, 175)</system-out>
		</testcase>
		<testcase name="Mutant #1454" file="npc/gui/uis/about.py" line="14">
			<system-out>        AboutDialog.resize(271, 175)</system-out>
		</testcase>
		<testcase name="Mutant #1455" file="npc/gui/uis/about.py" line="16">
			<system-out>        AboutDialog.setModal(True)</system-out>
		</testcase>
		<testcase name="Mutant #1456" file="npc/gui/uis/about.py" line="17">
			<system-out>        self.buttonBox = QtWidgets.QDialogButtonBox(AboutDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1457" file="npc/gui/uis/about.py" line="18">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 140, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1458" file="npc/gui/uis/about.py" line="18">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 140, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1459" file="npc/gui/uis/about.py" line="18">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 140, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1460" file="npc/gui/uis/about.py" line="18">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 140, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1461" file="npc/gui/uis/about.py" line="21">
			<system-out>        self.buttonBox.setCenterButtons(False)</system-out>
		</testcase>
		<testcase name="Mutant #1462" file="npc/gui/uis/about.py" line="22">
			<system-out>        self.buttonBox.setObjectName(&quot;buttonBox&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1463" file="npc/gui/uis/about.py" line="23">
			<system-out>        self.labelProgName = QtWidgets.QLabel(AboutDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1464" file="npc/gui/uis/about.py" line="24">
			<system-out>        self.labelProgName.setGeometry(QtCore.QRect(0, 0, 271, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1465" file="npc/gui/uis/about.py" line="24">
			<system-out>        self.labelProgName.setGeometry(QtCore.QRect(0, 0, 271, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1466" file="npc/gui/uis/about.py" line="24">
			<system-out>        self.labelProgName.setGeometry(QtCore.QRect(0, 0, 271, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1467" file="npc/gui/uis/about.py" line="24">
			<system-out>        self.labelProgName.setGeometry(QtCore.QRect(0, 0, 271, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1468" file="npc/gui/uis/about.py" line="25">
			<system-out>        font = QtGui.QFont()</system-out>
		</testcase>
		<testcase name="Mutant #1469" file="npc/gui/uis/about.py" line="26">
			<system-out>        font.setPointSize(16)</system-out>
		</testcase>
		<testcase name="Mutant #1470" file="npc/gui/uis/about.py" line="27">
			<system-out>        font.setBold(True)</system-out>
		</testcase>
		<testcase name="Mutant #1471" file="npc/gui/uis/about.py" line="28">
			<system-out>        font.setItalic(True)</system-out>
		</testcase>
		<testcase name="Mutant #1472" file="npc/gui/uis/about.py" line="29">
			<system-out>        font.setWeight(75)</system-out>
		</testcase>
		<testcase name="Mutant #1473" file="npc/gui/uis/about.py" line="33">
			<system-out>        self.labelProgName.setObjectName(&quot;labelProgName&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1474" file="npc/gui/uis/about.py" line="34">
			<system-out>        self.labelHelpText = QtWidgets.QLabel(AboutDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1475" file="npc/gui/uis/about.py" line="35">
			<system-out>        self.labelHelpText.setGeometry(QtCore.QRect(10, 60, 251, 81))</system-out>
		</testcase>
		<testcase name="Mutant #1476" file="npc/gui/uis/about.py" line="35">
			<system-out>        self.labelHelpText.setGeometry(QtCore.QRect(10, 60, 251, 81))</system-out>
		</testcase>
		<testcase name="Mutant #1477" file="npc/gui/uis/about.py" line="35">
			<system-out>        self.labelHelpText.setGeometry(QtCore.QRect(10, 60, 251, 81))</system-out>
		</testcase>
		<testcase name="Mutant #1478" file="npc/gui/uis/about.py" line="35">
			<system-out>        self.labelHelpText.setGeometry(QtCore.QRect(10, 60, 251, 81))</system-out>
		</testcase>
		<testcase name="Mutant #1479" file="npc/gui/uis/about.py" line="36">
			<system-out>        self.labelHelpText.setObjectName(&quot;labelHelpText&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1480" file="npc/gui/uis/about.py" line="37">
			<system-out>        self.labelVersion = QtWidgets.QLabel(AboutDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1481" file="npc/gui/uis/about.py" line="38">
			<system-out>        self.labelVersion.setGeometry(QtCore.QRect(10, 30, 121, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1482" file="npc/gui/uis/about.py" line="38">
			<system-out>        self.labelVersion.setGeometry(QtCore.QRect(10, 30, 121, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1483" file="npc/gui/uis/about.py" line="38">
			<system-out>        self.labelVersion.setGeometry(QtCore.QRect(10, 30, 121, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1484" file="npc/gui/uis/about.py" line="38">
			<system-out>        self.labelVersion.setGeometry(QtCore.QRect(10, 30, 121, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1485" file="npc/gui/uis/about.py" line="39">
			<system-out>        self.labelVersion.setObjectName(&quot;labelVersion&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1486" file="npc/gui/uis/about.py" line="47">
			<system-out>        _translate = QtCore.QCoreApplication.translate</system-out>
		</testcase>
		<testcase name="Mutant #1487" file="npc/gui/uis/about.py" line="48">
			<system-out>        AboutDialog.setWindowTitle(_translate(&quot;AboutDialog&quot;, &quot;About NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1488" file="npc/gui/uis/about.py" line="48">
			<system-out>        AboutDialog.setWindowTitle(_translate(&quot;AboutDialog&quot;, &quot;About NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1489" file="npc/gui/uis/about.py" line="49">
			<system-out>        self.labelProgName.setText(_translate(&quot;AboutDialog&quot;, &quot;NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1490" file="npc/gui/uis/about.py" line="49">
			<system-out>        self.labelProgName.setText(_translate(&quot;AboutDialog&quot;, &quot;NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1491" file="npc/gui/uis/about.py" line="50">
			<system-out>        self.labelHelpText.setText(_translate(&quot;AboutDialog&quot;, &quot;GM helper script to manage game files.\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1492" file="npc/gui/uis/about.py" line="50">
			<system-out>        self.labelHelpText.setText(_translate(&quot;AboutDialog&quot;, &quot;GM helper script to manage game files.\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1493" file="npc/gui/uis/about.py" line="51">
			<system-out>&quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1494" file="npc/gui/uis/about.py" line="52">
			<system-out>&quot;Copyright (c) 2015-2017 Peter Andrews\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1495" file="npc/gui/uis/about.py" line="53">
			<system-out>&quot;Distributed under the MIT license&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1496" file="npc/gui/uis/about.py" line="54">
			<system-out>        self.labelVersion.setText(_translate(&quot;AboutDialog&quot;, &quot;Version&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1497" file="npc/gui/uis/about.py" line="54">
			<system-out>        self.labelVersion.setText(_translate(&quot;AboutDialog&quot;, &quot;Version&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1498" file="npc/gui/uis/init_dialog.py" line="12">
			<system-out>        InitDialog.setObjectName(&quot;InitDialog&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1499" file="npc/gui/uis/init_dialog.py" line="14">
			<system-out>        InitDialog.resize(401, 441)</system-out>
		</testcase>
		<testcase name="Mutant #1500" file="npc/gui/uis/init_dialog.py" line="14">
			<system-out>        InitDialog.resize(401, 441)</system-out>
		</testcase>
		<testcase name="Mutant #1501" file="npc/gui/uis/init_dialog.py" line="15">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)</system-out>
		</testcase>
		<testcase name="Mutant #1502" file="npc/gui/uis/init_dialog.py" line="16">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1503" file="npc/gui/uis/init_dialog.py" line="17">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1504" file="npc/gui/uis/init_dialog.py" line="20">
			<system-out>        InitDialog.setModal(True)</system-out>
		</testcase>
		<testcase name="Mutant #1505" file="npc/gui/uis/init_dialog.py" line="21">
			<system-out>        self.buttonBox = QtWidgets.QDialogButtonBox(InitDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1506" file="npc/gui/uis/init_dialog.py" line="22">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 400, 381, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1507" file="npc/gui/uis/init_dialog.py" line="22">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 400, 381, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1508" file="npc/gui/uis/init_dialog.py" line="22">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 400, 381, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1509" file="npc/gui/uis/init_dialog.py" line="22">
			<system-out>        self.buttonBox.setGeometry(QtCore.QRect(10, 400, 381, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1510" file="npc/gui/uis/init_dialog.py" line="24">
			<system-out>        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)</system-out>
		</testcase>
		<testcase name="Mutant #1511" file="npc/gui/uis/init_dialog.py" line="25">
			<system-out>        self.buttonBox.setObjectName(&quot;buttonBox&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1512" file="npc/gui/uis/init_dialog.py" line="26">
			<system-out>        self.groupBox = QtWidgets.QGroupBox(InitDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1513" file="npc/gui/uis/init_dialog.py" line="27">
			<system-out>        self.groupBox.setGeometry(QtCore.QRect(10, 10, 381, 111))</system-out>
		</testcase>
		<testcase name="Mutant #1514" file="npc/gui/uis/init_dialog.py" line="27">
			<system-out>        self.groupBox.setGeometry(QtCore.QRect(10, 10, 381, 111))</system-out>
		</testcase>
		<testcase name="Mutant #1515" file="npc/gui/uis/init_dialog.py" line="27">
			<system-out>        self.groupBox.setGeometry(QtCore.QRect(10, 10, 381, 111))</system-out>
		</testcase>
		<testcase name="Mutant #1516" file="npc/gui/uis/init_dialog.py" line="27">
			<system-out>        self.groupBox.setGeometry(QtCore.QRect(10, 10, 381, 111))</system-out>
		</testcase>
		<testcase name="Mutant #1517" file="npc/gui/uis/init_dialog.py" line="28">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)</system-out>
		</testcase>
		<testcase name="Mutant #1518" file="npc/gui/uis/init_dialog.py" line="29">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1519" file="npc/gui/uis/init_dialog.py" line="30">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1520" file="npc/gui/uis/init_dialog.py" line="34">
			<system-out>        self.groupBox.setObjectName(&quot;groupBox&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1521" file="npc/gui/uis/init_dialog.py" line="35">
			<system-out>        self.checkBoxCreateTypes = QtWidgets.QCheckBox(self.groupBox)</system-out>
		</testcase>
		<testcase name="Mutant #1522" file="npc/gui/uis/init_dialog.py" line="36">
			<system-out>        self.checkBoxCreateTypes.setGeometry(QtCore.QRect(20, 70, 211, 22))</system-out>
		</testcase>
		<testcase name="Mutant #1523" file="npc/gui/uis/init_dialog.py" line="36">
			<system-out>        self.checkBoxCreateTypes.setGeometry(QtCore.QRect(20, 70, 211, 22))</system-out>
		</testcase>
		<testcase name="Mutant #1524" file="npc/gui/uis/init_dialog.py" line="36">
			<system-out>        self.checkBoxCreateTypes.setGeometry(QtCore.QRect(20, 70, 211, 22))</system-out>
		</testcase>
		<testcase name="Mutant #1525" file="npc/gui/uis/init_dialog.py" line="36">
			<system-out>        self.checkBoxCreateTypes.setGeometry(QtCore.QRect(20, 70, 211, 22))</system-out>
		</testcase>
		<testcase name="Mutant #1526" file="npc/gui/uis/init_dialog.py" line="37">
			<system-out>        self.checkBoxCreateTypes.setObjectName(&quot;checkBoxCreateTypes&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1527" file="npc/gui/uis/init_dialog.py" line="38">
			<system-out>        self.initCampaignTitle = QtWidgets.QLineEdit(self.groupBox)</system-out>
		</testcase>
		<testcase name="Mutant #1528" file="npc/gui/uis/init_dialog.py" line="39">
			<system-out>        self.initCampaignTitle.setGeometry(QtCore.QRect(120, 30, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1529" file="npc/gui/uis/init_dialog.py" line="39">
			<system-out>        self.initCampaignTitle.setGeometry(QtCore.QRect(120, 30, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1530" file="npc/gui/uis/init_dialog.py" line="39">
			<system-out>        self.initCampaignTitle.setGeometry(QtCore.QRect(120, 30, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1531" file="npc/gui/uis/init_dialog.py" line="39">
			<system-out>        self.initCampaignTitle.setGeometry(QtCore.QRect(120, 30, 241, 32))</system-out>
		</testcase>
		<testcase name="Mutant #1532" file="npc/gui/uis/init_dialog.py" line="40">
			<system-out>        self.initCampaignTitle.setObjectName(&quot;initCampaignTitle&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1533" file="npc/gui/uis/init_dialog.py" line="41">
			<system-out>        self.label = QtWidgets.QLabel(self.groupBox)</system-out>
		</testcase>
		<testcase name="Mutant #1534" file="npc/gui/uis/init_dialog.py" line="42">
			<system-out>        self.label.setGeometry(QtCore.QRect(20, 30, 101, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1535" file="npc/gui/uis/init_dialog.py" line="42">
			<system-out>        self.label.setGeometry(QtCore.QRect(20, 30, 101, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1536" file="npc/gui/uis/init_dialog.py" line="42">
			<system-out>        self.label.setGeometry(QtCore.QRect(20, 30, 101, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1537" file="npc/gui/uis/init_dialog.py" line="42">
			<system-out>        self.label.setGeometry(QtCore.QRect(20, 30, 101, 31))</system-out>
		</testcase>
		<testcase name="Mutant #1538" file="npc/gui/uis/init_dialog.py" line="43">
			<system-out>        self.label.setObjectName(&quot;label&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1539" file="npc/gui/uis/init_dialog.py" line="44">
			<system-out>        self.frame_2 = QtWidgets.QFrame(InitDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1540" file="npc/gui/uis/init_dialog.py" line="45">
			<system-out>        self.frame_2.setGeometry(QtCore.QRect(10, 130, 381, 261))</system-out>
		</testcase>
		<testcase name="Mutant #1541" file="npc/gui/uis/init_dialog.py" line="45">
			<system-out>        self.frame_2.setGeometry(QtCore.QRect(10, 130, 381, 261))</system-out>
		</testcase>
		<testcase name="Mutant #1542" file="npc/gui/uis/init_dialog.py" line="45">
			<system-out>        self.frame_2.setGeometry(QtCore.QRect(10, 130, 381, 261))</system-out>
		</testcase>
		<testcase name="Mutant #1543" file="npc/gui/uis/init_dialog.py" line="45">
			<system-out>        self.frame_2.setGeometry(QtCore.QRect(10, 130, 381, 261))</system-out>
		</testcase>
		<testcase name="Mutant #1544" file="npc/gui/uis/init_dialog.py" line="46">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)</system-out>
		</testcase>
		<testcase name="Mutant #1545" file="npc/gui/uis/init_dialog.py" line="47">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1546" file="npc/gui/uis/init_dialog.py" line="48">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1547" file="npc/gui/uis/init_dialog.py" line="51">
			<system-out>        self.frame_2.setObjectName(&quot;frame_2&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1548" file="npc/gui/uis/init_dialog.py" line="52">
			<system-out>        self.initFoldersToCreate = QtWidgets.QTextBrowser(self.frame_2)</system-out>
		</testcase>
		<testcase name="Mutant #1549" file="npc/gui/uis/init_dialog.py" line="53">
			<system-out>        self.initFoldersToCreate.setGeometry(QtCore.QRect(0, 41, 381, 211))</system-out>
		</testcase>
		<testcase name="Mutant #1550" file="npc/gui/uis/init_dialog.py" line="53">
			<system-out>        self.initFoldersToCreate.setGeometry(QtCore.QRect(0, 41, 381, 211))</system-out>
		</testcase>
		<testcase name="Mutant #1551" file="npc/gui/uis/init_dialog.py" line="53">
			<system-out>        self.initFoldersToCreate.setGeometry(QtCore.QRect(0, 41, 381, 211))</system-out>
		</testcase>
		<testcase name="Mutant #1552" file="npc/gui/uis/init_dialog.py" line="53">
			<system-out>        self.initFoldersToCreate.setGeometry(QtCore.QRect(0, 41, 381, 211))</system-out>
		</testcase>
		<testcase name="Mutant #1553" file="npc/gui/uis/init_dialog.py" line="54">
			<system-out>        self.initFoldersToCreate.setObjectName(&quot;initFoldersToCreate&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1554" file="npc/gui/uis/init_dialog.py" line="55">
			<system-out>        self.label_2 = QtWidgets.QLabel(self.frame_2)</system-out>
		</testcase>
		<testcase name="Mutant #1555" file="npc/gui/uis/init_dialog.py" line="56">
			<system-out>        self.label_2.setGeometry(QtCore.QRect(0, 10, 191, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1556" file="npc/gui/uis/init_dialog.py" line="56">
			<system-out>        self.label_2.setGeometry(QtCore.QRect(0, 10, 191, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1557" file="npc/gui/uis/init_dialog.py" line="56">
			<system-out>        self.label_2.setGeometry(QtCore.QRect(0, 10, 191, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1558" file="npc/gui/uis/init_dialog.py" line="56">
			<system-out>        self.label_2.setGeometry(QtCore.QRect(0, 10, 191, 18))</system-out>
		</testcase>
		<testcase name="Mutant #1559" file="npc/gui/uis/init_dialog.py" line="57">
			<system-out>        self.label_2.setObjectName(&quot;label_2&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1560" file="npc/gui/uis/init_dialog.py" line="66">
			<system-out>        _translate = QtCore.QCoreApplication.translate</system-out>
		</testcase>
		<testcase name="Mutant #1561" file="npc/gui/uis/init_dialog.py" line="67">
			<system-out>        InitDialog.setWindowTitle(_translate(&quot;InitDialog&quot;, &quot;Campaign Setup&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1562" file="npc/gui/uis/init_dialog.py" line="67">
			<system-out>        InitDialog.setWindowTitle(_translate(&quot;InitDialog&quot;, &quot;Campaign Setup&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1563" file="npc/gui/uis/init_dialog.py" line="68">
			<system-out>        self.groupBox.setTitle(_translate(&quot;InitDialog&quot;, &quot;Options&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1564" file="npc/gui/uis/init_dialog.py" line="68">
			<system-out>        self.groupBox.setTitle(_translate(&quot;InitDialog&quot;, &quot;Options&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1565" file="npc/gui/uis/init_dialog.py" line="69">
			<system-out>        self.checkBoxCreateTypes.setText(_translate(&quot;InitDialog&quot;, &quot;Create character type &amp;folders&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1566" file="npc/gui/uis/init_dialog.py" line="69">
			<system-out>        self.checkBoxCreateTypes.setText(_translate(&quot;InitDialog&quot;, &quot;Create character type &amp;folders&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1567" file="npc/gui/uis/init_dialog.py" line="70">
			<system-out>        self.initCampaignTitle.setToolTip(_translate(&quot;InitDialog&quot;, &quot;Title for this campaign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1568" file="npc/gui/uis/init_dialog.py" line="70">
			<system-out>        self.initCampaignTitle.setToolTip(_translate(&quot;InitDialog&quot;, &quot;Title for this campaign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1569" file="npc/gui/uis/init_dialog.py" line="71">
			<system-out>        self.label.setText(_translate(&quot;InitDialog&quot;, &quot;Campaign &amp;Title:&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1570" file="npc/gui/uis/init_dialog.py" line="71">
			<system-out>        self.label.setText(_translate(&quot;InitDialog&quot;, &quot;Campaign &amp;Title:&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1571" file="npc/gui/uis/init_dialog.py" line="72">
			<system-out>        self.label_2.setText(_translate(&quot;InitDialog&quot;, &quot;These folders will be created:&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1572" file="npc/gui/uis/init_dialog.py" line="72">
			<system-out>        self.label_2.setText(_translate(&quot;InitDialog&quot;, &quot;These folders will be created:&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1573" file="npc/gui/uis/images_rc.py" line="10">
			<system-out>qt_resource_data = b&quot;\</system-out>
		</testcase>
		<testcase name="Mutant #1574" file="npc/gui/uis/images_rc.py" line="10">
			<system-out>qt_resource_data = b&quot;\</system-out>
		</testcase>
		<testcase name="Mutant #1575" file="npc/gui/uis/images_rc.py" line="388">
			<system-out>qt_resource_name = b&quot;\</system-out>
		</testcase>
		<testcase name="Mutant #1576" file="npc/gui/uis/images_rc.py" line="388">
			<system-out>qt_resource_name = b&quot;\</system-out>
		</testcase>
		<testcase name="Mutant #1577" file="npc/gui/uis/images_rc.py" line="438">
			<system-out>qt_resource_struct = b&quot;\</system-out>
		</testcase>
		<testcase name="Mutant #1578" file="npc/gui/uis/images_rc.py" line="438">
			<system-out>qt_resource_struct = b&quot;\</system-out>
		</testcase>
		<testcase name="Mutant #1579" file="npc/gui/uis/images_rc.py" line="454">
			<system-out>    QtCore.qRegisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)</system-out>
		</testcase>
		<testcase name="Mutant #1580" file="npc/gui/uis/images_rc.py" line="457">
			<system-out>    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)</system-out>
		</testcase>
		<testcase name="Mutant #1581" file="npc/gui/uis/main_window.py" line="12">
			<system-out>        MainWindow.setObjectName(&quot;MainWindow&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1582" file="npc/gui/uis/main_window.py" line="13">
			<system-out>        MainWindow.resize(417, 392)</system-out>
		</testcase>
		<testcase name="Mutant #1583" file="npc/gui/uis/main_window.py" line="13">
			<system-out>        MainWindow.resize(417, 392)</system-out>
		</testcase>
		<testcase name="Mutant #1584" file="npc/gui/uis/main_window.py" line="14">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)</system-out>
		</testcase>
		<testcase name="Mutant #1585" file="npc/gui/uis/main_window.py" line="15">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1586" file="npc/gui/uis/main_window.py" line="16">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1587" file="npc/gui/uis/main_window.py" line="19">
			<system-out>        MainWindow.setMinimumSize(QtCore.QSize(417, 392))</system-out>
		</testcase>
		<testcase name="Mutant #1588" file="npc/gui/uis/main_window.py" line="19">
			<system-out>        MainWindow.setMinimumSize(QtCore.QSize(417, 392))</system-out>
		</testcase>
		<testcase name="Mutant #1589" file="npc/gui/uis/main_window.py" line="20">
			<system-out>        self.centralwidget = QtWidgets.QWidget(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1590" file="npc/gui/uis/main_window.py" line="21">
			<system-out>        self.centralwidget.setObjectName(&quot;centralwidget&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1591" file="npc/gui/uis/main_window.py" line="22">
			<system-out>        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)</system-out>
		</testcase>
		<testcase name="Mutant #1592" file="npc/gui/uis/main_window.py" line="23">
			<system-out>        self.verticalLayout.setObjectName(&quot;verticalLayout&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1593" file="npc/gui/uis/main_window.py" line="24">
			<system-out>        self.characterSearch = QtWidgets.QLineEdit(self.centralwidget)</system-out>
		</testcase>
		<testcase name="Mutant #1594" file="npc/gui/uis/main_window.py" line="25">
			<system-out>        self.characterSearch.setClearButtonEnabled(True)</system-out>
		</testcase>
		<testcase name="Mutant #1595" file="npc/gui/uis/main_window.py" line="26">
			<system-out>        self.characterSearch.setObjectName(&quot;characterSearch&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1596" file="npc/gui/uis/main_window.py" line="28">
			<system-out>        self.characterTableView = QtWidgets.QTableView(self.centralwidget)</system-out>
		</testcase>
		<testcase name="Mutant #1597" file="npc/gui/uis/main_window.py" line="29">
			<system-out>        self.characterTableView.setStyleSheet(&quot;QTableView::item {\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1598" file="npc/gui/uis/main_window.py" line="30">
			<system-out>&quot;  padding: 0 6px;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1599" file="npc/gui/uis/main_window.py" line="31">
			<system-out>&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1600" file="npc/gui/uis/main_window.py" line="32">
			<system-out>        self.characterTableView.setAlternatingRowColors(True)</system-out>
		</testcase>
		<testcase name="Mutant #1601" file="npc/gui/uis/main_window.py" line="34">
			<system-out>        self.characterTableView.setShowGrid(False)</system-out>
		</testcase>
		<testcase name="Mutant #1602" file="npc/gui/uis/main_window.py" line="35">
			<system-out>        self.characterTableView.setObjectName(&quot;characterTableView&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1603" file="npc/gui/uis/main_window.py" line="36">
			<system-out>        self.characterTableView.verticalHeader().setVisible(False)</system-out>
		</testcase>
		<testcase name="Mutant #1604" file="npc/gui/uis/main_window.py" line="39">
			<system-out>        self.menubar = QtWidgets.QMenuBar(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1605" file="npc/gui/uis/main_window.py" line="40">
			<system-out>        self.menubar.setGeometry(QtCore.QRect(0, 0, 417, 30))</system-out>
		</testcase>
		<testcase name="Mutant #1606" file="npc/gui/uis/main_window.py" line="40">
			<system-out>        self.menubar.setGeometry(QtCore.QRect(0, 0, 417, 30))</system-out>
		</testcase>
		<testcase name="Mutant #1607" file="npc/gui/uis/main_window.py" line="40">
			<system-out>        self.menubar.setGeometry(QtCore.QRect(0, 0, 417, 30))</system-out>
		</testcase>
		<testcase name="Mutant #1608" file="npc/gui/uis/main_window.py" line="40">
			<system-out>        self.menubar.setGeometry(QtCore.QRect(0, 0, 417, 30))</system-out>
		</testcase>
		<testcase name="Mutant #1609" file="npc/gui/uis/main_window.py" line="41">
			<system-out>        self.menubar.setObjectName(&quot;menubar&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1610" file="npc/gui/uis/main_window.py" line="42">
			<system-out>        self.menuFile = QtWidgets.QMenu(self.menubar)</system-out>
		</testcase>
		<testcase name="Mutant #1611" file="npc/gui/uis/main_window.py" line="44">
			<system-out>        self.menuFile.setObjectName(&quot;menuFile&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1612" file="npc/gui/uis/main_window.py" line="45">
			<system-out>        self.menuOpen_Recent_Campaign = QtWidgets.QMenu(self.menuFile)</system-out>
		</testcase>
		<testcase name="Mutant #1613" file="npc/gui/uis/main_window.py" line="46">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;document-open-recent&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1614" file="npc/gui/uis/main_window.py" line="46">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;document-open-recent&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1615" file="npc/gui/uis/main_window.py" line="48">
			<system-out>        self.menuOpen_Recent_Campaign.setObjectName(&quot;menuOpen_Recent_Campaign&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1616" file="npc/gui/uis/main_window.py" line="49">
			<system-out>        self.menuHelp = QtWidgets.QMenu(self.menubar)</system-out>
		</testcase>
		<testcase name="Mutant #1617" file="npc/gui/uis/main_window.py" line="50">
			<system-out>        self.menuHelp.setObjectName(&quot;menuHelp&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1618" file="npc/gui/uis/main_window.py" line="51">
			<system-out>        self.menuCampaign = QtWidgets.QMenu(self.menubar)</system-out>
		</testcase>
		<testcase name="Mutant #1619" file="npc/gui/uis/main_window.py" line="52">
			<system-out>        self.menuCampaign.setObjectName(&quot;menuCampaign&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1620" file="npc/gui/uis/main_window.py" line="54">
			<system-out>        self.statusbar = QtWidgets.QStatusBar(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1621" file="npc/gui/uis/main_window.py" line="55">
			<system-out>        self.statusbar.setObjectName(&quot;statusbar&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1622" file="npc/gui/uis/main_window.py" line="57">
			<system-out>        self.actionAbout = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1623" file="npc/gui/uis/main_window.py" line="58">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;help-about&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1624" file="npc/gui/uis/main_window.py" line="58">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;help-about&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1625" file="npc/gui/uis/main_window.py" line="60">
			<system-out>        self.actionAbout.setObjectName(&quot;actionAbout&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1626" file="npc/gui/uis/main_window.py" line="61">
			<system-out>        self.actionQuit = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1627" file="npc/gui/uis/main_window.py" line="62">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;application-exit&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1628" file="npc/gui/uis/main_window.py" line="62">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;application-exit&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1629" file="npc/gui/uis/main_window.py" line="64">
			<system-out>        self.actionQuit.setObjectName(&quot;actionQuit&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1630" file="npc/gui/uis/main_window.py" line="65">
			<system-out>        self.actionUserSettings = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1631" file="npc/gui/uis/main_window.py" line="66">
			<system-out>        self.actionUserSettings.setObjectName(&quot;actionUserSettings&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1632" file="npc/gui/uis/main_window.py" line="67">
			<system-out>        self.actionOpenCampaign = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1633" file="npc/gui/uis/main_window.py" line="68">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;folder-open&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1634" file="npc/gui/uis/main_window.py" line="68">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;folder-open&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1635" file="npc/gui/uis/main_window.py" line="70">
			<system-out>        self.actionOpenCampaign.setObjectName(&quot;actionOpenCampaign&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1636" file="npc/gui/uis/main_window.py" line="71">
			<system-out>        self.actionCampaignSettings = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1637" file="npc/gui/uis/main_window.py" line="72">
			<system-out>        self.actionCampaignSettings.setObjectName(&quot;actionCampaignSettings&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1638" file="npc/gui/uis/main_window.py" line="73">
			<system-out>        self.actionReloadSettings = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1639" file="npc/gui/uis/main_window.py" line="74">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;view-refresh&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1640" file="npc/gui/uis/main_window.py" line="74">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;view-refresh&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1641" file="npc/gui/uis/main_window.py" line="76">
			<system-out>        self.actionReloadSettings.setObjectName(&quot;actionReloadSettings&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1642" file="npc/gui/uis/main_window.py" line="77">
			<system-out>        self.actionInit = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1643" file="npc/gui/uis/main_window.py" line="78">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;journal-new&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1644" file="npc/gui/uis/main_window.py" line="78">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;journal-new&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1645" file="npc/gui/uis/main_window.py" line="80">
			<system-out>        self.actionInit.setObjectName(&quot;actionInit&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1646" file="npc/gui/uis/main_window.py" line="81">
			<system-out>        self.actionNew_Character = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1647" file="npc/gui/uis/main_window.py" line="82">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;list-add-user&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1648" file="npc/gui/uis/main_window.py" line="82">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;list-add-user&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1649" file="npc/gui/uis/main_window.py" line="84">
			<system-out>        self.actionNew_Character.setObjectName(&quot;actionNew_Character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1650" file="npc/gui/uis/main_window.py" line="85">
			<system-out>        self.actionNew_Session = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1651" file="npc/gui/uis/main_window.py" line="86">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;document-new&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1652" file="npc/gui/uis/main_window.py" line="86">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;document-new&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1653" file="npc/gui/uis/main_window.py" line="88">
			<system-out>        self.actionNew_Session.setObjectName(&quot;actionNew_Session&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1654" file="npc/gui/uis/main_window.py" line="89">
			<system-out>        self.actionClear_Recent_Campaigns = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1655" file="npc/gui/uis/main_window.py" line="90">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;edit-clear&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1656" file="npc/gui/uis/main_window.py" line="90">
			<system-out>        icon = QtGui.QIcon.fromTheme(&quot;edit-clear&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1657" file="npc/gui/uis/main_window.py" line="92">
			<system-out>        self.actionClear_Recent_Campaigns.setObjectName(&quot;actionClear_Recent_Campaigns&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1658" file="npc/gui/uis/main_window.py" line="93">
			<system-out>        self.actionLatest_Plot = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1659" file="npc/gui/uis/main_window.py" line="94">
			<system-out>        self.actionLatest_Plot.setObjectName(&quot;actionLatest_Plot&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1660" file="npc/gui/uis/main_window.py" line="95">
			<system-out>        self.actionLatest_Session = QtWidgets.QAction(MainWindow)</system-out>
		</testcase>
		<testcase name="Mutant #1661" file="npc/gui/uis/main_window.py" line="96">
			<system-out>        self.actionLatest_Session.setObjectName(&quot;actionLatest_Session&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1662" file="npc/gui/uis/main_window.py" line="120">
			<system-out>        _translate = QtCore.QCoreApplication.translate</system-out>
		</testcase>
		<testcase name="Mutant #1663" file="npc/gui/uis/main_window.py" line="121">
			<system-out>        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1664" file="npc/gui/uis/main_window.py" line="121">
			<system-out>        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1665" file="npc/gui/uis/main_window.py" line="122">
			<system-out>        self.characterSearch.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Type to search instantly&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1666" file="npc/gui/uis/main_window.py" line="122">
			<system-out>        self.characterSearch.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Type to search instantly&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1667" file="npc/gui/uis/main_window.py" line="123">
			<system-out>        self.characterSearch.setPlaceholderText(_translate(&quot;MainWindow&quot;, &quot;Search for characters&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1668" file="npc/gui/uis/main_window.py" line="123">
			<system-out>        self.characterSearch.setPlaceholderText(_translate(&quot;MainWindow&quot;, &quot;Search for characters&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1669" file="npc/gui/uis/main_window.py" line="124">
			<system-out>        self.menuFile.setTitle(_translate(&quot;MainWindow&quot;, &quot;Fi&amp;le&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1670" file="npc/gui/uis/main_window.py" line="124">
			<system-out>        self.menuFile.setTitle(_translate(&quot;MainWindow&quot;, &quot;Fi&amp;le&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1671" file="npc/gui/uis/main_window.py" line="125">
			<system-out>        self.menuOpen_Recent_Campaign.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;Recent Campaigns&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1672" file="npc/gui/uis/main_window.py" line="125">
			<system-out>        self.menuOpen_Recent_Campaign.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;Recent Campaigns&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1673" file="npc/gui/uis/main_window.py" line="126">
			<system-out>        self.menuHelp.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;Help&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1674" file="npc/gui/uis/main_window.py" line="126">
			<system-out>        self.menuHelp.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;Help&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1675" file="npc/gui/uis/main_window.py" line="127">
			<system-out>        self.menuCampaign.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;Campaign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1676" file="npc/gui/uis/main_window.py" line="127">
			<system-out>        self.menuCampaign.setTitle(_translate(&quot;MainWindow&quot;, &quot;&amp;Campaign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1677" file="npc/gui/uis/main_window.py" line="128">
			<system-out>        self.actionAbout.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;About NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1678" file="npc/gui/uis/main_window.py" line="128">
			<system-out>        self.actionAbout.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;About NPC&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1679" file="npc/gui/uis/main_window.py" line="129">
			<system-out>        self.actionQuit.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;Quit&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1680" file="npc/gui/uis/main_window.py" line="129">
			<system-out>        self.actionQuit.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;Quit&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1681" file="npc/gui/uis/main_window.py" line="130">
			<system-out>        self.actionQuit.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+Q&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1682" file="npc/gui/uis/main_window.py" line="130">
			<system-out>        self.actionQuit.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+Q&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1683" file="npc/gui/uis/main_window.py" line="131">
			<system-out>        self.actionUserSettings.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;User Settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1684" file="npc/gui/uis/main_window.py" line="131">
			<system-out>        self.actionUserSettings.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;User Settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1685" file="npc/gui/uis/main_window.py" line="132">
			<system-out>        self.actionUserSettings.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open user settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1686" file="npc/gui/uis/main_window.py" line="132">
			<system-out>        self.actionUserSettings.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open user settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1687" file="npc/gui/uis/main_window.py" line="133">
			<system-out>        self.actionOpenCampaign.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;Open Campaign...&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1688" file="npc/gui/uis/main_window.py" line="133">
			<system-out>        self.actionOpenCampaign.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;Open Campaign...&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1689" file="npc/gui/uis/main_window.py" line="134">
			<system-out>        self.actionOpenCampaign.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+O&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1690" file="npc/gui/uis/main_window.py" line="134">
			<system-out>        self.actionOpenCampaign.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+O&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1691" file="npc/gui/uis/main_window.py" line="135">
			<system-out>        self.actionCampaignSettings.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;Campaign Settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1692" file="npc/gui/uis/main_window.py" line="135">
			<system-out>        self.actionCampaignSettings.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;Campaign Settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1693" file="npc/gui/uis/main_window.py" line="136">
			<system-out>        self.actionCampaignSettings.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open campaign settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1694" file="npc/gui/uis/main_window.py" line="136">
			<system-out>        self.actionCampaignSettings.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open campaign settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1695" file="npc/gui/uis/main_window.py" line="137">
			<system-out>        self.actionReloadSettings.setText(_translate(&quot;MainWindow&quot;, &quot;R&amp;eload Settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1696" file="npc/gui/uis/main_window.py" line="137">
			<system-out>        self.actionReloadSettings.setText(_translate(&quot;MainWindow&quot;, &quot;R&amp;eload Settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1697" file="npc/gui/uis/main_window.py" line="138">
			<system-out>        self.actionReloadSettings.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Reload settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1698" file="npc/gui/uis/main_window.py" line="138">
			<system-out>        self.actionReloadSettings.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Reload settings&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1699" file="npc/gui/uis/main_window.py" line="139">
			<system-out>        self.actionInit.setText(_translate(&quot;MainWindow&quot;, &quot;Set &amp;Up...&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1700" file="npc/gui/uis/main_window.py" line="139">
			<system-out>        self.actionInit.setText(_translate(&quot;MainWindow&quot;, &quot;Set &amp;Up...&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1701" file="npc/gui/uis/main_window.py" line="140">
			<system-out>        self.actionInit.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Set up required folders in this campaign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1702" file="npc/gui/uis/main_window.py" line="140">
			<system-out>        self.actionInit.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Set up required folders in this campaign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1703" file="npc/gui/uis/main_window.py" line="141">
			<system-out>        self.actionNew_Character.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;New Character...&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1704" file="npc/gui/uis/main_window.py" line="141">
			<system-out>        self.actionNew_Character.setText(_translate(&quot;MainWindow&quot;, &quot;&amp;New Character...&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1705" file="npc/gui/uis/main_window.py" line="142">
			<system-out>        self.actionNew_Character.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Create a new character&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1706" file="npc/gui/uis/main_window.py" line="142">
			<system-out>        self.actionNew_Character.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Create a new character&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1707" file="npc/gui/uis/main_window.py" line="143">
			<system-out>        self.actionNew_Character.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+N&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1708" file="npc/gui/uis/main_window.py" line="143">
			<system-out>        self.actionNew_Character.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+N&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1709" file="npc/gui/uis/main_window.py" line="144">
			<system-out>        self.actionNew_Session.setText(_translate(&quot;MainWindow&quot;, &quot;New &amp;Session&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1710" file="npc/gui/uis/main_window.py" line="144">
			<system-out>        self.actionNew_Session.setText(_translate(&quot;MainWindow&quot;, &quot;New &amp;Session&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1711" file="npc/gui/uis/main_window.py" line="145">
			<system-out>        self.actionNew_Session.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Create files for a new game session&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1712" file="npc/gui/uis/main_window.py" line="145">
			<system-out>        self.actionNew_Session.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Create files for a new game session&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1713" file="npc/gui/uis/main_window.py" line="146">
			<system-out>        self.actionNew_Session.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+Shift+N&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1714" file="npc/gui/uis/main_window.py" line="146">
			<system-out>        self.actionNew_Session.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Ctrl+Shift+N&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1715" file="npc/gui/uis/main_window.py" line="147">
			<system-out>        self.actionClear_Recent_Campaigns.setText(_translate(&quot;MainWindow&quot;, &quot;Clear Items&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1716" file="npc/gui/uis/main_window.py" line="147">
			<system-out>        self.actionClear_Recent_Campaigns.setText(_translate(&quot;MainWindow&quot;, &quot;Clear Items&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1717" file="npc/gui/uis/main_window.py" line="148">
			<system-out>        self.actionClear_Recent_Campaigns.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Clear recent campaigns&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1718" file="npc/gui/uis/main_window.py" line="148">
			<system-out>        self.actionClear_Recent_Campaigns.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Clear recent campaigns&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1719" file="npc/gui/uis/main_window.py" line="149">
			<system-out>        self.actionLatest_Plot.setText(_translate(&quot;MainWindow&quot;, &quot;Latest &amp;Plot&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1720" file="npc/gui/uis/main_window.py" line="149">
			<system-out>        self.actionLatest_Plot.setText(_translate(&quot;MainWindow&quot;, &quot;Latest &amp;Plot&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1721" file="npc/gui/uis/main_window.py" line="150">
			<system-out>        self.actionLatest_Plot.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open the latest plot file&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1722" file="npc/gui/uis/main_window.py" line="150">
			<system-out>        self.actionLatest_Plot.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open the latest plot file&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1723" file="npc/gui/uis/main_window.py" line="151">
			<system-out>        self.actionLatest_Session.setText(_translate(&quot;MainWindow&quot;, &quot;Latest &amp;Session&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1724" file="npc/gui/uis/main_window.py" line="151">
			<system-out>        self.actionLatest_Session.setText(_translate(&quot;MainWindow&quot;, &quot;Latest &amp;Session&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1725" file="npc/gui/uis/main_window.py" line="152">
			<system-out>        self.actionLatest_Session.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open the latest session file&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1726" file="npc/gui/uis/main_window.py" line="152">
			<system-out>        self.actionLatest_Session.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Open the latest session file&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1727" file="npc/gui/uis/new_character.py" line="12">
			<system-out>        NewCharacterDialog.setObjectName(&quot;NewCharacterDialog&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1728" file="npc/gui/uis/new_character.py" line="13">
			<system-out>        NewCharacterDialog.resize(450, 432)</system-out>
		</testcase>
		<testcase name="Mutant #1729" file="npc/gui/uis/new_character.py" line="13">
			<system-out>        NewCharacterDialog.resize(450, 432)</system-out>
		</testcase>
		<testcase name="Mutant #1730" file="npc/gui/uis/new_character.py" line="14">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)</system-out>
		</testcase>
		<testcase name="Mutant #1731" file="npc/gui/uis/new_character.py" line="15">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1732" file="npc/gui/uis/new_character.py" line="16">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1733" file="npc/gui/uis/new_character.py" line="19">
			<system-out>        NewCharacterDialog.setMinimumSize(QtCore.QSize(450, 382))</system-out>
		</testcase>
		<testcase name="Mutant #1734" file="npc/gui/uis/new_character.py" line="19">
			<system-out>        NewCharacterDialog.setMinimumSize(QtCore.QSize(450, 382))</system-out>
		</testcase>
		<testcase name="Mutant #1735" file="npc/gui/uis/new_character.py" line="20">
			<system-out>        NewCharacterDialog.setModal(True)</system-out>
		</testcase>
		<testcase name="Mutant #1736" file="npc/gui/uis/new_character.py" line="21">
			<system-out>        self.verticalLayout = QtWidgets.QVBoxLayout(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1737" file="npc/gui/uis/new_character.py" line="22">
			<system-out>        self.verticalLayout.setObjectName(&quot;verticalLayout&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1738" file="npc/gui/uis/new_character.py" line="23">
			<system-out>        self.infoForm = QtWidgets.QFormLayout()</system-out>
		</testcase>
		<testcase name="Mutant #1739" file="npc/gui/uis/new_character.py" line="25">
			<system-out>        self.infoForm.setObjectName(&quot;infoForm&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1740" file="npc/gui/uis/new_character.py" line="26">
			<system-out>        self.typeLabel = QtWidgets.QLabel(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1741" file="npc/gui/uis/new_character.py" line="27">
			<system-out>        self.typeLabel.setObjectName(&quot;typeLabel&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1742" file="npc/gui/uis/new_character.py" line="28">
			<system-out>        self.infoForm.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.typeLabel)</system-out>
		</testcase>
		<testcase name="Mutant #1743" file="npc/gui/uis/new_character.py" line="29">
			<system-out>        self.typeSelect = QtWidgets.QComboBox(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1744" file="npc/gui/uis/new_character.py" line="30">
			<system-out>        self.typeSelect.setObjectName(&quot;typeSelect&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1745" file="npc/gui/uis/new_character.py" line="31">
			<system-out>        self.infoForm.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.typeSelect)</system-out>
		</testcase>
		<testcase name="Mutant #1746" file="npc/gui/uis/new_character.py" line="32">
			<system-out>        self.nameLine = QtWidgets.QLabel(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1747" file="npc/gui/uis/new_character.py" line="33">
			<system-out>        self.nameLine.setObjectName(&quot;nameLine&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1748" file="npc/gui/uis/new_character.py" line="34">
			<system-out>        self.infoForm.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.nameLine)</system-out>
		</testcase>
		<testcase name="Mutant #1749" file="npc/gui/uis/new_character.py" line="35">
			<system-out>        self.characterName = QtWidgets.QLineEdit(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1750" file="npc/gui/uis/new_character.py" line="36">
			<system-out>        self.characterName.setObjectName(&quot;characterName&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1751" file="npc/gui/uis/new_character.py" line="37">
			<system-out>        self.infoForm.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.characterName)</system-out>
		</testcase>
		<testcase name="Mutant #1752" file="npc/gui/uis/new_character.py" line="38">
			<system-out>        self.groupLabel = QtWidgets.QLabel(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1753" file="npc/gui/uis/new_character.py" line="39">
			<system-out>        self.groupLabel.setObjectName(&quot;groupLabel&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1754" file="npc/gui/uis/new_character.py" line="40">
			<system-out>        self.infoForm.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.groupLabel)</system-out>
		</testcase>
		<testcase name="Mutant #1755" file="npc/gui/uis/new_character.py" line="41">
			<system-out>        self.groupName = QtWidgets.QLineEdit(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1756" file="npc/gui/uis/new_character.py" line="42">
			<system-out>        self.groupName.setObjectName(&quot;groupName&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1757" file="npc/gui/uis/new_character.py" line="43">
			<system-out>        self.infoForm.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.groupName)</system-out>
		</testcase>
		<testcase name="Mutant #1758" file="npc/gui/uis/new_character.py" line="44">
			<system-out>        self.locLabel = QtWidgets.QLabel(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1759" file="npc/gui/uis/new_character.py" line="45">
			<system-out>        self.locLabel.setObjectName(&quot;locLabel&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1760" file="npc/gui/uis/new_character.py" line="46">
			<system-out>        self.infoForm.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.locLabel)</system-out>
		</testcase>
		<testcase name="Mutant #1761" file="npc/gui/uis/new_character.py" line="47">
			<system-out>        self.locName = QtWidgets.QLineEdit(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1762" file="npc/gui/uis/new_character.py" line="48">
			<system-out>        self.locName.setObjectName(&quot;locName&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1763" file="npc/gui/uis/new_character.py" line="49">
			<system-out>        self.infoForm.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.locName)</system-out>
		</testcase>
		<testcase name="Mutant #1764" file="npc/gui/uis/new_character.py" line="51">
			<system-out>        self.foreignBox = QtWidgets.QGroupBox(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1765" file="npc/gui/uis/new_character.py" line="52">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)</system-out>
		</testcase>
		<testcase name="Mutant #1766" file="npc/gui/uis/new_character.py" line="53">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1767" file="npc/gui/uis/new_character.py" line="54">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1768" file="npc/gui/uis/new_character.py" line="57">
			<system-out>        self.foreignBox.setMinimumSize(QtCore.QSize(0, 71))</system-out>
		</testcase>
		<testcase name="Mutant #1769" file="npc/gui/uis/new_character.py" line="57">
			<system-out>        self.foreignBox.setMinimumSize(QtCore.QSize(0, 71))</system-out>
		</testcase>
		<testcase name="Mutant #1770" file="npc/gui/uis/new_character.py" line="58">
			<system-out>        self.foreignBox.setCheckable(True)</system-out>
		</testcase>
		<testcase name="Mutant #1771" file="npc/gui/uis/new_character.py" line="59">
			<system-out>        self.foreignBox.setChecked(False)</system-out>
		</testcase>
		<testcase name="Mutant #1772" file="npc/gui/uis/new_character.py" line="60">
			<system-out>        self.foreignBox.setObjectName(&quot;foreignBox&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1773" file="npc/gui/uis/new_character.py" line="61">
			<system-out>        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.foreignBox)</system-out>
		</testcase>
		<testcase name="Mutant #1774" file="npc/gui/uis/new_character.py" line="62">
			<system-out>        self.verticalLayout_2.setObjectName(&quot;verticalLayout_2&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1775" file="npc/gui/uis/new_character.py" line="63">
			<system-out>        self.foreignText = QtWidgets.QLineEdit(self.foreignBox)</system-out>
		</testcase>
		<testcase name="Mutant #1776" file="npc/gui/uis/new_character.py" line="64">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)</system-out>
		</testcase>
		<testcase name="Mutant #1777" file="npc/gui/uis/new_character.py" line="65">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1778" file="npc/gui/uis/new_character.py" line="66">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1779" file="npc/gui/uis/new_character.py" line="69">
			<system-out>        self.foreignText.setClearButtonEnabled(True)</system-out>
		</testcase>
		<testcase name="Mutant #1780" file="npc/gui/uis/new_character.py" line="70">
			<system-out>        self.foreignText.setObjectName(&quot;foreignText&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1781" file="npc/gui/uis/new_character.py" line="73">
			<system-out>        self.deceasedBox = QtWidgets.QGroupBox(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1782" file="npc/gui/uis/new_character.py" line="74">
			<system-out>        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)</system-out>
		</testcase>
		<testcase name="Mutant #1783" file="npc/gui/uis/new_character.py" line="75">
			<system-out>        sizePolicy.setHorizontalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1784" file="npc/gui/uis/new_character.py" line="76">
			<system-out>        sizePolicy.setVerticalStretch(0)</system-out>
		</testcase>
		<testcase name="Mutant #1785" file="npc/gui/uis/new_character.py" line="79">
			<system-out>        self.deceasedBox.setMinimumSize(QtCore.QSize(0, 116))</system-out>
		</testcase>
		<testcase name="Mutant #1786" file="npc/gui/uis/new_character.py" line="79">
			<system-out>        self.deceasedBox.setMinimumSize(QtCore.QSize(0, 116))</system-out>
		</testcase>
		<testcase name="Mutant #1787" file="npc/gui/uis/new_character.py" line="80">
			<system-out>        self.deceasedBox.setCheckable(True)</system-out>
		</testcase>
		<testcase name="Mutant #1788" file="npc/gui/uis/new_character.py" line="81">
			<system-out>        self.deceasedBox.setChecked(False)</system-out>
		</testcase>
		<testcase name="Mutant #1789" file="npc/gui/uis/new_character.py" line="82">
			<system-out>        self.deceasedBox.setObjectName(&quot;deceasedBox&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1790" file="npc/gui/uis/new_character.py" line="83">
			<system-out>        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.deceasedBox)</system-out>
		</testcase>
		<testcase name="Mutant #1791" file="npc/gui/uis/new_character.py" line="84">
			<system-out>        self.verticalLayout_3.setObjectName(&quot;verticalLayout_3&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1792" file="npc/gui/uis/new_character.py" line="85">
			<system-out>        self.deceasedText = QtWidgets.QPlainTextEdit(self.deceasedBox)</system-out>
		</testcase>
		<testcase name="Mutant #1793" file="npc/gui/uis/new_character.py" line="87">
			<system-out>        self.deceasedText.setObjectName(&quot;deceasedText&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1794" file="npc/gui/uis/new_character.py" line="90">
			<system-out>        self.buttonBox = QtWidgets.QDialogButtonBox(NewCharacterDialog)</system-out>
		</testcase>
		<testcase name="Mutant #1795" file="npc/gui/uis/new_character.py" line="91">
			<system-out>        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)</system-out>
		</testcase>
		<testcase name="Mutant #1796" file="npc/gui/uis/new_character.py" line="92">
			<system-out>        self.buttonBox.setObjectName(&quot;buttonBox&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1797" file="npc/gui/uis/new_character.py" line="111">
			<system-out>        _translate = QtCore.QCoreApplication.translate</system-out>
		</testcase>
		<testcase name="Mutant #1798" file="npc/gui/uis/new_character.py" line="112">
			<system-out>        NewCharacterDialog.setWindowTitle(_translate(&quot;NewCharacterDialog&quot;, &quot;New Character&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1799" file="npc/gui/uis/new_character.py" line="112">
			<system-out>        NewCharacterDialog.setWindowTitle(_translate(&quot;NewCharacterDialog&quot;, &quot;New Character&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1800" file="npc/gui/uis/new_character.py" line="113">
			<system-out>        self.typeLabel.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;T&amp;ype&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1801" file="npc/gui/uis/new_character.py" line="113">
			<system-out>        self.typeLabel.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;T&amp;ype&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1802" file="npc/gui/uis/new_character.py" line="114">
			<system-out>        self.typeSelect.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;Type of character. Determines which fields are available.&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1803" file="npc/gui/uis/new_character.py" line="114">
			<system-out>        self.typeSelect.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;Type of character. Determines which fields are available.&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1804" file="npc/gui/uis/new_character.py" line="115">
			<system-out>        self.nameLine.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;&amp;Name&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1805" file="npc/gui/uis/new_character.py" line="115">
			<system-out>        self.nameLine.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;&amp;Name&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1806" file="npc/gui/uis/new_character.py" line="116">
			<system-out>        self.characterName.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;The character\'s name. Use \' - \' to add a brief note.&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1807" file="npc/gui/uis/new_character.py" line="116">
			<system-out>        self.characterName.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;The character\'s name. Use \' - \' to add a brief note.&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1808" file="npc/gui/uis/new_character.py" line="117">
			<system-out>        self.groupLabel.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;&amp;Group&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1809" file="npc/gui/uis/new_character.py" line="117">
			<system-out>        self.groupLabel.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;&amp;Group&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1810" file="npc/gui/uis/new_character.py" line="118">
			<system-out>        self.groupName.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;Main group that the character belongs to&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1811" file="npc/gui/uis/new_character.py" line="118">
			<system-out>        self.groupName.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;Main group that the character belongs to&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1812" file="npc/gui/uis/new_character.py" line="119">
			<system-out>        self.locLabel.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;Location&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1813" file="npc/gui/uis/new_character.py" line="119">
			<system-out>        self.locLabel.setText(_translate(&quot;NewCharacterDialog&quot;, &quot;Location&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1814" file="npc/gui/uis/new_character.py" line="120">
			<system-out>        self.locName.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;Place where the character lives within the main setting&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1815" file="npc/gui/uis/new_character.py" line="120">
			<system-out>        self.locName.setToolTip(_translate(&quot;NewCharacterDialog&quot;, &quot;Place where the character lives within the main setting&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1816" file="npc/gui/uis/new_character.py" line="121">
			<system-out>        self.foreignBox.setTitle(_translate(&quot;NewCharacterDialog&quot;, &quot;Fore&amp;ign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1817" file="npc/gui/uis/new_character.py" line="121">
			<system-out>        self.foreignBox.setTitle(_translate(&quot;NewCharacterDialog&quot;, &quot;Fore&amp;ign&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1818" file="npc/gui/uis/new_character.py" line="122">
			<system-out>        self.foreignText.setPlaceholderText(_translate(&quot;NewCharacterDialog&quot;, &quot;Where do they live?&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1819" file="npc/gui/uis/new_character.py" line="122">
			<system-out>        self.foreignText.setPlaceholderText(_translate(&quot;NewCharacterDialog&quot;, &quot;Where do they live?&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1820" file="npc/gui/uis/new_character.py" line="123">
			<system-out>        self.deceasedBox.setTitle(_translate(&quot;NewCharacterDialog&quot;, &quot;&amp;Deceased&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1821" file="npc/gui/uis/new_character.py" line="123">
			<system-out>        self.deceasedBox.setTitle(_translate(&quot;NewCharacterDialog&quot;, &quot;&amp;Deceased&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1822" file="npc/gui/uis/new_character.py" line="124">
			<system-out>        self.deceasedText.setPlaceholderText(_translate(&quot;NewCharacterDialog&quot;, &quot;How did they die?&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1823" file="npc/gui/uis/new_character.py" line="124">
			<system-out>        self.deceasedText.setPlaceholderText(_translate(&quot;NewCharacterDialog&quot;, &quot;How did they die?&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1824" file="npc/cli/commands.py" line="9">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1825" file="npc/cli/commands.py" line="9">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1826" file="npc/cli/commands.py" line="13">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1827" file="npc/cli/commands.py" line="13">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1828" file="npc/cli/commands.py" line="14">
			<system-out>    keyword_args = util.listify_args('sort_by', **keyword_args)</system-out>
		</testcase>
		<testcase name="Mutant #1829" file="npc/cli/commands.py" line="14">
			<system-out>    keyword_args = util.listify_args('sort_by', **keyword_args)</system-out>
		</testcase>
		<testcase name="Mutant #1830" file="npc/cli/commands.py" line="15">
			<system-out>    if not keyword_args['sort_by']:</system-out>
		</testcase>
		<testcase name="Mutant #1831" file="npc/cli/commands.py" line="15">
			<system-out>    if not keyword_args['sort_by']:</system-out>
		</testcase>
		<testcase name="Mutant #1832" file="npc/cli/commands.py" line="16">
			<system-out>        keyword_args.pop('sort_by')</system-out>
		</testcase>
		<testcase name="Mutant #1833" file="npc/cli/commands.py" line="20">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1834" file="npc/cli/commands.py" line="20">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1835" file="npc/cli/commands.py" line="27">
			<system-out>    serial_args, keyword_args = util.serialize_args('location', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1836" file="npc/cli/commands.py" line="27">
			<system-out>    serial_args, keyword_args = util.serialize_args('location', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1837" file="npc/cli/commands.py" line="31">
			<system-out>    serial_args, keyword_args = util.serialize_args('tags', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1838" file="npc/cli/commands.py" line="31">
			<system-out>    serial_args, keyword_args = util.serialize_args('tags', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1839" file="npc/cli/commands.py" line="35">
			<system-out>    serial_args, keyword_args = util.serialize_args('rules', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1840" file="npc/cli/commands.py" line="35">
			<system-out>    serial_args, keyword_args = util.serialize_args('rules', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1841" file="npc/cli/commands.py" line="39">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'ctype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1842" file="npc/cli/commands.py" line="39">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'ctype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1843" file="npc/cli/commands.py" line="39">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'ctype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1844" file="npc/cli/commands.py" line="43">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1845" file="npc/cli/commands.py" line="43">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1846" file="npc/cli/commands.py" line="43">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1847" file="npc/cli/commands.py" line="43">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'seeming', 'kith', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1848" file="npc/cli/commands.py" line="47">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'auspice', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1849" file="npc/cli/commands.py" line="47">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'auspice', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1850" file="npc/cli/commands.py" line="47">
			<system-out>    serial_args, keyword_args = util.serialize_args('name', 'auspice', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1851" file="npc/cli/commands.py" line="51">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1852" file="npc/cli/commands.py" line="51">
			<system-out>    serial_args, keyword_args = util.serialize_args('search', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1853" file="npc/cli/commands.py" line="52">
			<system-out>    keyword_args = util.listify_args('sort_by', 'headings', **keyword_args)</system-out>
		</testcase>
		<testcase name="Mutant #1854" file="npc/cli/commands.py" line="52">
			<system-out>    keyword_args = util.listify_args('sort_by', 'headings', **keyword_args)</system-out>
		</testcase>
		<testcase name="Mutant #1855" file="npc/cli/commands.py" line="52">
			<system-out>    keyword_args = util.listify_args('sort_by', 'headings', **keyword_args)</system-out>
		</testcase>
		<testcase name="Mutant #1856" file="npc/cli/commands.py" line="53">
			<system-out>    if not keyword_args['sort_by']:</system-out>
		</testcase>
		<testcase name="Mutant #1857" file="npc/cli/commands.py" line="53">
			<system-out>    if not keyword_args['sort_by']:</system-out>
		</testcase>
		<testcase name="Mutant #1858" file="npc/cli/commands.py" line="54">
			<system-out>        keyword_args.pop('sort_by')</system-out>
		</testcase>
		<testcase name="Mutant #1859" file="npc/cli/commands.py" line="55">
			<system-out>    if not keyword_args['headings']:</system-out>
		</testcase>
		<testcase name="Mutant #1860" file="npc/cli/commands.py" line="55">
			<system-out>    if not keyword_args['headings']:</system-out>
		</testcase>
		<testcase name="Mutant #1861" file="npc/cli/commands.py" line="56">
			<system-out>        keyword_args.pop('headings')</system-out>
		</testcase>
		<testcase name="Mutant #1862" file="npc/cli/commands.py" line="63">
			<system-out>    serial_args, keyword_args = util.serialize_args('thingtype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1863" file="npc/cli/commands.py" line="63">
			<system-out>    serial_args, keyword_args = util.serialize_args('thingtype', **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1864" file="npc/cli/core.py" line="30">
			<system-out>    parser = _make_parser()</system-out>
		</testcase>
		<testcase name="Mutant #1865" file="npc/cli/core.py" line="31">
			<system-out>    if not argv:</system-out>
		</testcase>
		<testcase name="Mutant #1866" file="npc/cli/core.py" line="32">
			<system-out>        argv = sys.argv[1:]</system-out>
		</testcase>
		<testcase name="Mutant #1867" file="npc/cli/core.py" line="32">
			<system-out>        argv = sys.argv[1:]</system-out>
		</testcase>
		<testcase name="Mutant #1868" file="npc/cli/core.py" line="33">
			<system-out>    args = parser.parse_args(argv)</system-out>
		</testcase>
		<testcase name="Mutant #1869" file="npc/cli/core.py" line="36">
			<system-out>    base = args.campaign</system-out>
		</testcase>
		<testcase name="Mutant #1870" file="npc/cli/core.py" line="37">
			<system-out>    if base == 'auto':</system-out>
		</testcase>
		<testcase name="Mutant #1871" file="npc/cli/core.py" line="37">
			<system-out>    if base == 'auto':</system-out>
		</testcase>
		<testcase name="Mutant #1872" file="npc/cli/core.py" line="38">
			<system-out>        base = util.find_campaign_root()</system-out>
		</testcase>
		<testcase name="Mutant #1873" file="npc/cli/core.py" line="41">
			<system-out>        chdir(base)</system-out>
		</testcase>
		<testcase name="Mutant #1874" file="npc/cli/core.py" line="43">
			<system-out>        util.print_err(&quot;{}: '{}'&quot;.format(err.strerror, base))</system-out>
		</testcase>
		<testcase name="Mutant #1875" file="npc/cli/core.py" line="44">
			<system-out>        return 4</system-out>
		</testcase>
		<testcase name="Mutant #1876" file="npc/cli/core.py" line="48">
			<system-out>        prefs = settings.Settings(args.debug)</system-out>
		</testcase>
		<testcase name="Mutant #1877" file="npc/cli/core.py" line="51">
			<system-out>        return 4</system-out>
		</testcase>
		<testcase name="Mutant #1878" file="npc/cli/core.py" line="53">
			<system-out>    setting_errors = settings.lint_settings(prefs)</system-out>
		</testcase>
		<testcase name="Mutant #1879" file="npc/cli/core.py" line="55">
			<system-out>        print(&quot;Error in settings&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1880" file="npc/cli/core.py" line="56">
			<system-out>        print(&quot;\n&quot;.join(setting_errors))</system-out>
		</testcase>
		<testcase name="Mutant #1881" file="npc/cli/core.py" line="57">
			<system-out>        return 5</system-out>
		</testcase>
		<testcase name="Mutant #1882" file="npc/cli/core.py" line="60">
			<system-out>    if not hasattr(args, 'func'):</system-out>
		</testcase>
		<testcase name="Mutant #1883" file="npc/cli/core.py" line="60">
			<system-out>    if not hasattr(args, 'func'):</system-out>
		</testcase>
		<testcase name="Mutant #1884" file="npc/cli/core.py" line="62">
			<system-out>        return 0</system-out>
		</testcase>
		<testcase name="Mutant #1885" file="npc/cli/core.py" line="65">
			<system-out>    full_args = vars(args)</system-out>
		</testcase>
		<testcase name="Mutant #1886" file="npc/cli/core.py" line="66">
			<system-out>    full_args['prefs'] = prefs</system-out>
		</testcase>
		<testcase name="Mutant #1887" file="npc/cli/core.py" line="66">
			<system-out>    full_args['prefs'] = prefs</system-out>
		</testcase>
		<testcase name="Mutant #1888" file="npc/cli/core.py" line="69">
			<system-out>    if full_args.get('search') is None:</system-out>
		</testcase>
		<testcase name="Mutant #1889" file="npc/cli/core.py" line="69">
			<system-out>    if full_args.get('search') is None:</system-out>
		</testcase>
		<testcase name="Mutant #1890" file="npc/cli/core.py" line="70">
			<system-out>        full_args['search'] = [prefs.get('paths.required.characters')]</system-out>
		</testcase>
		<testcase name="Mutant #1891" file="npc/cli/core.py" line="70">
			<system-out>        full_args['search'] = [prefs.get('paths.required.characters')]</system-out>
		</testcase>
		<testcase name="Mutant #1892" file="npc/cli/core.py" line="70">
			<system-out>        full_args['search'] = [prefs.get('paths.required.characters')]</system-out>
		</testcase>
		<testcase name="Mutant #1893" file="npc/cli/core.py" line="74">
			<system-out>        result = args.func(full_args)</system-out>
		</testcase>
		<testcase name="Mutant #1894" file="npc/cli/core.py" line="79">
			<system-out>        return 6</system-out>
		</testcase>
		<testcase name="Mutant #1895" file="npc/cli/core.py" line="82">
			<system-out>    if not result.success:</system-out>
		</testcase>
		<testcase name="Mutant #1896" file="npc/cli/core.py" line="86">
			<system-out>    if not args.batch:</system-out>
		</testcase>
		<testcase name="Mutant #1897" file="npc/cli/core.py" line="89">
			<system-out>            print(&quot;\n&quot;.join(result.printables))</system-out>
		</testcase>
		<testcase name="Mutant #1898" file="npc/cli/core.py" line="95">
			<system-out>    return 0</system-out>
		</testcase>
		<testcase name="Mutant #1899" file="npc/cli/core.py" line="106">
			<system-out>    character_options = argparse.ArgumentParser(add_help=False)</system-out>
		</testcase>
		<testcase name="Mutant #1900" file="npc/cli/core.py" line="106">
			<system-out>    character_options = argparse.ArgumentParser(add_help=False)</system-out>
		</testcase>
		<testcase name="Mutant #1901" file="npc/cli/core.py" line="107">
			<system-out>    character_options.add_argument('-g', '--groups', default=None, nargs=&quot;*&quot;, help='Name of a group that counts the character as a member', metavar='group')</system-out>
		</testcase>
		<testcase name="Mutant #1902" file="npc/cli/core.py" line="107">
			<system-out>    character_options.add_argument('-g', '--groups', default=None, nargs=&quot;*&quot;, help='Name of a group that counts the character as a member', metavar='group')</system-out>
		</testcase>
		<testcase name="Mutant #1903" file="npc/cli/core.py" line="107">
			<system-out>    character_options.add_argument('-g', '--groups', default=None, nargs=&quot;*&quot;, help='Name of a group that counts the character as a member', metavar='group')</system-out>
		</testcase>
		<testcase name="Mutant #1904" file="npc/cli/core.py" line="107">
			<system-out>    character_options.add_argument('-g', '--groups', default=None, nargs=&quot;*&quot;, help='Name of a group that counts the character as a member', metavar='group')</system-out>
		</testcase>
		<testcase name="Mutant #1905" file="npc/cli/core.py" line="107">
			<system-out>    character_options.add_argument('-g', '--groups', default=None, nargs=&quot;*&quot;, help='Name of a group that counts the character as a member', metavar='group')</system-out>
		</testcase>
		<testcase name="Mutant #1906" file="npc/cli/core.py" line="108">
			<system-out>    character_options.add_argument('--dead', default=False, const='', nargs='?', help='Mark that the character has died, with optional notes', metavar='notes')</system-out>
		</testcase>
		<testcase name="Mutant #1907" file="npc/cli/core.py" line="108">
			<system-out>    character_options.add_argument('--dead', default=False, const='', nargs='?', help='Mark that the character has died, with optional notes', metavar='notes')</system-out>
		</testcase>
		<testcase name="Mutant #1908" file="npc/cli/core.py" line="108">
			<system-out>    character_options.add_argument('--dead', default=False, const='', nargs='?', help='Mark that the character has died, with optional notes', metavar='notes')</system-out>
		</testcase>
		<testcase name="Mutant #1909" file="npc/cli/core.py" line="108">
			<system-out>    character_options.add_argument('--dead', default=False, const='', nargs='?', help='Mark that the character has died, with optional notes', metavar='notes')</system-out>
		</testcase>
		<testcase name="Mutant #1910" file="npc/cli/core.py" line="108">
			<system-out>    character_options.add_argument('--dead', default=False, const='', nargs='?', help='Mark that the character has died, with optional notes', metavar='notes')</system-out>
		</testcase>
		<testcase name="Mutant #1911" file="npc/cli/core.py" line="108">
			<system-out>    character_options.add_argument('--dead', default=False, const='', nargs='?', help='Mark that the character has died, with optional notes', metavar='notes')</system-out>
		</testcase>
		<testcase name="Mutant #1912" file="npc/cli/core.py" line="109">
			<system-out>    character_options.add_argument('--foreign', default=False, const='', nargs='?', help=&quot;Mark that the character is foreign to the main campaign setting, with optional notes on where they're from&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1913" file="npc/cli/core.py" line="109">
			<system-out>    character_options.add_argument('--foreign', default=False, const='', nargs='?', help=&quot;Mark that the character is foreign to the main campaign setting, with optional notes on where they're from&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1914" file="npc/cli/core.py" line="109">
			<system-out>    character_options.add_argument('--foreign', default=False, const='', nargs='?', help=&quot;Mark that the character is foreign to the main campaign setting, with optional notes on where they're from&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1915" file="npc/cli/core.py" line="109">
			<system-out>    character_options.add_argument('--foreign', default=False, const='', nargs='?', help=&quot;Mark that the character is foreign to the main campaign setting, with optional notes on where they're from&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1916" file="npc/cli/core.py" line="109">
			<system-out>    character_options.add_argument('--foreign', default=False, const='', nargs='?', help=&quot;Mark that the character is foreign to the main campaign setting, with optional notes on where they're from&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1917" file="npc/cli/core.py" line="109">
			<system-out>    character_options.add_argument('--foreign', default=False, const='', nargs='?', help=&quot;Mark that the character is foreign to the main campaign setting, with optional notes on where they're from&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1918" file="npc/cli/core.py" line="110">
			<system-out>    character_options.add_argument('--location', default=False, help=&quot;Where the character is located within the main setting&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1919" file="npc/cli/core.py" line="110">
			<system-out>    character_options.add_argument('--location', default=False, help=&quot;Where the character is located within the main setting&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1920" file="npc/cli/core.py" line="110">
			<system-out>    character_options.add_argument('--location', default=False, help=&quot;Where the character is located within the main setting&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1921" file="npc/cli/core.py" line="110">
			<system-out>    character_options.add_argument('--location', default=False, help=&quot;Where the character is located within the main setting&quot;, metavar='place')</system-out>
		</testcase>
		<testcase name="Mutant #1922" file="npc/cli/core.py" line="113">
			<system-out>    paths_parser = argparse.ArgumentParser(add_help=False)</system-out>
		</testcase>
		<testcase name="Mutant #1923" file="npc/cli/core.py" line="113">
			<system-out>    paths_parser = argparse.ArgumentParser(add_help=False)</system-out>
		</testcase>
		<testcase name="Mutant #1924" file="npc/cli/core.py" line="114">
			<system-out>    paths_parser.add_argument('--search', nargs=&quot;*&quot;, default=None, help=&quot;Paths to search. Individual files are added verbatim and directories are searched recursively.&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1925" file="npc/cli/core.py" line="114">
			<system-out>    paths_parser.add_argument('--search', nargs=&quot;*&quot;, default=None, help=&quot;Paths to search. Individual files are added verbatim and directories are searched recursively.&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1926" file="npc/cli/core.py" line="114">
			<system-out>    paths_parser.add_argument('--search', nargs=&quot;*&quot;, default=None, help=&quot;Paths to search. Individual files are added verbatim and directories are searched recursively.&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1927" file="npc/cli/core.py" line="114">
			<system-out>    paths_parser.add_argument('--search', nargs=&quot;*&quot;, default=None, help=&quot;Paths to search. Individual files are added verbatim and directories are searched recursively.&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1928" file="npc/cli/core.py" line="115">
			<system-out>    paths_parser.add_argument('--ignore', nargs=&quot;*&quot;, default=None, help=&quot;Paths to skip when searching for character files&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1929" file="npc/cli/core.py" line="115">
			<system-out>    paths_parser.add_argument('--ignore', nargs=&quot;*&quot;, default=None, help=&quot;Paths to skip when searching for character files&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1930" file="npc/cli/core.py" line="115">
			<system-out>    paths_parser.add_argument('--ignore', nargs=&quot;*&quot;, default=None, help=&quot;Paths to skip when searching for character files&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1931" file="npc/cli/core.py" line="115">
			<system-out>    paths_parser.add_argument('--ignore', nargs=&quot;*&quot;, default=None, help=&quot;Paths to skip when searching for character files&quot;, metavar=&quot;PATH&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1932" file="npc/cli/core.py" line="117">
			<system-out>    common_options = argparse.ArgumentParser(add_help=False)</system-out>
		</testcase>
		<testcase name="Mutant #1933" file="npc/cli/core.py" line="117">
			<system-out>    common_options = argparse.ArgumentParser(add_help=False)</system-out>
		</testcase>
		<testcase name="Mutant #1934" file="npc/cli/core.py" line="118">
			<system-out>    common_options.add_argument('-b', '--batch', action='store_true', default=False, help=&quot;Do not print any messages or open any files in the editor&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1935" file="npc/cli/core.py" line="118">
			<system-out>    common_options.add_argument('-b', '--batch', action='store_true', default=False, help=&quot;Do not print any messages or open any files in the editor&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1936" file="npc/cli/core.py" line="118">
			<system-out>    common_options.add_argument('-b', '--batch', action='store_true', default=False, help=&quot;Do not print any messages or open any files in the editor&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1937" file="npc/cli/core.py" line="118">
			<system-out>    common_options.add_argument('-b', '--batch', action='store_true', default=False, help=&quot;Do not print any messages or open any files in the editor&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1938" file="npc/cli/core.py" line="118">
			<system-out>    common_options.add_argument('-b', '--batch', action='store_true', default=False, help=&quot;Do not print any messages or open any files in the editor&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1939" file="npc/cli/core.py" line="119">
			<system-out>    common_options.add_argument('--debug', action='store_true', default=False, help=&quot;Show all error messages, not just important ones&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1940" file="npc/cli/core.py" line="119">
			<system-out>    common_options.add_argument('--debug', action='store_true', default=False, help=&quot;Show all error messages, not just important ones&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1941" file="npc/cli/core.py" line="119">
			<system-out>    common_options.add_argument('--debug', action='store_true', default=False, help=&quot;Show all error messages, not just important ones&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1942" file="npc/cli/core.py" line="119">
			<system-out>    common_options.add_argument('--debug', action='store_true', default=False, help=&quot;Show all error messages, not just important ones&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1943" file="npc/cli/core.py" line="123">
			<system-out>    parser = argparse.ArgumentParser(description='GM helper script to manage game files', prog='npc')</system-out>
		</testcase>
		<testcase name="Mutant #1944" file="npc/cli/core.py" line="123">
			<system-out>    parser = argparse.ArgumentParser(description='GM helper script to manage game files', prog='npc')</system-out>
		</testcase>
		<testcase name="Mutant #1945" file="npc/cli/core.py" line="123">
			<system-out>    parser = argparse.ArgumentParser(description='GM helper script to manage game files', prog='npc')</system-out>
		</testcase>
		<testcase name="Mutant #1946" file="npc/cli/core.py" line="124">
			<system-out>    parser.add_argument('--campaign', default='auto', help=&quot;Use the campaign files in a different directory&quot;, metavar='DIR')</system-out>
		</testcase>
		<testcase name="Mutant #1947" file="npc/cli/core.py" line="124">
			<system-out>    parser.add_argument('--campaign', default='auto', help=&quot;Use the campaign files in a different directory&quot;, metavar='DIR')</system-out>
		</testcase>
		<testcase name="Mutant #1948" file="npc/cli/core.py" line="124">
			<system-out>    parser.add_argument('--campaign', default='auto', help=&quot;Use the campaign files in a different directory&quot;, metavar='DIR')</system-out>
		</testcase>
		<testcase name="Mutant #1949" file="npc/cli/core.py" line="124">
			<system-out>    parser.add_argument('--campaign', default='auto', help=&quot;Use the campaign files in a different directory&quot;, metavar='DIR')</system-out>
		</testcase>
		<testcase name="Mutant #1950" file="npc/cli/core.py" line="125">
			<system-out>    parser.add_argument('--version', action='version', version=__version__)</system-out>
		</testcase>
		<testcase name="Mutant #1951" file="npc/cli/core.py" line="125">
			<system-out>    parser.add_argument('--version', action='version', version=__version__)</system-out>
		</testcase>
		<testcase name="Mutant #1952" file="npc/cli/core.py" line="126">
			<system-out>    parser.set_defaults(debug=False, batch=False)</system-out>
		</testcase>
		<testcase name="Mutant #1953" file="npc/cli/core.py" line="126">
			<system-out>    parser.set_defaults(debug=False, batch=False)</system-out>
		</testcase>
		<testcase name="Mutant #1954" file="npc/cli/core.py" line="127">
			<system-out>    subparsers = parser.add_subparsers(title='Subcommands', description=&quot;Commands that can be run on the current campaign. See `%(prog)s &lt;command&gt; -h` to get help with individual commands.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1955" file="npc/cli/core.py" line="127">
			<system-out>    subparsers = parser.add_subparsers(title='Subcommands', description=&quot;Commands that can be run on the current campaign. See `%(prog)s &lt;command&gt; -h` to get help with individual commands.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1956" file="npc/cli/core.py" line="127">
			<system-out>    subparsers = parser.add_subparsers(title='Subcommands', description=&quot;Commands that can be run on the current campaign. See `%(prog)s &lt;command&gt; -h` to get help with individual commands.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1957" file="npc/cli/core.py" line="130">
			<system-out>    parser_init = subparsers.add_parser('init', parents=[common_options], help=&quot;Create the basic directory structure for campaign files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1958" file="npc/cli/core.py" line="130">
			<system-out>    parser_init = subparsers.add_parser('init', parents=[common_options], help=&quot;Create the basic directory structure for campaign files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1959" file="npc/cli/core.py" line="130">
			<system-out>    parser_init = subparsers.add_parser('init', parents=[common_options], help=&quot;Create the basic directory structure for campaign files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1960" file="npc/cli/core.py" line="131">
			<system-out>    parser_init.add_argument('-n', '--name', default=None, help=&quot;Name of the campaign. Defaults to the name of the current directory.&quot;, dest=&quot;campaign_name&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1961" file="npc/cli/core.py" line="131">
			<system-out>    parser_init.add_argument('-n', '--name', default=None, help=&quot;Name of the campaign. Defaults to the name of the current directory.&quot;, dest=&quot;campaign_name&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1962" file="npc/cli/core.py" line="131">
			<system-out>    parser_init.add_argument('-n', '--name', default=None, help=&quot;Name of the campaign. Defaults to the name of the current directory.&quot;, dest=&quot;campaign_name&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1963" file="npc/cli/core.py" line="131">
			<system-out>    parser_init.add_argument('-n', '--name', default=None, help=&quot;Name of the campaign. Defaults to the name of the current directory.&quot;, dest=&quot;campaign_name&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1964" file="npc/cli/core.py" line="132">
			<system-out>    parser_init.add_argument('-t', '--types', action=&quot;store_true&quot;, default=False, help=&quot;Create directories for all character types&quot;, dest=&quot;create_types&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1965" file="npc/cli/core.py" line="132">
			<system-out>    parser_init.add_argument('-t', '--types', action=&quot;store_true&quot;, default=False, help=&quot;Create directories for all character types&quot;, dest=&quot;create_types&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1966" file="npc/cli/core.py" line="132">
			<system-out>    parser_init.add_argument('-t', '--types', action=&quot;store_true&quot;, default=False, help=&quot;Create directories for all character types&quot;, dest=&quot;create_types&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1967" file="npc/cli/core.py" line="132">
			<system-out>    parser_init.add_argument('-t', '--types', action=&quot;store_true&quot;, default=False, help=&quot;Create directories for all character types&quot;, dest=&quot;create_types&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1968" file="npc/cli/core.py" line="132">
			<system-out>    parser_init.add_argument('-t', '--types', action=&quot;store_true&quot;, default=False, help=&quot;Create directories for all character types&quot;, dest=&quot;create_types&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1969" file="npc/cli/core.py" line="132">
			<system-out>    parser_init.add_argument('-t', '--types', action=&quot;store_true&quot;, default=False, help=&quot;Create directories for all character types&quot;, dest=&quot;create_types&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1970" file="npc/cli/core.py" line="133">
			<system-out>    parser_init.add_argument('-a', '--all', action=&quot;store_true&quot;, default=False, help=&quot;Create all optional directories&quot;, dest=&quot;create_all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1971" file="npc/cli/core.py" line="133">
			<system-out>    parser_init.add_argument('-a', '--all', action=&quot;store_true&quot;, default=False, help=&quot;Create all optional directories&quot;, dest=&quot;create_all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1972" file="npc/cli/core.py" line="133">
			<system-out>    parser_init.add_argument('-a', '--all', action=&quot;store_true&quot;, default=False, help=&quot;Create all optional directories&quot;, dest=&quot;create_all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1973" file="npc/cli/core.py" line="133">
			<system-out>    parser_init.add_argument('-a', '--all', action=&quot;store_true&quot;, default=False, help=&quot;Create all optional directories&quot;, dest=&quot;create_all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1974" file="npc/cli/core.py" line="133">
			<system-out>    parser_init.add_argument('-a', '--all', action=&quot;store_true&quot;, default=False, help=&quot;Create all optional directories&quot;, dest=&quot;create_all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1975" file="npc/cli/core.py" line="133">
			<system-out>    parser_init.add_argument('-a', '--all', action=&quot;store_true&quot;, default=False, help=&quot;Create all optional directories&quot;, dest=&quot;create_all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1976" file="npc/cli/core.py" line="134">
			<system-out>    parser_init.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show the changes that are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1977" file="npc/cli/core.py" line="134">
			<system-out>    parser_init.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show the changes that are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1978" file="npc/cli/core.py" line="134">
			<system-out>    parser_init.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show the changes that are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1979" file="npc/cli/core.py" line="134">
			<system-out>    parser_init.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show the changes that are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1980" file="npc/cli/core.py" line="134">
			<system-out>    parser_init.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show the changes that are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1981" file="npc/cli/core.py" line="135">
			<system-out>    parser_init.add_argument('--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show what would be created, but do not actually change anything&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1982" file="npc/cli/core.py" line="135">
			<system-out>    parser_init.add_argument('--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show what would be created, but do not actually change anything&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1983" file="npc/cli/core.py" line="135">
			<system-out>    parser_init.add_argument('--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show what would be created, but do not actually change anything&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1984" file="npc/cli/core.py" line="135">
			<system-out>    parser_init.add_argument('--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show what would be created, but do not actually change anything&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1985" file="npc/cli/core.py" line="139">
			<system-out>    parser_session = subparsers.add_parser('session', parents=[common_options], help=&quot;Create files for a new game session&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1986" file="npc/cli/core.py" line="139">
			<system-out>    parser_session = subparsers.add_parser('session', parents=[common_options], help=&quot;Create files for a new game session&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1987" file="npc/cli/core.py" line="139">
			<system-out>    parser_session = subparsers.add_parser('session', parents=[common_options], help=&quot;Create files for a new game session&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1988" file="npc/cli/core.py" line="143">
			<system-out>    parser_latest = subparsers.add_parser('latest', parents=[common_options], help=&quot;Get the latest plot and/or session files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1989" file="npc/cli/core.py" line="143">
			<system-out>    parser_latest = subparsers.add_parser('latest', parents=[common_options], help=&quot;Get the latest plot and/or session files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1990" file="npc/cli/core.py" line="143">
			<system-out>    parser_latest = subparsers.add_parser('latest', parents=[common_options], help=&quot;Get the latest plot and/or session files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1991" file="npc/cli/core.py" line="144">
			<system-out>    parser_latest.add_argument('thingtype', nargs='?', default='both', choices=['both', 'session', 'plot'], help=&quot;Type of file to open. One of 'plot', 'session', or 'both'. Defualts to 'both'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1992" file="npc/cli/core.py" line="144">
			<system-out>    parser_latest.add_argument('thingtype', nargs='?', default='both', choices=['both', 'session', 'plot'], help=&quot;Type of file to open. One of 'plot', 'session', or 'both'. Defualts to 'both'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1993" file="npc/cli/core.py" line="144">
			<system-out>    parser_latest.add_argument('thingtype', nargs='?', default='both', choices=['both', 'session', 'plot'], help=&quot;Type of file to open. One of 'plot', 'session', or 'both'. Defualts to 'both'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1994" file="npc/cli/core.py" line="144">
			<system-out>    parser_latest.add_argument('thingtype', nargs='?', default='both', choices=['both', 'session', 'plot'], help=&quot;Type of file to open. One of 'plot', 'session', or 'both'. Defualts to 'both'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1995" file="npc/cli/core.py" line="144">
			<system-out>    parser_latest.add_argument('thingtype', nargs='?', default='both', choices=['both', 'session', 'plot'], help=&quot;Type of file to open. One of 'plot', 'session', or 'both'. Defualts to 'both'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1996" file="npc/cli/core.py" line="144">
			<system-out>    parser_latest.add_argument('thingtype', nargs='?', default='both', choices=['both', 'session', 'plot'], help=&quot;Type of file to open. One of 'plot', 'session', or 'both'. Defualts to 'both'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1997" file="npc/cli/core.py" line="144">
			<system-out>    parser_latest.add_argument('thingtype', nargs='?', default='both', choices=['both', 'session', 'plot'], help=&quot;Type of file to open. One of 'plot', 'session', or 'both'. Defualts to 'both'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1998" file="npc/cli/core.py" line="148">
			<system-out>    parser_generic = subparsers.add_parser('new', parents=[common_options, character_options], help=&quot;Create a new character from the named template&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1999" file="npc/cli/core.py" line="148">
			<system-out>    parser_generic = subparsers.add_parser('new', parents=[common_options, character_options], help=&quot;Create a new character from the named template&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2000" file="npc/cli/core.py" line="148">
			<system-out>    parser_generic = subparsers.add_parser('new', parents=[common_options, character_options], help=&quot;Create a new character from the named template&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2001" file="npc/cli/core.py" line="149">
			<system-out>    parser_generic.add_argument('ctype', metavar='template', help=&quot;Template to use. Must be configured in settings&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2002" file="npc/cli/core.py" line="149">
			<system-out>    parser_generic.add_argument('ctype', metavar='template', help=&quot;Template to use. Must be configured in settings&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2003" file="npc/cli/core.py" line="149">
			<system-out>    parser_generic.add_argument('ctype', metavar='template', help=&quot;Template to use. Must be configured in settings&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2004" file="npc/cli/core.py" line="150">
			<system-out>    parser_generic.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2005" file="npc/cli/core.py" line="150">
			<system-out>    parser_generic.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2006" file="npc/cli/core.py" line="150">
			<system-out>    parser_generic.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2007" file="npc/cli/core.py" line="155">
			<system-out>    parser_human = subparsers.add_parser('human', aliases=['h'], parents=[common_options, character_options], help=&quot;Create a new human character. Alias for `npc new human`&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2008" file="npc/cli/core.py" line="155">
			<system-out>    parser_human = subparsers.add_parser('human', aliases=['h'], parents=[common_options, character_options], help=&quot;Create a new human character. Alias for `npc new human`&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2009" file="npc/cli/core.py" line="155">
			<system-out>    parser_human = subparsers.add_parser('human', aliases=['h'], parents=[common_options, character_options], help=&quot;Create a new human character. Alias for `npc new human`&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2010" file="npc/cli/core.py" line="155">
			<system-out>    parser_human = subparsers.add_parser('human', aliases=['h'], parents=[common_options, character_options], help=&quot;Create a new human character. Alias for `npc new human`&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2011" file="npc/cli/core.py" line="156">
			<system-out>    parser_human.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2012" file="npc/cli/core.py" line="156">
			<system-out>    parser_human.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2013" file="npc/cli/core.py" line="156">
			<system-out>    parser_human.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2014" file="npc/cli/core.py" line="157">
			<system-out>    parser_human.set_defaults(func=commands.create_standard, ctype=&quot;human&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2015" file="npc/cli/core.py" line="160">
			<system-out>    parser_changeling = subparsers.add_parser('changeling', aliases=['c'], parents=[common_options, character_options], help=&quot;Create a new changeling character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2016" file="npc/cli/core.py" line="160">
			<system-out>    parser_changeling = subparsers.add_parser('changeling', aliases=['c'], parents=[common_options, character_options], help=&quot;Create a new changeling character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2017" file="npc/cli/core.py" line="160">
			<system-out>    parser_changeling = subparsers.add_parser('changeling', aliases=['c'], parents=[common_options, character_options], help=&quot;Create a new changeling character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2018" file="npc/cli/core.py" line="160">
			<system-out>    parser_changeling = subparsers.add_parser('changeling', aliases=['c'], parents=[common_options, character_options], help=&quot;Create a new changeling character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2019" file="npc/cli/core.py" line="161">
			<system-out>    parser_changeling.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2020" file="npc/cli/core.py" line="161">
			<system-out>    parser_changeling.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2021" file="npc/cli/core.py" line="161">
			<system-out>    parser_changeling.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2022" file="npc/cli/core.py" line="162">
			<system-out>    parser_changeling.add_argument('seeming', help=&quot;The character's Seeming&quot;, metavar='seeming')</system-out>
		</testcase>
		<testcase name="Mutant #2023" file="npc/cli/core.py" line="162">
			<system-out>    parser_changeling.add_argument('seeming', help=&quot;The character's Seeming&quot;, metavar='seeming')</system-out>
		</testcase>
		<testcase name="Mutant #2024" file="npc/cli/core.py" line="162">
			<system-out>    parser_changeling.add_argument('seeming', help=&quot;The character's Seeming&quot;, metavar='seeming')</system-out>
		</testcase>
		<testcase name="Mutant #2025" file="npc/cli/core.py" line="163">
			<system-out>    parser_changeling.add_argument('kith', help=&quot;The character's Kith&quot;, metavar='kith')</system-out>
		</testcase>
		<testcase name="Mutant #2026" file="npc/cli/core.py" line="163">
			<system-out>    parser_changeling.add_argument('kith', help=&quot;The character's Kith&quot;, metavar='kith')</system-out>
		</testcase>
		<testcase name="Mutant #2027" file="npc/cli/core.py" line="163">
			<system-out>    parser_changeling.add_argument('kith', help=&quot;The character's Kith&quot;, metavar='kith')</system-out>
		</testcase>
		<testcase name="Mutant #2028" file="npc/cli/core.py" line="164">
			<system-out>    parser_changeling.add_argument('-c', '--court', help=&quot;Name of the character's Court&quot;, metavar='court')</system-out>
		</testcase>
		<testcase name="Mutant #2029" file="npc/cli/core.py" line="164">
			<system-out>    parser_changeling.add_argument('-c', '--court', help=&quot;Name of the character's Court&quot;, metavar='court')</system-out>
		</testcase>
		<testcase name="Mutant #2030" file="npc/cli/core.py" line="164">
			<system-out>    parser_changeling.add_argument('-c', '--court', help=&quot;Name of the character's Court&quot;, metavar='court')</system-out>
		</testcase>
		<testcase name="Mutant #2031" file="npc/cli/core.py" line="164">
			<system-out>    parser_changeling.add_argument('-c', '--court', help=&quot;Name of the character's Court&quot;, metavar='court')</system-out>
		</testcase>
		<testcase name="Mutant #2032" file="npc/cli/core.py" line="165">
			<system-out>    parser_changeling.add_argument('-m', '--motley', help=&quot;Name of the character's Motley&quot;, metavar='motley')</system-out>
		</testcase>
		<testcase name="Mutant #2033" file="npc/cli/core.py" line="165">
			<system-out>    parser_changeling.add_argument('-m', '--motley', help=&quot;Name of the character's Motley&quot;, metavar='motley')</system-out>
		</testcase>
		<testcase name="Mutant #2034" file="npc/cli/core.py" line="165">
			<system-out>    parser_changeling.add_argument('-m', '--motley', help=&quot;Name of the character's Motley&quot;, metavar='motley')</system-out>
		</testcase>
		<testcase name="Mutant #2035" file="npc/cli/core.py" line="165">
			<system-out>    parser_changeling.add_argument('-m', '--motley', help=&quot;Name of the character's Motley&quot;, metavar='motley')</system-out>
		</testcase>
		<testcase name="Mutant #2036" file="npc/cli/core.py" line="166">
			<system-out>    parser_changeling.add_argument('-e', '--entitlement', help=&quot;Name of the character's entitlement&quot;, metavar='entitlement')</system-out>
		</testcase>
		<testcase name="Mutant #2037" file="npc/cli/core.py" line="166">
			<system-out>    parser_changeling.add_argument('-e', '--entitlement', help=&quot;Name of the character's entitlement&quot;, metavar='entitlement')</system-out>
		</testcase>
		<testcase name="Mutant #2038" file="npc/cli/core.py" line="166">
			<system-out>    parser_changeling.add_argument('-e', '--entitlement', help=&quot;Name of the character's entitlement&quot;, metavar='entitlement')</system-out>
		</testcase>
		<testcase name="Mutant #2039" file="npc/cli/core.py" line="166">
			<system-out>    parser_changeling.add_argument('-e', '--entitlement', help=&quot;Name of the character's entitlement&quot;, metavar='entitlement')</system-out>
		</testcase>
		<testcase name="Mutant #2040" file="npc/cli/core.py" line="167">
			<system-out>    parser_changeling.add_argument('-f', '--freehold', help=&quot;Name of the character's freehold&quot;, metavar='freehold')</system-out>
		</testcase>
		<testcase name="Mutant #2041" file="npc/cli/core.py" line="167">
			<system-out>    parser_changeling.add_argument('-f', '--freehold', help=&quot;Name of the character's freehold&quot;, metavar='freehold')</system-out>
		</testcase>
		<testcase name="Mutant #2042" file="npc/cli/core.py" line="167">
			<system-out>    parser_changeling.add_argument('-f', '--freehold', help=&quot;Name of the character's freehold&quot;, metavar='freehold')</system-out>
		</testcase>
		<testcase name="Mutant #2043" file="npc/cli/core.py" line="167">
			<system-out>    parser_changeling.add_argument('-f', '--freehold', help=&quot;Name of the character's freehold&quot;, metavar='freehold')</system-out>
		</testcase>
		<testcase name="Mutant #2044" file="npc/cli/core.py" line="171">
			<system-out>    parser_werewolf = subparsers.add_parser('werewolf', aliases=['w'], parents=[common_options, character_options], help=&quot;Create a new werewolf character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2045" file="npc/cli/core.py" line="171">
			<system-out>    parser_werewolf = subparsers.add_parser('werewolf', aliases=['w'], parents=[common_options, character_options], help=&quot;Create a new werewolf character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2046" file="npc/cli/core.py" line="171">
			<system-out>    parser_werewolf = subparsers.add_parser('werewolf', aliases=['w'], parents=[common_options, character_options], help=&quot;Create a new werewolf character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2047" file="npc/cli/core.py" line="171">
			<system-out>    parser_werewolf = subparsers.add_parser('werewolf', aliases=['w'], parents=[common_options, character_options], help=&quot;Create a new werewolf character&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2048" file="npc/cli/core.py" line="172">
			<system-out>    parser_werewolf.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2049" file="npc/cli/core.py" line="172">
			<system-out>    parser_werewolf.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2050" file="npc/cli/core.py" line="172">
			<system-out>    parser_werewolf.add_argument('name', help=&quot;Character name&quot;, metavar='name')</system-out>
		</testcase>
		<testcase name="Mutant #2051" file="npc/cli/core.py" line="173">
			<system-out>    parser_werewolf.add_argument('auspice', help=&quot;The character's Auspice&quot;, metavar='auspice')</system-out>
		</testcase>
		<testcase name="Mutant #2052" file="npc/cli/core.py" line="173">
			<system-out>    parser_werewolf.add_argument('auspice', help=&quot;The character's Auspice&quot;, metavar='auspice')</system-out>
		</testcase>
		<testcase name="Mutant #2053" file="npc/cli/core.py" line="173">
			<system-out>    parser_werewolf.add_argument('auspice', help=&quot;The character's Auspice&quot;, metavar='auspice')</system-out>
		</testcase>
		<testcase name="Mutant #2054" file="npc/cli/core.py" line="174">
			<system-out>    parser_werewolf.add_argument('-t', '--tribe', help=&quot;The character's Tribe&quot;, metavar='tribe')</system-out>
		</testcase>
		<testcase name="Mutant #2055" file="npc/cli/core.py" line="174">
			<system-out>    parser_werewolf.add_argument('-t', '--tribe', help=&quot;The character's Tribe&quot;, metavar='tribe')</system-out>
		</testcase>
		<testcase name="Mutant #2056" file="npc/cli/core.py" line="174">
			<system-out>    parser_werewolf.add_argument('-t', '--tribe', help=&quot;The character's Tribe&quot;, metavar='tribe')</system-out>
		</testcase>
		<testcase name="Mutant #2057" file="npc/cli/core.py" line="174">
			<system-out>    parser_werewolf.add_argument('-t', '--tribe', help=&quot;The character's Tribe&quot;, metavar='tribe')</system-out>
		</testcase>
		<testcase name="Mutant #2058" file="npc/cli/core.py" line="175">
			<system-out>    parser_werewolf.add_argument('-p', '--pack', help=&quot;The character's Pack&quot;, metavar='pack')</system-out>
		</testcase>
		<testcase name="Mutant #2059" file="npc/cli/core.py" line="175">
			<system-out>    parser_werewolf.add_argument('-p', '--pack', help=&quot;The character's Pack&quot;, metavar='pack')</system-out>
		</testcase>
		<testcase name="Mutant #2060" file="npc/cli/core.py" line="175">
			<system-out>    parser_werewolf.add_argument('-p', '--pack', help=&quot;The character's Pack&quot;, metavar='pack')</system-out>
		</testcase>
		<testcase name="Mutant #2061" file="npc/cli/core.py" line="175">
			<system-out>    parser_werewolf.add_argument('-p', '--pack', help=&quot;The character's Pack&quot;, metavar='pack')</system-out>
		</testcase>
		<testcase name="Mutant #2062" file="npc/cli/core.py" line="179">
			<system-out>    parser_lint = subparsers.add_parser('lint', parents=[common_options, paths_parser], help=&quot;Check the character files for minimum completeness&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2063" file="npc/cli/core.py" line="179">
			<system-out>    parser_lint = subparsers.add_parser('lint', parents=[common_options, paths_parser], help=&quot;Check the character files for minimum completeness&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2064" file="npc/cli/core.py" line="179">
			<system-out>    parser_lint = subparsers.add_parser('lint', parents=[common_options, paths_parser], help=&quot;Check the character files for minimum completeness&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2065" file="npc/cli/core.py" line="180">
			<system-out>    parser_lint.add_argument('-f', '--fix', action='store_true', default=False, help=&quot;Automatically fix certain problems&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2066" file="npc/cli/core.py" line="180">
			<system-out>    parser_lint.add_argument('-f', '--fix', action='store_true', default=False, help=&quot;Automatically fix certain problems&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2067" file="npc/cli/core.py" line="180">
			<system-out>    parser_lint.add_argument('-f', '--fix', action='store_true', default=False, help=&quot;Automatically fix certain problems&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2068" file="npc/cli/core.py" line="180">
			<system-out>    parser_lint.add_argument('-f', '--fix', action='store_true', default=False, help=&quot;Automatically fix certain problems&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2069" file="npc/cli/core.py" line="180">
			<system-out>    parser_lint.add_argument('-f', '--fix', action='store_true', default=False, help=&quot;Automatically fix certain problems&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2070" file="npc/cli/core.py" line="181">
			<system-out>    parser_lint.add_argument('-o', '--open', action='store_false', dest='report', default=True, help=&quot;Open all offending files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2071" file="npc/cli/core.py" line="181">
			<system-out>    parser_lint.add_argument('-o', '--open', action='store_false', dest='report', default=True, help=&quot;Open all offending files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2072" file="npc/cli/core.py" line="181">
			<system-out>    parser_lint.add_argument('-o', '--open', action='store_false', dest='report', default=True, help=&quot;Open all offending files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2073" file="npc/cli/core.py" line="181">
			<system-out>    parser_lint.add_argument('-o', '--open', action='store_false', dest='report', default=True, help=&quot;Open all offending files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2074" file="npc/cli/core.py" line="181">
			<system-out>    parser_lint.add_argument('-o', '--open', action='store_false', dest='report', default=True, help=&quot;Open all offending files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2075" file="npc/cli/core.py" line="181">
			<system-out>    parser_lint.add_argument('-o', '--open', action='store_false', dest='report', default=True, help=&quot;Open all offending files&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2076" file="npc/cli/core.py" line="182">
			<system-out>    parser_lint.add_argument('--strict', action='store_true', default=False, help=&quot;Include all optional and non-critical errors&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2077" file="npc/cli/core.py" line="182">
			<system-out>    parser_lint.add_argument('--strict', action='store_true', default=False, help=&quot;Include all optional and non-critical errors&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2078" file="npc/cli/core.py" line="182">
			<system-out>    parser_lint.add_argument('--strict', action='store_true', default=False, help=&quot;Include all optional and non-critical errors&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2079" file="npc/cli/core.py" line="182">
			<system-out>    parser_lint.add_argument('--strict', action='store_true', default=False, help=&quot;Include all optional and non-critical errors&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2080" file="npc/cli/core.py" line="186">
			<system-out>    parser_list = subparsers.add_parser('list', parents=[common_options, paths_parser], help=&quot;Generate an NPC Listing&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2081" file="npc/cli/core.py" line="186">
			<system-out>    parser_list = subparsers.add_parser('list', parents=[common_options, paths_parser], help=&quot;Generate an NPC Listing&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2082" file="npc/cli/core.py" line="186">
			<system-out>    parser_list = subparsers.add_parser('list', parents=[common_options, paths_parser], help=&quot;Generate an NPC Listing&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2083" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2084" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2085" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2086" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2087" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2088" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2089" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2090" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2091" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2092" file="npc/cli/core.py" line="187">
			<system-out>    parser_list.add_argument('-t', '--format', choices=['markdown', 'md', 'json', 'htm', 'html'], default='default', help=&quot;Format to use for the listing. Defaults to the list format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2093" file="npc/cli/core.py" line="188">
			<system-out>    parser_list.add_argument('-m', '--metadata', nargs=&quot;?&quot;, const='default', default=False, help=&quot;Add metadata to the output. If the output format supports more than one metadata format, you can specify that format as well.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2094" file="npc/cli/core.py" line="188">
			<system-out>    parser_list.add_argument('-m', '--metadata', nargs=&quot;?&quot;, const='default', default=False, help=&quot;Add metadata to the output. If the output format supports more than one metadata format, you can specify that format as well.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2095" file="npc/cli/core.py" line="188">
			<system-out>    parser_list.add_argument('-m', '--metadata', nargs=&quot;?&quot;, const='default', default=False, help=&quot;Add metadata to the output. If the output format supports more than one metadata format, you can specify that format as well.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2096" file="npc/cli/core.py" line="188">
			<system-out>    parser_list.add_argument('-m', '--metadata', nargs=&quot;?&quot;, const='default', default=False, help=&quot;Add metadata to the output. If the output format supports more than one metadata format, you can specify that format as well.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2097" file="npc/cli/core.py" line="188">
			<system-out>    parser_list.add_argument('-m', '--metadata', nargs=&quot;?&quot;, const='default', default=False, help=&quot;Add metadata to the output. If the output format supports more than one metadata format, you can specify that format as well.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2098" file="npc/cli/core.py" line="188">
			<system-out>    parser_list.add_argument('-m', '--metadata', nargs=&quot;?&quot;, const='default', default=False, help=&quot;Add metadata to the output. If the output format supports more than one metadata format, you can specify that format as well.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2099" file="npc/cli/core.py" line="189">
			<system-out>    parser_list.add_argument('--title', help=&quot;Title to show in the metadata. Overrides the title from settings.&quot;, metavar=&quot;TITLE&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2100" file="npc/cli/core.py" line="189">
			<system-out>    parser_list.add_argument('--title', help=&quot;Title to show in the metadata. Overrides the title from settings.&quot;, metavar=&quot;TITLE&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2101" file="npc/cli/core.py" line="189">
			<system-out>    parser_list.add_argument('--title', help=&quot;Title to show in the metadata. Overrides the title from settings.&quot;, metavar=&quot;TITLE&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2102" file="npc/cli/core.py" line="190">
			<system-out>    parser_list.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2103" file="npc/cli/core.py" line="190">
			<system-out>    parser_list.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2104" file="npc/cli/core.py" line="190">
			<system-out>    parser_list.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2105" file="npc/cli/core.py" line="190">
			<system-out>    parser_list.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2106" file="npc/cli/core.py" line="190">
			<system-out>    parser_list.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2107" file="npc/cli/core.py" line="191">
			<system-out>    parser_list.add_argument('--sort_by', default='', help=&quot;The sort order for characters. Separate multiple tags with a comma. Defaults to the settings value 'listing.sort_by'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2108" file="npc/cli/core.py" line="191">
			<system-out>    parser_list.add_argument('--sort_by', default='', help=&quot;The sort order for characters. Separate multiple tags with a comma. Defaults to the settings value 'listing.sort_by'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2109" file="npc/cli/core.py" line="191">
			<system-out>    parser_list.add_argument('--sort_by', default='', help=&quot;The sort order for characters. Separate multiple tags with a comma. Defaults to the settings value 'listing.sort_by'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2110" file="npc/cli/core.py" line="192">
			<system-out>    parser_list.add_argument('--headings', default='', help=&quot;Generate headings for these tags. Separate multiple tags with a comma. Defaults to the value of `sort_by`.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2111" file="npc/cli/core.py" line="192">
			<system-out>    parser_list.add_argument('--headings', default='', help=&quot;Generate headings for these tags. Separate multiple tags with a comma. Defaults to the value of `sort_by`.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2112" file="npc/cli/core.py" line="192">
			<system-out>    parser_list.add_argument('--headings', default='', help=&quot;Generate headings for these tags. Separate multiple tags with a comma. Defaults to the value of `sort_by`.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2113" file="npc/cli/core.py" line="193">
			<system-out>    parser_list.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all and do not generate any headings.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2114" file="npc/cli/core.py" line="193">
			<system-out>    parser_list.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all and do not generate any headings.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2115" file="npc/cli/core.py" line="193">
			<system-out>    parser_list.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all and do not generate any headings.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2116" file="npc/cli/core.py" line="193">
			<system-out>    parser_list.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all and do not generate any headings.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2117" file="npc/cli/core.py" line="194">
			<system-out>    parser_list.add_argument('--partial', action='store_true', help=&quot;Only generate body content, no headers or footers.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2118" file="npc/cli/core.py" line="194">
			<system-out>    parser_list.add_argument('--partial', action='store_true', help=&quot;Only generate body content, no headers or footers.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2119" file="npc/cli/core.py" line="194">
			<system-out>    parser_list.add_argument('--partial', action='store_true', help=&quot;Only generate body content, no headers or footers.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2120" file="npc/cli/core.py" line="198">
			<system-out>    parser_dump = subparsers.add_parser('dump', parents=[common_options, paths_parser], help=&quot;Export raw json data of all characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2121" file="npc/cli/core.py" line="198">
			<system-out>    parser_dump = subparsers.add_parser('dump', parents=[common_options, paths_parser], help=&quot;Export raw json data of all characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2122" file="npc/cli/core.py" line="198">
			<system-out>    parser_dump = subparsers.add_parser('dump', parents=[common_options, paths_parser], help=&quot;Export raw json data of all characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2123" file="npc/cli/core.py" line="199">
			<system-out>    parser_dump.add_argument('-s', '--do_sort', action=&quot;store_true&quot;, default=False, help=&quot;Sort the characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2124" file="npc/cli/core.py" line="199">
			<system-out>    parser_dump.add_argument('-s', '--do_sort', action=&quot;store_true&quot;, default=False, help=&quot;Sort the characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2125" file="npc/cli/core.py" line="199">
			<system-out>    parser_dump.add_argument('-s', '--do_sort', action=&quot;store_true&quot;, default=False, help=&quot;Sort the characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2126" file="npc/cli/core.py" line="199">
			<system-out>    parser_dump.add_argument('-s', '--do_sort', action=&quot;store_true&quot;, default=False, help=&quot;Sort the characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2127" file="npc/cli/core.py" line="199">
			<system-out>    parser_dump.add_argument('-s', '--do_sort', action=&quot;store_true&quot;, default=False, help=&quot;Sort the characters&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2128" file="npc/cli/core.py" line="200">
			<system-out>    parser_dump.add_argument('-m', '--metadata', action=&quot;store_true&quot;, default=False, help=&quot;Add metadata to the output.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2129" file="npc/cli/core.py" line="200">
			<system-out>    parser_dump.add_argument('-m', '--metadata', action=&quot;store_true&quot;, default=False, help=&quot;Add metadata to the output.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2130" file="npc/cli/core.py" line="200">
			<system-out>    parser_dump.add_argument('-m', '--metadata', action=&quot;store_true&quot;, default=False, help=&quot;Add metadata to the output.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2131" file="npc/cli/core.py" line="200">
			<system-out>    parser_dump.add_argument('-m', '--metadata', action=&quot;store_true&quot;, default=False, help=&quot;Add metadata to the output.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2132" file="npc/cli/core.py" line="200">
			<system-out>    parser_dump.add_argument('-m', '--metadata', action=&quot;store_true&quot;, default=False, help=&quot;Add metadata to the output.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2133" file="npc/cli/core.py" line="201">
			<system-out>    parser_dump.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2134" file="npc/cli/core.py" line="201">
			<system-out>    parser_dump.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2135" file="npc/cli/core.py" line="201">
			<system-out>    parser_dump.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2136" file="npc/cli/core.py" line="201">
			<system-out>    parser_dump.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2137" file="npc/cli/core.py" line="201">
			<system-out>    parser_dump.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2138" file="npc/cli/core.py" line="202">
			<system-out>    parser_dump.add_argument('--sort_by', default='', help=&quot;The sort order for characters. Separate multiple tags with a comma. Defaults to the settings value 'dump.sort_by'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2139" file="npc/cli/core.py" line="202">
			<system-out>    parser_dump.add_argument('--sort_by', default='', help=&quot;The sort order for characters. Separate multiple tags with a comma. Defaults to the settings value 'dump.sort_by'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2140" file="npc/cli/core.py" line="202">
			<system-out>    parser_dump.add_argument('--sort_by', default='', help=&quot;The sort order for characters. Separate multiple tags with a comma. Defaults to the settings value 'dump.sort_by'.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2141" file="npc/cli/core.py" line="203">
			<system-out>    parser_dump.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2142" file="npc/cli/core.py" line="203">
			<system-out>    parser_dump.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2143" file="npc/cli/core.py" line="203">
			<system-out>    parser_dump.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2144" file="npc/cli/core.py" line="203">
			<system-out>    parser_dump.add_argument('--no_sort', action='store_false', dest='do_sort', help=&quot;Do not sort characters at all&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2145" file="npc/cli/core.py" line="207">
			<system-out>    parser_reorg = subparsers.add_parser('reorg', parents=[common_options, paths_parser], help=&quot;Move character files to the most appropriate directories. By default, shows changes that would be made, but does not move anything. Use the --commit option once you're satisfied with where the files will end up.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2146" file="npc/cli/core.py" line="207">
			<system-out>    parser_reorg = subparsers.add_parser('reorg', parents=[common_options, paths_parser], help=&quot;Move character files to the most appropriate directories. By default, shows changes that would be made, but does not move anything. Use the --commit option once you're satisfied with where the files will end up.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2147" file="npc/cli/core.py" line="207">
			<system-out>    parser_reorg = subparsers.add_parser('reorg', parents=[common_options, paths_parser], help=&quot;Move character files to the most appropriate directories. By default, shows changes that would be made, but does not move anything. Use the --commit option once you're satisfied with where the files will end up.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2148" file="npc/cli/core.py" line="208">
			<system-out>    parser_reorg.add_argument('-p', '--purge', action=&quot;store_true&quot;, default=False, help=&quot;After moving all files, remove any empty directories within the base characters path&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2149" file="npc/cli/core.py" line="208">
			<system-out>    parser_reorg.add_argument('-p', '--purge', action=&quot;store_true&quot;, default=False, help=&quot;After moving all files, remove any empty directories within the base characters path&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2150" file="npc/cli/core.py" line="208">
			<system-out>    parser_reorg.add_argument('-p', '--purge', action=&quot;store_true&quot;, default=False, help=&quot;After moving all files, remove any empty directories within the base characters path&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2151" file="npc/cli/core.py" line="208">
			<system-out>    parser_reorg.add_argument('-p', '--purge', action=&quot;store_true&quot;, default=False, help=&quot;After moving all files, remove any empty directories within the base characters path&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2152" file="npc/cli/core.py" line="208">
			<system-out>    parser_reorg.add_argument('-p', '--purge', action=&quot;store_true&quot;, default=False, help=&quot;After moving all files, remove any empty directories within the base characters path&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2153" file="npc/cli/core.py" line="209">
			<system-out>    parser_reorg.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show changes as they are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2154" file="npc/cli/core.py" line="209">
			<system-out>    parser_reorg.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show changes as they are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2155" file="npc/cli/core.py" line="209">
			<system-out>    parser_reorg.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show changes as they are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2156" file="npc/cli/core.py" line="209">
			<system-out>    parser_reorg.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show changes as they are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2157" file="npc/cli/core.py" line="209">
			<system-out>    parser_reorg.add_argument('-v', '--verbose', action=&quot;store_true&quot;, default=False, help=&quot;Show changes as they are made&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2158" file="npc/cli/core.py" line="210">
			<system-out>    parser_reorg.add_argument('--commit', action=&quot;store_true&quot;, default=False, help=&quot;Move the files around&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2159" file="npc/cli/core.py" line="210">
			<system-out>    parser_reorg.add_argument('--commit', action=&quot;store_true&quot;, default=False, help=&quot;Move the files around&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2160" file="npc/cli/core.py" line="210">
			<system-out>    parser_reorg.add_argument('--commit', action=&quot;store_true&quot;, default=False, help=&quot;Move the files around&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2161" file="npc/cli/core.py" line="210">
			<system-out>    parser_reorg.add_argument('--commit', action=&quot;store_true&quot;, default=False, help=&quot;Move the files around&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2162" file="npc/cli/core.py" line="214">
			<system-out>    parser_settings = subparsers.add_parser('settings', parents=[common_options], help=&quot;Open (and create if needed) a settings file&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2163" file="npc/cli/core.py" line="214">
			<system-out>    parser_settings = subparsers.add_parser('settings', parents=[common_options], help=&quot;Open (and create if needed) a settings file&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2164" file="npc/cli/core.py" line="214">
			<system-out>    parser_settings = subparsers.add_parser('settings', parents=[common_options], help=&quot;Open (and create if needed) a settings file&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2165" file="npc/cli/core.py" line="215">
			<system-out>    parser_settings.add_argument('location', choices=['user', 'campaign'], help=&quot;The settings file to load&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2166" file="npc/cli/core.py" line="215">
			<system-out>    parser_settings.add_argument('location', choices=['user', 'campaign'], help=&quot;The settings file to load&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2167" file="npc/cli/core.py" line="215">
			<system-out>    parser_settings.add_argument('location', choices=['user', 'campaign'], help=&quot;The settings file to load&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2168" file="npc/cli/core.py" line="215">
			<system-out>    parser_settings.add_argument('location', choices=['user', 'campaign'], help=&quot;The settings file to load&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2169" file="npc/cli/core.py" line="216">
			<system-out>    parser_settings.add_argument('-t', '--type', choices=['base', 'changeling'], help=&quot;Open a type-specific settings file&quot;, metavar='type', dest='settings_type')</system-out>
		</testcase>
		<testcase name="Mutant #2170" file="npc/cli/core.py" line="216">
			<system-out>    parser_settings.add_argument('-t', '--type', choices=['base', 'changeling'], help=&quot;Open a type-specific settings file&quot;, metavar='type', dest='settings_type')</system-out>
		</testcase>
		<testcase name="Mutant #2171" file="npc/cli/core.py" line="216">
			<system-out>    parser_settings.add_argument('-t', '--type', choices=['base', 'changeling'], help=&quot;Open a type-specific settings file&quot;, metavar='type', dest='settings_type')</system-out>
		</testcase>
		<testcase name="Mutant #2172" file="npc/cli/core.py" line="216">
			<system-out>    parser_settings.add_argument('-t', '--type', choices=['base', 'changeling'], help=&quot;Open a type-specific settings file&quot;, metavar='type', dest='settings_type')</system-out>
		</testcase>
		<testcase name="Mutant #2173" file="npc/cli/core.py" line="216">
			<system-out>    parser_settings.add_argument('-t', '--type', choices=['base', 'changeling'], help=&quot;Open a type-specific settings file&quot;, metavar='type', dest='settings_type')</system-out>
		</testcase>
		<testcase name="Mutant #2174" file="npc/cli/core.py" line="216">
			<system-out>    parser_settings.add_argument('-t', '--type', choices=['base', 'changeling'], help=&quot;Open a type-specific settings file&quot;, metavar='type', dest='settings_type')</system-out>
		</testcase>
		<testcase name="Mutant #2175" file="npc/cli/core.py" line="216">
			<system-out>    parser_settings.add_argument('-t', '--type', choices=['base', 'changeling'], help=&quot;Open a type-specific settings file&quot;, metavar='type', dest='settings_type')</system-out>
		</testcase>
		<testcase name="Mutant #2176" file="npc/cli/core.py" line="217">
			<system-out>    parser_settings.add_argument('-d', '--defaults', action=&quot;store_true&quot;, default=False, help=&quot;Open the default settings file for easy reference&quot;, dest='show_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #2177" file="npc/cli/core.py" line="217">
			<system-out>    parser_settings.add_argument('-d', '--defaults', action=&quot;store_true&quot;, default=False, help=&quot;Open the default settings file for easy reference&quot;, dest='show_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #2178" file="npc/cli/core.py" line="217">
			<system-out>    parser_settings.add_argument('-d', '--defaults', action=&quot;store_true&quot;, default=False, help=&quot;Open the default settings file for easy reference&quot;, dest='show_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #2179" file="npc/cli/core.py" line="217">
			<system-out>    parser_settings.add_argument('-d', '--defaults', action=&quot;store_true&quot;, default=False, help=&quot;Open the default settings file for easy reference&quot;, dest='show_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #2180" file="npc/cli/core.py" line="217">
			<system-out>    parser_settings.add_argument('-d', '--defaults', action=&quot;store_true&quot;, default=False, help=&quot;Open the default settings file for easy reference&quot;, dest='show_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #2181" file="npc/cli/core.py" line="217">
			<system-out>    parser_settings.add_argument('-d', '--defaults', action=&quot;store_true&quot;, default=False, help=&quot;Open the default settings file for easy reference&quot;, dest='show_defaults')</system-out>
		</testcase>
		<testcase name="Mutant #2182" file="npc/cli/core.py" line="221">
			<system-out>    parser_report = subparsers.add_parser('report', parents=[common_options, paths_parser], help=&quot;Create a report of the values for one or more tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2183" file="npc/cli/core.py" line="221">
			<system-out>    parser_report = subparsers.add_parser('report', parents=[common_options, paths_parser], help=&quot;Create a report of the values for one or more tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2184" file="npc/cli/core.py" line="221">
			<system-out>    parser_report = subparsers.add_parser('report', parents=[common_options, paths_parser], help=&quot;Create a report of the values for one or more tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2185" file="npc/cli/core.py" line="222">
			<system-out>    parser_report.add_argument('tags', nargs=&quot;+&quot;, help=&quot;Tag names to analyze&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2186" file="npc/cli/core.py" line="222">
			<system-out>    parser_report.add_argument('tags', nargs=&quot;+&quot;, help=&quot;Tag names to analyze&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2187" file="npc/cli/core.py" line="222">
			<system-out>    parser_report.add_argument('tags', nargs=&quot;+&quot;, help=&quot;Tag names to analyze&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2188" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2189" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2190" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2191" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2192" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2193" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2194" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2195" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2196" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2197" file="npc/cli/core.py" line="223">
			<system-out>    parser_report.add_argument('-t', '--format', choices=['json', 'htm', 'html', 'md', 'markdown'], default='default', help=&quot;Format to use for the tables. Defaults to the table format in settings&quot;, dest=&quot;fmt&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2198" file="npc/cli/core.py" line="224">
			<system-out>    parser_report.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2199" file="npc/cli/core.py" line="224">
			<system-out>    parser_report.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2200" file="npc/cli/core.py" line="224">
			<system-out>    parser_report.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2201" file="npc/cli/core.py" line="224">
			<system-out>    parser_report.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2202" file="npc/cli/core.py" line="224">
			<system-out>    parser_report.add_argument('-o', '--outfile', nargs=&quot;?&quot;, const='-', default=None, help=&quot;File where the listing will be saved&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2203" file="npc/cli/core.py" line="228">
			<system-out>    parser_find = subparsers.add_parser('find', parents=[common_options, paths_parser], help=&quot;Find characters by their tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2204" file="npc/cli/core.py" line="228">
			<system-out>    parser_find = subparsers.add_parser('find', parents=[common_options, paths_parser], help=&quot;Find characters by their tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2205" file="npc/cli/core.py" line="228">
			<system-out>    parser_find = subparsers.add_parser('find', parents=[common_options, paths_parser], help=&quot;Find characters by their tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2206" file="npc/cli/core.py" line="229">
			<system-out>    parser_find.add_argument('rules', nargs=&quot;+&quot;, help=&quot;Rules to search by. Format for each is tag:text. Negate with tag~:text.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2207" file="npc/cli/core.py" line="229">
			<system-out>    parser_find.add_argument('rules', nargs=&quot;+&quot;, help=&quot;Rules to search by. Format for each is tag:text. Negate with tag~:text.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2208" file="npc/cli/core.py" line="229">
			<system-out>    parser_find.add_argument('rules', nargs=&quot;+&quot;, help=&quot;Rules to search by. Format for each is tag:text. Negate with tag~:text.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2209" file="npc/cli/core.py" line="230">
			<system-out>    parser_find.add_argument('-d', '--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show the files that would be opened, but don't open anything&quot;, dest=&quot;dryrun&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2210" file="npc/cli/core.py" line="230">
			<system-out>    parser_find.add_argument('-d', '--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show the files that would be opened, but don't open anything&quot;, dest=&quot;dryrun&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2211" file="npc/cli/core.py" line="230">
			<system-out>    parser_find.add_argument('-d', '--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show the files that would be opened, but don't open anything&quot;, dest=&quot;dryrun&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2212" file="npc/cli/core.py" line="230">
			<system-out>    parser_find.add_argument('-d', '--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show the files that would be opened, but don't open anything&quot;, dest=&quot;dryrun&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2213" file="npc/cli/core.py" line="230">
			<system-out>    parser_find.add_argument('-d', '--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show the files that would be opened, but don't open anything&quot;, dest=&quot;dryrun&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2214" file="npc/cli/core.py" line="230">
			<system-out>    parser_find.add_argument('-d', '--dryrun', action=&quot;store_true&quot;, default=False, help=&quot;Show the files that would be opened, but don't open anything&quot;, dest=&quot;dryrun&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2215" file="npc/cli/core.py" line="237">
			<system-out>    progress_bar.bar(index, total, prefix='Generating:', length=50)</system-out>
		</testcase>
		<testcase name="Mutant #2216" file="npc/cli/core.py" line="237">
			<system-out>    progress_bar.bar(index, total, prefix='Generating:', length=50)</system-out>
		</testcase>
		<testcase name="Mutant #2217" file="npc/cli/progress_bar.py" line="3">
			<system-out>def bar(iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '#'):</system-out>
		</testcase>
		<testcase name="Mutant #2218" file="npc/cli/progress_bar.py" line="3">
			<system-out>def bar(iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '#'):</system-out>
		</testcase>
		<testcase name="Mutant #2219" file="npc/cli/progress_bar.py" line="3">
			<system-out>def bar(iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '#'):</system-out>
		</testcase>
		<testcase name="Mutant #2220" file="npc/cli/progress_bar.py" line="3">
			<system-out>def bar(iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '#'):</system-out>
		</testcase>
		<testcase name="Mutant #2221" file="npc/cli/progress_bar.py" line="3">
			<system-out>def bar(iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '#'):</system-out>
		</testcase>
		<testcase name="Mutant #2222" file="npc/cli/progress_bar.py" line="18">
			<system-out>    total = total or 1</system-out>
		</testcase>
		<testcase name="Mutant #2223" file="npc/cli/progress_bar.py" line="18">
			<system-out>    total = total or 1</system-out>
		</testcase>
		<testcase name="Mutant #2224" file="npc/cli/progress_bar.py" line="18">
			<system-out>    total = total or 1</system-out>
		</testcase>
		<testcase name="Mutant #2225" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2226" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2227" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2228" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2229" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2230" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2231" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2232" file="npc/cli/progress_bar.py" line="20">
			<system-out>    percent = (&quot;{0:.&quot; + str(decimals) + &quot;f}&quot;).format(100 * (iteration / float(total)))</system-out>
		</testcase>
		<testcase name="Mutant #2233" file="npc/cli/progress_bar.py" line="21">
			<system-out>    filledLength = int(length * iteration // total)</system-out>
		</testcase>
		<testcase name="Mutant #2234" file="npc/cli/progress_bar.py" line="21">
			<system-out>    filledLength = int(length * iteration // total)</system-out>
		</testcase>
		<testcase name="Mutant #2235" file="npc/cli/progress_bar.py" line="21">
			<system-out>    filledLength = int(length * iteration // total)</system-out>
		</testcase>
		<testcase name="Mutant #2236" file="npc/cli/progress_bar.py" line="22">
			<system-out>    bar = fill * filledLength + '-' * (length - filledLength)</system-out>
		</testcase>
		<testcase name="Mutant #2237" file="npc/cli/progress_bar.py" line="22">
			<system-out>    bar = fill * filledLength + '-' * (length - filledLength)</system-out>
		</testcase>
		<testcase name="Mutant #2238" file="npc/cli/progress_bar.py" line="22">
			<system-out>    bar = fill * filledLength + '-' * (length - filledLength)</system-out>
		</testcase>
		<testcase name="Mutant #2239" file="npc/cli/progress_bar.py" line="22">
			<system-out>    bar = fill * filledLength + '-' * (length - filledLength)</system-out>
		</testcase>
		<testcase name="Mutant #2240" file="npc/cli/progress_bar.py" line="22">
			<system-out>    bar = fill * filledLength + '-' * (length - filledLength)</system-out>
		</testcase>
		<testcase name="Mutant #2241" file="npc/cli/progress_bar.py" line="22">
			<system-out>    bar = fill * filledLength + '-' * (length - filledLength)</system-out>
		</testcase>
		<testcase name="Mutant #2242" file="npc/cli/progress_bar.py" line="23">
			<system-out>    print_err('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')</system-out>
		</testcase>
		<testcase name="Mutant #2243" file="npc/cli/progress_bar.py" line="23">
			<system-out>    print_err('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')</system-out>
		</testcase>
		<testcase name="Mutant #2244" file="npc/cli/progress_bar.py" line="23">
			<system-out>    print_err('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')</system-out>
		</testcase>
		<testcase name="Mutant #2245" file="npc/cli/progress_bar.py" line="25">
			<system-out>    if iteration == total:</system-out>
		</testcase>
		<testcase name="Mutant #2246" file="npc/linters/changeling.py" line="12">
			<system-out>REPLACEABLE = ('x', 'y')</system-out>
		</testcase>
		<testcase name="Mutant #2247" file="npc/linters/changeling.py" line="12">
			<system-out>REPLACEABLE = ('x', 'y')</system-out>
		</testcase>
		<testcase name="Mutant #2248" file="npc/linters/changeling.py" line="12">
			<system-out>REPLACEABLE = ('x', 'y')</system-out>
		</testcase>
		<testcase name="Mutant #2249" file="npc/linters/changeling.py" line="15">
			<system-out>SEEMING_REGEX = r'^(?P&lt;name&gt;\s+seeming\s+)(?P&lt;seeming&gt;{})[ \t]*(?P&lt;notes&gt;\(.*\))?$'</system-out>
		</testcase>
		<testcase name="Mutant #2250" file="npc/linters/changeling.py" line="15">
			<system-out>SEEMING_REGEX = r'^(?P&lt;name&gt;\s+seeming\s+)(?P&lt;seeming&gt;{})[ \t]*(?P&lt;notes&gt;\(.*\))?$'</system-out>
		</testcase>
		<testcase name="Mutant #2251" file="npc/linters/changeling.py" line="18">
			<system-out>KITH_REGEX = r'^(?P&lt;name&gt;\s+kith\s+)(?P&lt;kith&gt;{})[ \t]*(?P&lt;notes&gt;\(.*\))?$'</system-out>
		</testcase>
		<testcase name="Mutant #2252" file="npc/linters/changeling.py" line="18">
			<system-out>KITH_REGEX = r'^(?P&lt;name&gt;\s+kith\s+)(?P&lt;kith&gt;{})[ \t]*(?P&lt;notes&gt;\(.*\))?$'</system-out>
		</testcase>
		<testcase name="Mutant #2253" file="npc/linters/changeling.py" line="21">
			<system-out>STANDARD_MANTLE_REGEX = r'^\s+mantle\s+\((?P&lt;court&gt;[a-zA-Z ]+)\)'</system-out>
		</testcase>
		<testcase name="Mutant #2254" file="npc/linters/changeling.py" line="21">
			<system-out>STANDARD_MANTLE_REGEX = r'^\s+mantle\s+\((?P&lt;court&gt;[a-zA-Z ]+)\)'</system-out>
		</testcase>
		<testcase name="Mutant #2255" file="npc/linters/changeling.py" line="24">
			<system-out>ALT_MANTLE_REGEX = r'^\s+(?P&lt;court&gt;[a-zA-Z]+) (?:court )?mantle'</system-out>
		</testcase>
		<testcase name="Mutant #2256" file="npc/linters/changeling.py" line="24">
			<system-out>ALT_MANTLE_REGEX = r'^\s+(?P&lt;court&gt;[a-zA-Z]+) (?:court )?mantle'</system-out>
		</testcase>
		<testcase name="Mutant #2257" file="npc/linters/changeling.py" line="30">
			<system-out>STANDARD_GOODWILL_REGEX = r'^\s+(?:court )?goodwill\s+\((?P&lt;court&gt;[a-zA-Z ]+)\)'</system-out>
		</testcase>
		<testcase name="Mutant #2258" file="npc/linters/changeling.py" line="30">
			<system-out>STANDARD_GOODWILL_REGEX = r'^\s+(?:court )?goodwill\s+\((?P&lt;court&gt;[a-zA-Z ]+)\)'</system-out>
		</testcase>
		<testcase name="Mutant #2259" file="npc/linters/changeling.py" line="35">
			<system-out>ALT_GOODWILL_REGEX = r'^\s+(?P&lt;court&gt;[a-zA-Z]+) (?:court )?goodwill'</system-out>
		</testcase>
		<testcase name="Mutant #2260" file="npc/linters/changeling.py" line="35">
			<system-out>ALT_GOODWILL_REGEX = r'^\s+(?P&lt;court&gt;[a-zA-Z]+) (?:court )?goodwill'</system-out>
		</testcase>
		<testcase name="Mutant #2261" file="npc/linters/changeling.py" line="41">
			<system-out>UNSEEN_SENSE_REGEX = r'^\s+Unseen Sense\s+\((?P&lt;thing&gt;[\w\s]+)\)'</system-out>
		</testcase>
		<testcase name="Mutant #2262" file="npc/linters/changeling.py" line="41">
			<system-out>UNSEEN_SENSE_REGEX = r'^\s+Unseen Sense\s+\((?P&lt;thing&gt;[\w\s]+)\)'</system-out>
		</testcase>
		<testcase name="Mutant #2263" file="npc/linters/changeling.py" line="43">
			<system-out>def lint(character, fix=False, *, strict=False, sk_data=None):</system-out>
		</testcase>
		<testcase name="Mutant #2264" file="npc/linters/changeling.py" line="43">
			<system-out>def lint(character, fix=False, *, strict=False, sk_data=None):</system-out>
		</testcase>
		<testcase name="Mutant #2265" file="npc/linters/changeling.py" line="78">
			<system-out>    problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2266" file="npc/linters/changeling.py" line="79">
			<system-out>    dirty = False</system-out>
		</testcase>
		<testcase name="Mutant #2267" file="npc/linters/changeling.py" line="79">
			<system-out>    dirty = False</system-out>
		</testcase>
		<testcase name="Mutant #2268" file="npc/linters/changeling.py" line="81">
			<system-out>    if character.type_key != 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #2269" file="npc/linters/changeling.py" line="81">
			<system-out>    if character.type_key != 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #2270" file="npc/linters/changeling.py" line="82">
			<system-out>        problems.append('Attempting to lint non-changeling character using changeling linter')</system-out>
		</testcase>
		<testcase name="Mutant #2271" file="npc/linters/changeling.py" line="86">
			<system-out>    for seeming_name in character.tags('seeming'):</system-out>
		</testcase>
		<testcase name="Mutant #2272" file="npc/linters/changeling.py" line="87">
			<system-out>        if seeming_name.lower() not in sk_data['seemings']:</system-out>
		</testcase>
		<testcase name="Mutant #2273" file="npc/linters/changeling.py" line="87">
			<system-out>        if seeming_name.lower() not in sk_data['seemings']:</system-out>
		</testcase>
		<testcase name="Mutant #2274" file="npc/linters/changeling.py" line="88">
			<system-out>            problems.append(&quot;Unrecognized @seeming '{}'&quot;.format(seeming_name))</system-out>
		</testcase>
		<testcase name="Mutant #2275" file="npc/linters/changeling.py" line="91">
			<system-out>    all_kiths = flatten(sk_data['kiths'].values())</system-out>
		</testcase>
		<testcase name="Mutant #2276" file="npc/linters/changeling.py" line="91">
			<system-out>    all_kiths = flatten(sk_data['kiths'].values())</system-out>
		</testcase>
		<testcase name="Mutant #2277" file="npc/linters/changeling.py" line="92">
			<system-out>    for kith_name in character.tags('kith'):</system-out>
		</testcase>
		<testcase name="Mutant #2278" file="npc/linters/changeling.py" line="93">
			<system-out>        if kith_name.lower() not in all_kiths:</system-out>
		</testcase>
		<testcase name="Mutant #2279" file="npc/linters/changeling.py" line="94">
			<system-out>            problems.append(&quot;Unrecognized @kith '{}'&quot;.format(kith_name))</system-out>
		</testcase>
		<testcase name="Mutant #2280" file="npc/linters/changeling.py" line="97">
			<system-out>    if not character.path:</system-out>
		</testcase>
		<testcase name="Mutant #2281" file="npc/linters/changeling.py" line="101">
			<system-out>    with open(character.path, 'r') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #2282" file="npc/linters/changeling.py" line="102">
			<system-out>        data = char_file.read()</system-out>
		</testcase>
		<testcase name="Mutant #2283" file="npc/linters/changeling.py" line="109">
			<system-out>    court = character.tags('court').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2284" file="npc/linters/changeling.py" line="109">
			<system-out>    court = character.tags('court').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2285" file="npc/linters/changeling.py" line="110">
			<system-out>    if not court:</system-out>
		</testcase>
		<testcase name="Mutant #2286" file="npc/linters/changeling.py" line="111">
			<system-out>        court = 'none'</system-out>
		</testcase>
		<testcase name="Mutant #2287" file="npc/linters/changeling.py" line="111">
			<system-out>        court = 'none'</system-out>
		</testcase>
		<testcase name="Mutant #2288" file="npc/linters/changeling.py" line="114">
			<system-out>    court_key = court.lower()</system-out>
		</testcase>
		<testcase name="Mutant #2289" file="npc/linters/changeling.py" line="115">
			<system-out>    mantle_courts = _get_mantle(data)</system-out>
		</testcase>
		<testcase name="Mutant #2290" file="npc/linters/changeling.py" line="116">
			<system-out>    mantle_court_keys = [c.lower() for c in mantle_courts]</system-out>
		</testcase>
		<testcase name="Mutant #2291" file="npc/linters/changeling.py" line="118">
			<system-out>        if len(mantle_courts) &gt; 1:</system-out>
		</testcase>
		<testcase name="Mutant #2292" file="npc/linters/changeling.py" line="118">
			<system-out>        if len(mantle_courts) &gt; 1:</system-out>
		</testcase>
		<testcase name="Mutant #2293" file="npc/linters/changeling.py" line="119">
			<system-out>            problems.append(&quot;Multiple mantle merits: {}&quot;.format(', '.join(mantle_courts)))</system-out>
		</testcase>
		<testcase name="Mutant #2294" file="npc/linters/changeling.py" line="119">
			<system-out>            problems.append(&quot;Multiple mantle merits: {}&quot;.format(', '.join(mantle_courts)))</system-out>
		</testcase>
		<testcase name="Mutant #2295" file="npc/linters/changeling.py" line="120">
			<system-out>        elif court_key != mantle_court_keys[0]:</system-out>
		</testcase>
		<testcase name="Mutant #2296" file="npc/linters/changeling.py" line="120">
			<system-out>        elif court_key != mantle_court_keys[0]:</system-out>
		</testcase>
		<testcase name="Mutant #2297" file="npc/linters/changeling.py" line="121">
			<system-out>            problems.append(&quot;Court mantle '{}' does not match court tag '{}'&quot;.format(mantle_courts[0], court))</system-out>
		</testcase>
		<testcase name="Mutant #2298" file="npc/linters/changeling.py" line="121">
			<system-out>            problems.append(&quot;Court mantle '{}' does not match court tag '{}'&quot;.format(mantle_courts[0], court))</system-out>
		</testcase>
		<testcase name="Mutant #2299" file="npc/linters/changeling.py" line="124">
			<system-out>    goodwill_courts = _get_goodwill(data)</system-out>
		</testcase>
		<testcase name="Mutant #2300" file="npc/linters/changeling.py" line="125">
			<system-out>    goodwill_court_keys = [c.lower() for c in goodwill_courts]</system-out>
		</testcase>
		<testcase name="Mutant #2301" file="npc/linters/changeling.py" line="127">
			<system-out>        if court_key in goodwill_court_keys:</system-out>
		</testcase>
		<testcase name="Mutant #2302" file="npc/linters/changeling.py" line="128">
			<system-out>            problems.append(&quot;Court goodwill listed for court tag '{}'&quot;.format(court))</system-out>
		</testcase>
		<testcase name="Mutant #2303" file="npc/linters/changeling.py" line="129">
			<system-out>        if mantle_courts and mantle_court_keys[0] in goodwill_court_keys:</system-out>
		</testcase>
		<testcase name="Mutant #2304" file="npc/linters/changeling.py" line="129">
			<system-out>        if mantle_courts and mantle_court_keys[0] in goodwill_court_keys:</system-out>
		</testcase>
		<testcase name="Mutant #2305" file="npc/linters/changeling.py" line="129">
			<system-out>        if mantle_courts and mantle_court_keys[0] in goodwill_court_keys:</system-out>
		</testcase>
		<testcase name="Mutant #2306" file="npc/linters/changeling.py" line="130">
			<system-out>            problems.append(&quot;Court goodwill listed for court mantle '{}'&quot;.format(mantle_courts[0]))</system-out>
		</testcase>
		<testcase name="Mutant #2307" file="npc/linters/changeling.py" line="130">
			<system-out>            problems.append(&quot;Court goodwill listed for court mantle '{}'&quot;.format(mantle_courts[0]))</system-out>
		</testcase>
		<testcase name="Mutant #2308" file="npc/linters/changeling.py" line="133">
			<system-out>    if strict and court and court_key not in mantle_court_keys:</system-out>
		</testcase>
		<testcase name="Mutant #2309" file="npc/linters/changeling.py" line="133">
			<system-out>    if strict and court and court_key not in mantle_court_keys:</system-out>
		</testcase>
		<testcase name="Mutant #2310" file="npc/linters/changeling.py" line="134">
			<system-out>        problems.append(&quot;No mantle for court '{}'&quot;.format(court))</system-out>
		</testcase>
		<testcase name="Mutant #2311" file="npc/linters/changeling.py" line="137">
			<system-out>    unseen_sense = _get_unseen_sense(data)</system-out>
		</testcase>
		<testcase name="Mutant #2312" file="npc/linters/changeling.py" line="138">
			<system-out>    if strict and unseen_sense:</system-out>
		</testcase>
		<testcase name="Mutant #2313" file="npc/linters/changeling.py" line="139">
			<system-out>        problems.append(&quot;Changelings cannot have the Unseen Sense merit&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2314" file="npc/linters/changeling.py" line="142">
			<system-out>    seeming_tags = [t.lower() for t in character.tags['seeming']]</system-out>
		</testcase>
		<testcase name="Mutant #2315" file="npc/linters/changeling.py" line="142">
			<system-out>    seeming_tags = [t.lower() for t in character.tags['seeming']]</system-out>
		</testcase>
		<testcase name="Mutant #2316" file="npc/linters/changeling.py" line="146">
			<system-out>            SEEMING_REGEX.format(r'\w+'),</system-out>
		</testcase>
		<testcase name="Mutant #2317" file="npc/linters/changeling.py" line="147">
			<system-out>            re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2318" file="npc/linters/changeling.py" line="148">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2319" file="npc/linters/changeling.py" line="149">
			<system-out>        seeming_matches = list(seeming_re.finditer(data))</system-out>
		</testcase>
		<testcase name="Mutant #2320" file="npc/linters/changeling.py" line="150">
			<system-out>        seeming_stat_names = [m.group('seeming').lower() for m in seeming_matches]</system-out>
		</testcase>
		<testcase name="Mutant #2321" file="npc/linters/changeling.py" line="150">
			<system-out>        seeming_stat_names = [m.group('seeming').lower() for m in seeming_matches]</system-out>
		</testcase>
		<testcase name="Mutant #2322" file="npc/linters/changeling.py" line="151">
			<system-out>        if set(seeming_tags) != set(seeming_stat_names):</system-out>
		</testcase>
		<testcase name="Mutant #2323" file="npc/linters/changeling.py" line="152">
			<system-out>            problems.append(&quot;Seeming stats do not match @seeming tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2324" file="npc/linters/changeling.py" line="153">
			<system-out>            if (len(seeming_stat_names) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2325" file="npc/linters/changeling.py" line="153">
			<system-out>            if (len(seeming_stat_names) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2326" file="npc/linters/changeling.py" line="154">
			<system-out>                    and len(seeming_tags) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2327" file="npc/linters/changeling.py" line="154">
			<system-out>                    and len(seeming_tags) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2328" file="npc/linters/changeling.py" line="155">
			<system-out>                    and seeming_stat_names[0] in REPLACEABLE):</system-out>
		</testcase>
		<testcase name="Mutant #2329" file="npc/linters/changeling.py" line="155">
			<system-out>                    and seeming_stat_names[0] in REPLACEABLE):</system-out>
		</testcase>
		<testcase name="Mutant #2330" file="npc/linters/changeling.py" line="155">
			<system-out>                    and seeming_stat_names[0] in REPLACEABLE):</system-out>
		</testcase>
		<testcase name="Mutant #2331" file="npc/linters/changeling.py" line="157">
			<system-out>                    seeming_tag = seeming_tags[0]</system-out>
		</testcase>
		<testcase name="Mutant #2332" file="npc/linters/changeling.py" line="157">
			<system-out>                    seeming_tag = seeming_tags[0]</system-out>
		</testcase>
		<testcase name="Mutant #2333" file="npc/linters/changeling.py" line="160">
			<system-out>                            'title': seeming_tag.title(),</system-out>
		</testcase>
		<testcase name="Mutant #2334" file="npc/linters/changeling.py" line="161">
			<system-out>                            'seeming': sk_data['blessings'][seeming_tag],</system-out>
		</testcase>
		<testcase name="Mutant #2335" file="npc/linters/changeling.py" line="161">
			<system-out>                            'seeming': sk_data['blessings'][seeming_tag],</system-out>
		</testcase>
		<testcase name="Mutant #2336" file="npc/linters/changeling.py" line="162">
			<system-out>                            'kith': sk_data['curses'][seeming_tag]</system-out>
		</testcase>
		<testcase name="Mutant #2337" file="npc/linters/changeling.py" line="162">
			<system-out>                            'kith': sk_data['curses'][seeming_tag]</system-out>
		</testcase>
		<testcase name="Mutant #2338" file="npc/linters/changeling.py" line="163">
			<system-out>                        }</system-out>
		</testcase>
		<testcase name="Mutant #2339" file="npc/linters/changeling.py" line="164">
			<system-out>                        seeming_line = &quot;{title} ({seeming}; {kith})&quot;.format(**seeming_parts)</system-out>
		</testcase>
		<testcase name="Mutant #2340" file="npc/linters/changeling.py" line="164">
			<system-out>                        seeming_line = &quot;{title} ({seeming}; {kith})&quot;.format(**seeming_parts)</system-out>
		</testcase>
		<testcase name="Mutant #2341" file="npc/linters/changeling.py" line="166">
			<system-out>                        seeming_line = seeming_tag.title()</system-out>
		</testcase>
		<testcase name="Mutant #2342" file="npc/linters/changeling.py" line="169">
			<system-out>                        r'\g&lt;1&gt;{}'.format(seeming_line),</system-out>
		</testcase>
		<testcase name="Mutant #2343" file="npc/linters/changeling.py" line="171">
			<system-out>                    )</system-out>
		</testcase>
		<testcase name="Mutant #2344" file="npc/linters/changeling.py" line="172">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2345" file="npc/linters/changeling.py" line="172">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2346" file="npc/linters/changeling.py" line="172">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2347" file="npc/linters/changeling.py" line="172">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2348" file="npc/linters/changeling.py" line="172">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2349" file="npc/linters/changeling.py" line="173">
			<system-out>                    dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2350" file="npc/linters/changeling.py" line="173">
			<system-out>                    dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2351" file="npc/linters/changeling.py" line="175">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2352" file="npc/linters/changeling.py" line="175">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2353" file="npc/linters/changeling.py" line="175">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2354" file="npc/linters/changeling.py" line="175">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2355" file="npc/linters/changeling.py" line="175">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2356" file="npc/linters/changeling.py" line="180">
			<system-out>                seeming_tag = match.group('seeming').lower()</system-out>
		</testcase>
		<testcase name="Mutant #2357" file="npc/linters/changeling.py" line="180">
			<system-out>                seeming_tag = match.group('seeming').lower()</system-out>
		</testcase>
		<testcase name="Mutant #2358" file="npc/linters/changeling.py" line="181">
			<system-out>                if not seeming_tag in sk_data['seemings']:</system-out>
		</testcase>
		<testcase name="Mutant #2359" file="npc/linters/changeling.py" line="181">
			<system-out>                if not seeming_tag in sk_data['seemings']:</system-out>
		</testcase>
		<testcase name="Mutant #2360" file="npc/linters/changeling.py" line="181">
			<system-out>                if not seeming_tag in sk_data['seemings']:</system-out>
		</testcase>
		<testcase name="Mutant #2361" file="npc/linters/changeling.py" line="182">
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #2362" file="npc/linters/changeling.py" line="184">
			<system-out>                loaded_seeming_notes = match.group('notes')</system-out>
		</testcase>
		<testcase name="Mutant #2363" file="npc/linters/changeling.py" line="184">
			<system-out>                loaded_seeming_notes = match.group('notes')</system-out>
		</testcase>
		<testcase name="Mutant #2364" file="npc/linters/changeling.py" line="185">
			<system-out>                seeming_notes = &quot;({}; {})&quot;.format(sk_data['blessings'][seeming_tag], sk_data['curses'][seeming_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2365" file="npc/linters/changeling.py" line="185">
			<system-out>                seeming_notes = &quot;({}; {})&quot;.format(sk_data['blessings'][seeming_tag], sk_data['curses'][seeming_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2366" file="npc/linters/changeling.py" line="185">
			<system-out>                seeming_notes = &quot;({}; {})&quot;.format(sk_data['blessings'][seeming_tag], sk_data['curses'][seeming_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2367" file="npc/linters/changeling.py" line="185">
			<system-out>                seeming_notes = &quot;({}; {})&quot;.format(sk_data['blessings'][seeming_tag], sk_data['curses'][seeming_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2368" file="npc/linters/changeling.py" line="186">
			<system-out>                if not loaded_seeming_notes:</system-out>
		</testcase>
		<testcase name="Mutant #2369" file="npc/linters/changeling.py" line="187">
			<system-out>                    problems.append(&quot;Missing notes for Seeming '{}'&quot;.format(match.group('seeming')))</system-out>
		</testcase>
		<testcase name="Mutant #2370" file="npc/linters/changeling.py" line="187">
			<system-out>                    problems.append(&quot;Missing notes for Seeming '{}'&quot;.format(match.group('seeming')))</system-out>
		</testcase>
		<testcase name="Mutant #2371" file="npc/linters/changeling.py" line="189">
			<system-out>                        data = _fix_seeming_notes(match.group('seeming'), seeming_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2372" file="npc/linters/changeling.py" line="189">
			<system-out>                        data = _fix_seeming_notes(match.group('seeming'), seeming_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2373" file="npc/linters/changeling.py" line="190">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2374" file="npc/linters/changeling.py" line="190">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2375" file="npc/linters/changeling.py" line="190">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2376" file="npc/linters/changeling.py" line="190">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2377" file="npc/linters/changeling.py" line="190">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2378" file="npc/linters/changeling.py" line="191">
			<system-out>                        dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2379" file="npc/linters/changeling.py" line="191">
			<system-out>                        dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2380" file="npc/linters/changeling.py" line="193">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2381" file="npc/linters/changeling.py" line="193">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2382" file="npc/linters/changeling.py" line="193">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2383" file="npc/linters/changeling.py" line="193">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2384" file="npc/linters/changeling.py" line="193">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2385" file="npc/linters/changeling.py" line="195">
			<system-out>                    if loaded_seeming_notes != seeming_notes:</system-out>
		</testcase>
		<testcase name="Mutant #2386" file="npc/linters/changeling.py" line="196">
			<system-out>                        problems.append(&quot;Incorrect notes for Seeming '{}'&quot;.format(match.group('seeming')))</system-out>
		</testcase>
		<testcase name="Mutant #2387" file="npc/linters/changeling.py" line="196">
			<system-out>                        problems.append(&quot;Incorrect notes for Seeming '{}'&quot;.format(match.group('seeming')))</system-out>
		</testcase>
		<testcase name="Mutant #2388" file="npc/linters/changeling.py" line="198">
			<system-out>                            data = _fix_seeming_notes(match.group('seeming'), seeming_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2389" file="npc/linters/changeling.py" line="198">
			<system-out>                            data = _fix_seeming_notes(match.group('seeming'), seeming_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2390" file="npc/linters/changeling.py" line="199">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2391" file="npc/linters/changeling.py" line="199">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2392" file="npc/linters/changeling.py" line="199">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2393" file="npc/linters/changeling.py" line="199">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2394" file="npc/linters/changeling.py" line="199">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2395" file="npc/linters/changeling.py" line="200">
			<system-out>                            dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2396" file="npc/linters/changeling.py" line="200">
			<system-out>                            dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2397" file="npc/linters/changeling.py" line="202">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2398" file="npc/linters/changeling.py" line="202">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2399" file="npc/linters/changeling.py" line="202">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2400" file="npc/linters/changeling.py" line="202">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2401" file="npc/linters/changeling.py" line="202">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2402" file="npc/linters/changeling.py" line="206">
			<system-out>    kith_tags = [t.lower() for t in character.tags['kith']]</system-out>
		</testcase>
		<testcase name="Mutant #2403" file="npc/linters/changeling.py" line="206">
			<system-out>    kith_tags = [t.lower() for t in character.tags['kith']]</system-out>
		</testcase>
		<testcase name="Mutant #2404" file="npc/linters/changeling.py" line="210">
			<system-out>            KITH_REGEX.format(r'\w+( \w+)?'),</system-out>
		</testcase>
		<testcase name="Mutant #2405" file="npc/linters/changeling.py" line="211">
			<system-out>            re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2406" file="npc/linters/changeling.py" line="212">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2407" file="npc/linters/changeling.py" line="213">
			<system-out>        kith_matches = list(kith_re.finditer(data))</system-out>
		</testcase>
		<testcase name="Mutant #2408" file="npc/linters/changeling.py" line="214">
			<system-out>        kith_stat_names = [m.group('kith').lower() for m in kith_matches]</system-out>
		</testcase>
		<testcase name="Mutant #2409" file="npc/linters/changeling.py" line="214">
			<system-out>        kith_stat_names = [m.group('kith').lower() for m in kith_matches]</system-out>
		</testcase>
		<testcase name="Mutant #2410" file="npc/linters/changeling.py" line="215">
			<system-out>        if set(kith_tags) != set([m.group('kith').lower() for m in kith_matches]):</system-out>
		</testcase>
		<testcase name="Mutant #2411" file="npc/linters/changeling.py" line="215">
			<system-out>        if set(kith_tags) != set([m.group('kith').lower() for m in kith_matches]):</system-out>
		</testcase>
		<testcase name="Mutant #2412" file="npc/linters/changeling.py" line="216">
			<system-out>            problems.append(&quot;Kith stats do not match @kith tags&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2413" file="npc/linters/changeling.py" line="217">
			<system-out>            if (len(kith_stat_names) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2414" file="npc/linters/changeling.py" line="217">
			<system-out>            if (len(kith_stat_names) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2415" file="npc/linters/changeling.py" line="218">
			<system-out>                    and len(kith_tags) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2416" file="npc/linters/changeling.py" line="218">
			<system-out>                    and len(kith_tags) == 1</system-out>
		</testcase>
		<testcase name="Mutant #2417" file="npc/linters/changeling.py" line="219">
			<system-out>                    and kith_stat_names[0] in REPLACEABLE):</system-out>
		</testcase>
		<testcase name="Mutant #2418" file="npc/linters/changeling.py" line="219">
			<system-out>                    and kith_stat_names[0] in REPLACEABLE):</system-out>
		</testcase>
		<testcase name="Mutant #2419" file="npc/linters/changeling.py" line="219">
			<system-out>                    and kith_stat_names[0] in REPLACEABLE):</system-out>
		</testcase>
		<testcase name="Mutant #2420" file="npc/linters/changeling.py" line="221">
			<system-out>                    kith_tag = kith_tags[0]</system-out>
		</testcase>
		<testcase name="Mutant #2421" file="npc/linters/changeling.py" line="221">
			<system-out>                    kith_tag = kith_tags[0]</system-out>
		</testcase>
		<testcase name="Mutant #2422" file="npc/linters/changeling.py" line="223">
			<system-out>                        kith_line = &quot;{} ({})&quot;.format(kith_tag.title(), sk_data['blessings'][kith_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2423" file="npc/linters/changeling.py" line="223">
			<system-out>                        kith_line = &quot;{} ({})&quot;.format(kith_tag.title(), sk_data['blessings'][kith_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2424" file="npc/linters/changeling.py" line="223">
			<system-out>                        kith_line = &quot;{} ({})&quot;.format(kith_tag.title(), sk_data['blessings'][kith_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2425" file="npc/linters/changeling.py" line="225">
			<system-out>                        kith_line = kith_tag.title()</system-out>
		</testcase>
		<testcase name="Mutant #2426" file="npc/linters/changeling.py" line="228">
			<system-out>                        r'\g&lt;1&gt;{}'.format(kith_line),</system-out>
		</testcase>
		<testcase name="Mutant #2427" file="npc/linters/changeling.py" line="230">
			<system-out>                    )</system-out>
		</testcase>
		<testcase name="Mutant #2428" file="npc/linters/changeling.py" line="231">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2429" file="npc/linters/changeling.py" line="231">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2430" file="npc/linters/changeling.py" line="231">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2431" file="npc/linters/changeling.py" line="231">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2432" file="npc/linters/changeling.py" line="231">
			<system-out>                    problems[-1] += ' (placeholder; FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2433" file="npc/linters/changeling.py" line="232">
			<system-out>                    dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2434" file="npc/linters/changeling.py" line="232">
			<system-out>                    dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2435" file="npc/linters/changeling.py" line="234">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2436" file="npc/linters/changeling.py" line="234">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2437" file="npc/linters/changeling.py" line="234">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2438" file="npc/linters/changeling.py" line="234">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2439" file="npc/linters/changeling.py" line="234">
			<system-out>                    problems[-1] += ' (placeholder; can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2440" file="npc/linters/changeling.py" line="239">
			<system-out>                kith_tag = match.group('kith').lower()</system-out>
		</testcase>
		<testcase name="Mutant #2441" file="npc/linters/changeling.py" line="239">
			<system-out>                kith_tag = match.group('kith').lower()</system-out>
		</testcase>
		<testcase name="Mutant #2442" file="npc/linters/changeling.py" line="240">
			<system-out>                if not kith_tag in sk_data['kiths'][seeming_tag]:</system-out>
		</testcase>
		<testcase name="Mutant #2443" file="npc/linters/changeling.py" line="240">
			<system-out>                if not kith_tag in sk_data['kiths'][seeming_tag]:</system-out>
		</testcase>
		<testcase name="Mutant #2444" file="npc/linters/changeling.py" line="240">
			<system-out>                if not kith_tag in sk_data['kiths'][seeming_tag]:</system-out>
		</testcase>
		<testcase name="Mutant #2445" file="npc/linters/changeling.py" line="241">
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #2446" file="npc/linters/changeling.py" line="243">
			<system-out>                loaded_kith_notes = match.group('notes')</system-out>
		</testcase>
		<testcase name="Mutant #2447" file="npc/linters/changeling.py" line="243">
			<system-out>                loaded_kith_notes = match.group('notes')</system-out>
		</testcase>
		<testcase name="Mutant #2448" file="npc/linters/changeling.py" line="244">
			<system-out>                kith_notes = &quot;({})&quot;.format(sk_data['blessings'][kith_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2449" file="npc/linters/changeling.py" line="244">
			<system-out>                kith_notes = &quot;({})&quot;.format(sk_data['blessings'][kith_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2450" file="npc/linters/changeling.py" line="244">
			<system-out>                kith_notes = &quot;({})&quot;.format(sk_data['blessings'][kith_tag])</system-out>
		</testcase>
		<testcase name="Mutant #2451" file="npc/linters/changeling.py" line="245">
			<system-out>                if not loaded_kith_notes:</system-out>
		</testcase>
		<testcase name="Mutant #2452" file="npc/linters/changeling.py" line="246">
			<system-out>                    problems.append(&quot;Missing notes for Kith '{}'&quot;.format(match.group('kith')))</system-out>
		</testcase>
		<testcase name="Mutant #2453" file="npc/linters/changeling.py" line="246">
			<system-out>                    problems.append(&quot;Missing notes for Kith '{}'&quot;.format(match.group('kith')))</system-out>
		</testcase>
		<testcase name="Mutant #2454" file="npc/linters/changeling.py" line="248">
			<system-out>                        data = _fix_kith_notes(match.group('kith'), kith_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2455" file="npc/linters/changeling.py" line="248">
			<system-out>                        data = _fix_kith_notes(match.group('kith'), kith_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2456" file="npc/linters/changeling.py" line="249">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2457" file="npc/linters/changeling.py" line="249">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2458" file="npc/linters/changeling.py" line="249">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2459" file="npc/linters/changeling.py" line="249">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2460" file="npc/linters/changeling.py" line="249">
			<system-out>                        problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2461" file="npc/linters/changeling.py" line="250">
			<system-out>                        dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2462" file="npc/linters/changeling.py" line="250">
			<system-out>                        dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2463" file="npc/linters/changeling.py" line="252">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2464" file="npc/linters/changeling.py" line="252">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2465" file="npc/linters/changeling.py" line="252">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2466" file="npc/linters/changeling.py" line="252">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2467" file="npc/linters/changeling.py" line="252">
			<system-out>                        problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2468" file="npc/linters/changeling.py" line="254">
			<system-out>                    if loaded_kith_notes != kith_notes:</system-out>
		</testcase>
		<testcase name="Mutant #2469" file="npc/linters/changeling.py" line="255">
			<system-out>                        problems.append(&quot;Incorrect notes for Kith '{}'&quot;.format(match.group('kith')))</system-out>
		</testcase>
		<testcase name="Mutant #2470" file="npc/linters/changeling.py" line="255">
			<system-out>                        problems.append(&quot;Incorrect notes for Kith '{}'&quot;.format(match.group('kith')))</system-out>
		</testcase>
		<testcase name="Mutant #2471" file="npc/linters/changeling.py" line="257">
			<system-out>                            data = _fix_kith_notes(match.group('kith'), kith_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2472" file="npc/linters/changeling.py" line="257">
			<system-out>                            data = _fix_kith_notes(match.group('kith'), kith_notes, data)</system-out>
		</testcase>
		<testcase name="Mutant #2473" file="npc/linters/changeling.py" line="258">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2474" file="npc/linters/changeling.py" line="258">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2475" file="npc/linters/changeling.py" line="258">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2476" file="npc/linters/changeling.py" line="258">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2477" file="npc/linters/changeling.py" line="258">
			<system-out>                            problems[-1] += ' (FIXED)'</system-out>
		</testcase>
		<testcase name="Mutant #2478" file="npc/linters/changeling.py" line="259">
			<system-out>                            dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2479" file="npc/linters/changeling.py" line="259">
			<system-out>                            dirty = True</system-out>
		</testcase>
		<testcase name="Mutant #2480" file="npc/linters/changeling.py" line="261">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2481" file="npc/linters/changeling.py" line="261">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2482" file="npc/linters/changeling.py" line="261">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2483" file="npc/linters/changeling.py" line="261">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2484" file="npc/linters/changeling.py" line="261">
			<system-out>                            problems[-1] += ' (can fix)'</system-out>
		</testcase>
		<testcase name="Mutant #2485" file="npc/linters/changeling.py" line="263">
			<system-out>    if dirty and data:</system-out>
		</testcase>
		<testcase name="Mutant #2486" file="npc/linters/changeling.py" line="264">
			<system-out>        with open(character.path, 'w') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #2487" file="npc/linters/changeling.py" line="283">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2488" file="npc/linters/changeling.py" line="284">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2489" file="npc/linters/changeling.py" line="286">
			<system-out>        r'\g&lt;1&gt;\g&lt;2&gt; {}'.format(notes),</system-out>
		</testcase>
		<testcase name="Mutant #2490" file="npc/linters/changeling.py" line="304">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2491" file="npc/linters/changeling.py" line="305">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2492" file="npc/linters/changeling.py" line="307">
			<system-out>        r'\g&lt;1&gt;\g&lt;2&gt; {}'.format(notes),</system-out>
		</testcase>
		<testcase name="Mutant #2493" file="npc/linters/changeling.py" line="314">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2494" file="npc/linters/changeling.py" line="315">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2495" file="npc/linters/changeling.py" line="318">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2496" file="npc/linters/changeling.py" line="319">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2497" file="npc/linters/changeling.py" line="321">
			<system-out>    std_matches = std_mantle_re.finditer(data)</system-out>
		</testcase>
		<testcase name="Mutant #2498" file="npc/linters/changeling.py" line="322">
			<system-out>    alt_matches = alt_mantle_re.finditer(data)</system-out>
		</testcase>
		<testcase name="Mutant #2499" file="npc/linters/changeling.py" line="323">
			<system-out>    return [m.group('court') for m in flatten([std_matches, alt_matches])]</system-out>
		</testcase>
		<testcase name="Mutant #2500" file="npc/linters/changeling.py" line="328">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2501" file="npc/linters/changeling.py" line="329">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2502" file="npc/linters/changeling.py" line="332">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2503" file="npc/linters/changeling.py" line="333">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2504" file="npc/linters/changeling.py" line="335">
			<system-out>    std_matches = std_goodwill_re.finditer(data)</system-out>
		</testcase>
		<testcase name="Mutant #2505" file="npc/linters/changeling.py" line="336">
			<system-out>    alt_matches = alt_goodwill_re.finditer(data)</system-out>
		</testcase>
		<testcase name="Mutant #2506" file="npc/linters/changeling.py" line="337">
			<system-out>    return [m.group('court') for m in flatten([std_matches, alt_matches])]</system-out>
		</testcase>
		<testcase name="Mutant #2507" file="npc/linters/changeling.py" line="342">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2508" file="npc/linters/changeling.py" line="343">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2509" file="npc/linters/changeling.py" line="345">
			<system-out>    return [m.group('thing') for m in merit_re.finditer(data)]</system-out>
		</testcase>
		<testcase name="Mutant #2510" file="npc/linters/werewolf.py" line="10">
			<system-out>def lint(character, fix=False, *, strict=False, prefs=None):</system-out>
		</testcase>
		<testcase name="Mutant #2511" file="npc/linters/werewolf.py" line="10">
			<system-out>def lint(character, fix=False, *, strict=False, prefs=None):</system-out>
		</testcase>
		<testcase name="Mutant #2512" file="npc/linters/werewolf.py" line="34">
			<system-out>    problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2513" file="npc/linters/werewolf.py" line="35">
			<system-out>    dirty = False</system-out>
		</testcase>
		<testcase name="Mutant #2514" file="npc/linters/werewolf.py" line="35">
			<system-out>    dirty = False</system-out>
		</testcase>
		<testcase name="Mutant #2515" file="npc/linters/werewolf.py" line="37">
			<system-out>    if character.type_key != 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #2516" file="npc/linters/werewolf.py" line="37">
			<system-out>    if character.type_key != 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #2517" file="npc/linters/werewolf.py" line="38">
			<system-out>        problems.append('Attempting to lint non-werewolf character using werewolf linter')</system-out>
		</testcase>
		<testcase name="Mutant #2518" file="npc/linters/werewolf.py" line="45">
			<system-out>    if not character.path:</system-out>
		</testcase>
		<testcase name="Mutant #2519" file="npc/linters/werewolf.py" line="46">
			<system-out>        problems.append('Missing path')</system-out>
		</testcase>
		<testcase name="Mutant #2520" file="npc/linters/werewolf.py" line="50">
			<system-out>    with open(character.path, 'r') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #2521" file="npc/linters/werewolf.py" line="51">
			<system-out>        data = char_file.read()</system-out>
		</testcase>
		<testcase name="Mutant #2522" file="npc/linters/werewolf.py" line="57">
			<system-out>    if dirty and data:</system-out>
		</testcase>
		<testcase name="Mutant #2523" file="npc/linters/werewolf.py" line="58">
			<system-out>        with open(character.path, 'w') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #2524" file="npc/linters/werewolf.py" line="67">
			<system-out>    problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2525" file="npc/linters/werewolf.py" line="68">
			<system-out>    all_tribes = prefs.get('werewolf.tribes.moon') + prefs.get('werewolf.tribes.pure')</system-out>
		</testcase>
		<testcase name="Mutant #2526" file="npc/linters/werewolf.py" line="68">
			<system-out>    all_tribes = prefs.get('werewolf.tribes.moon') + prefs.get('werewolf.tribes.pure')</system-out>
		</testcase>
		<testcase name="Mutant #2527" file="npc/linters/werewolf.py" line="68">
			<system-out>    all_tribes = prefs.get('werewolf.tribes.moon') + prefs.get('werewolf.tribes.pure')</system-out>
		</testcase>
		<testcase name="Mutant #2528" file="npc/linters/werewolf.py" line="68">
			<system-out>    all_tribes = prefs.get('werewolf.tribes.moon') + prefs.get('werewolf.tribes.pure')</system-out>
		</testcase>
		<testcase name="Mutant #2529" file="npc/linters/werewolf.py" line="71">
			<system-out>    if not character.tags('tribe').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2530" file="npc/linters/werewolf.py" line="71">
			<system-out>    if not character.tags('tribe').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2531" file="npc/linters/werewolf.py" line="74">
			<system-out>    tribe = character.tags('tribe').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2532" file="npc/linters/werewolf.py" line="74">
			<system-out>    tribe = character.tags('tribe').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2533" file="npc/linters/werewolf.py" line="75">
			<system-out>    tribe_key = tribe.lower()</system-out>
		</testcase>
		<testcase name="Mutant #2534" file="npc/linters/werewolf.py" line="76">
			<system-out>    if not tribe_key in all_tribes:</system-out>
		</testcase>
		<testcase name="Mutant #2535" file="npc/linters/werewolf.py" line="76">
			<system-out>    if not tribe_key in all_tribes:</system-out>
		</testcase>
		<testcase name="Mutant #2536" file="npc/linters/werewolf.py" line="77">
			<system-out>        problems.append(&quot;Unrecognized tribe '{}'&quot;.format(tribe))</system-out>
		</testcase>
		<testcase name="Mutant #2537" file="npc/linters/werewolf.py" line="80">
			<system-out>    if character.tags('auspice').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2538" file="npc/linters/werewolf.py" line="81">
			<system-out>        auspice = character.tags('auspice')[0]</system-out>
		</testcase>
		<testcase name="Mutant #2539" file="npc/linters/werewolf.py" line="81">
			<system-out>        auspice = character.tags('auspice')[0]</system-out>
		</testcase>
		<testcase name="Mutant #2540" file="npc/linters/werewolf.py" line="81">
			<system-out>        auspice = character.tags('auspice')[0]</system-out>
		</testcase>
		<testcase name="Mutant #2541" file="npc/linters/werewolf.py" line="83">
			<system-out>        if tribe_key in prefs.get('werewolf.tribes.pure'):</system-out>
		</testcase>
		<testcase name="Mutant #2542" file="npc/linters/werewolf.py" line="83">
			<system-out>        if tribe_key in prefs.get('werewolf.tribes.pure'):</system-out>
		</testcase>
		<testcase name="Mutant #2543" file="npc/linters/werewolf.py" line="84">
			<system-out>            problems.append('Auspice present, but werewolf is Pure')</system-out>
		</testcase>
		<testcase name="Mutant #2544" file="npc/linters/werewolf.py" line="86">
			<system-out>        if auspice.lower() not in prefs.get('werewolf.auspices'):</system-out>
		</testcase>
		<testcase name="Mutant #2545" file="npc/linters/werewolf.py" line="86">
			<system-out>        if auspice.lower() not in prefs.get('werewolf.auspices'):</system-out>
		</testcase>
		<testcase name="Mutant #2546" file="npc/linters/werewolf.py" line="87">
			<system-out>            problems.append(&quot;Unrecognized auspice '{}'&quot;.format(auspice))</system-out>
		</testcase>
		<testcase name="Mutant #2547" file="npc/linters/werewolf.py" line="90">
			<system-out>        if tribe_key in prefs.get('werewolf.tribes.moon'):</system-out>
		</testcase>
		<testcase name="Mutant #2548" file="npc/linters/werewolf.py" line="90">
			<system-out>        if tribe_key in prefs.get('werewolf.tribes.moon'):</system-out>
		</testcase>
		<testcase name="Mutant #2549" file="npc/linters/werewolf.py" line="91">
			<system-out>            problems.append('Missing auspice')</system-out>
		</testcase>
		<testcase name="Mutant #2550" file="npc/linters/nwod.py" line="9">
			<system-out>VICE_REGEX = r'^\s+vice\s+(?P&lt;vice&gt;\w+)$'</system-out>
		</testcase>
		<testcase name="Mutant #2551" file="npc/linters/nwod.py" line="9">
			<system-out>VICE_REGEX = r'^\s+vice\s+(?P&lt;vice&gt;\w+)$'</system-out>
		</testcase>
		<testcase name="Mutant #2552" file="npc/linters/nwod.py" line="10">
			<system-out>VIRTUE_REGEX = r'^\s+virtue\s+(?P&lt;virtue&gt;\w+)$'</system-out>
		</testcase>
		<testcase name="Mutant #2553" file="npc/linters/nwod.py" line="10">
			<system-out>VIRTUE_REGEX = r'^\s+virtue\s+(?P&lt;virtue&gt;\w+)$'</system-out>
		</testcase>
		<testcase name="Mutant #2554" file="npc/linters/nwod.py" line="24">
			<system-out>    problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2555" file="npc/linters/nwod.py" line="28">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2556" file="npc/linters/nwod.py" line="29">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2557" file="npc/linters/nwod.py" line="32">
			<system-out>        re.MULTILINE | re.IGNORECASE</system-out>
		</testcase>
		<testcase name="Mutant #2558" file="npc/linters/nwod.py" line="33">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2559" file="npc/linters/nwod.py" line="35">
			<system-out>    if vice_re.search(character_data) is None:</system-out>
		</testcase>
		<testcase name="Mutant #2560" file="npc/linters/nwod.py" line="36">
			<system-out>        problems.append('Missing vice')</system-out>
		</testcase>
		<testcase name="Mutant #2561" file="npc/linters/nwod.py" line="37">
			<system-out>    if virtue_re.search(character_data) is None:</system-out>
		</testcase>
		<testcase name="Mutant #2562" file="npc/linters/nwod.py" line="38">
			<system-out>        problems.append('Missing virtue')</system-out>
		</testcase>
		<testcase name="Mutant #2563" file="npc/linters/human.py" line="10">
			<system-out>def lint(character, fix=False, *, strict=False):</system-out>
		</testcase>
		<testcase name="Mutant #2564" file="npc/linters/human.py" line="10">
			<system-out>def lint(character, fix=False, *, strict=False):</system-out>
		</testcase>
		<testcase name="Mutant #2565" file="npc/linters/human.py" line="28">
			<system-out>    problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2566" file="npc/linters/human.py" line="29">
			<system-out>    dirty = False</system-out>
		</testcase>
		<testcase name="Mutant #2567" file="npc/linters/human.py" line="29">
			<system-out>    dirty = False</system-out>
		</testcase>
		<testcase name="Mutant #2568" file="npc/linters/human.py" line="32">
			<system-out>    if not character.path:</system-out>
		</testcase>
		<testcase name="Mutant #2569" file="npc/linters/human.py" line="33">
			<system-out>        problems.append('Missing path')</system-out>
		</testcase>
		<testcase name="Mutant #2570" file="npc/linters/human.py" line="37">
			<system-out>    with open(character.path, 'r') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #2571" file="npc/linters/human.py" line="38">
			<system-out>        data = char_file.read()</system-out>
		</testcase>
		<testcase name="Mutant #2572" file="npc/linters/human.py" line="44">
			<system-out>    if dirty and data:</system-out>
		</testcase>
		<testcase name="Mutant #2573" file="npc/linters/human.py" line="45">
			<system-out>        with open(character.path, 'w') as char_file:</system-out>
		</testcase>
		<testcase name="Mutant #2574" file="npc/linters/__init__.py" line="19">
			<system-out>def lint(character, fix=False, prefs=None, strict=False):</system-out>
		</testcase>
		<testcase name="Mutant #2575" file="npc/linters/__init__.py" line="19">
			<system-out>def lint(character, fix=False, prefs=None, strict=False):</system-out>
		</testcase>
		<testcase name="Mutant #2576" file="npc/linters/__init__.py" line="35">
			<system-out>    if not prefs:</system-out>
		</testcase>
		<testcase name="Mutant #2577" file="npc/linters/__init__.py" line="36">
			<system-out>        prefs = settings.InternalSettings()</system-out>
		</testcase>
		<testcase name="Mutant #2578" file="npc/linters/__init__.py" line="38">
			<system-out>    problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2579" file="npc/linters/__init__.py" line="39">
			<system-out>    all_types = [t.lower() for t in character.tags['type']]</system-out>
		</testcase>
		<testcase name="Mutant #2580" file="npc/linters/__init__.py" line="39">
			<system-out>    all_types = [t.lower() for t in character.tags['type']]</system-out>
		</testcase>
		<testcase name="Mutant #2581" file="npc/linters/__init__.py" line="41">
			<system-out>    if 'changeling' in all_types:</system-out>
		</testcase>
		<testcase name="Mutant #2582" file="npc/linters/__init__.py" line="41">
			<system-out>    if 'changeling' in all_types:</system-out>
		</testcase>
		<testcase name="Mutant #2583" file="npc/linters/__init__.py" line="46">
			<system-out>                sk_data=prefs.get('changeling')))</system-out>
		</testcase>
		<testcase name="Mutant #2584" file="npc/linters/__init__.py" line="47">
			<system-out>    elif 'werewolf' in all_types:</system-out>
		</testcase>
		<testcase name="Mutant #2585" file="npc/linters/__init__.py" line="47">
			<system-out>    elif 'werewolf' in all_types:</system-out>
		</testcase>
		<testcase name="Mutant #2586" file="npc/linters/__init__.py" line="50">
			<system-out>    elif 'human' in all_types:</system-out>
		</testcase>
		<testcase name="Mutant #2587" file="npc/linters/__init__.py" line="50">
			<system-out>    elif 'human' in all_types:</system-out>
		</testcase>
		<testcase name="Mutant #2588" file="npc/linters/settings/settings_linter.py" line="7">
			<system-out>        self.prefs = prefs</system-out>
		</testcase>
		<testcase name="Mutant #2589" file="npc/linters/settings/settings_linter.py" line="8">
			<system-out>        self.errors = []</system-out>
		</testcase>
		<testcase name="Mutant #2590" file="npc/linters/settings/settings_linter.py" line="9">
			<system-out>        self.error_prefix = '*'</system-out>
		</testcase>
		<testcase name="Mutant #2591" file="npc/linters/settings/settings_linter.py" line="9">
			<system-out>        self.error_prefix = '*'</system-out>
		</testcase>
		<testcase name="Mutant #2592" file="npc/linters/settings/settings_linter.py" line="23">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2593" file="npc/linters/settings/settings_linter.py" line="25">
			<system-out>        return not self.errors</system-out>
		</testcase>
		<testcase name="Mutant #2594" file="npc/linters/settings/settings_linter.py" line="36">
			<system-out>        self.errors.append(&quot;{} {}&quot;.format(self.error_prefix, message))</system-out>
		</testcase>
		<testcase name="Mutant #2595" file="npc/linters/settings/settings_linter.py" line="50">
			<system-out>    @contextmanager</system-out>
		</testcase>
		<testcase name="Mutant #2596" file="npc/linters/settings/settings_linter.py" line="66">
			<system-out>        self.error_prefix = '  -'</system-out>
		</testcase>
		<testcase name="Mutant #2597" file="npc/linters/settings/settings_linter.py" line="66">
			<system-out>        self.error_prefix = '  -'</system-out>
		</testcase>
		<testcase name="Mutant #2598" file="npc/linters/settings/settings_linter.py" line="68">
			<system-out>        self.error_prefix = '*'</system-out>
		</testcase>
		<testcase name="Mutant #2599" file="npc/linters/settings/settings_linter.py" line="68">
			<system-out>        self.error_prefix = '*'</system-out>
		</testcase>
		<testcase name="Mutant #2600" file="npc/linters/settings/changeling.py" line="19">
			<system-out>    linter = ChangelingSettingsLinter(prefs)</system-out>
		</testcase>
		<testcase name="Mutant #2601" file="npc/linters/settings/changeling.py" line="44">
			<system-out>        if not self.valid:</system-out>
		</testcase>
		<testcase name="Mutant #2602" file="npc/linters/settings/changeling.py" line="45">
			<system-out>            self.errors.insert(0, 'Changeling settings are not correct:')</system-out>
		</testcase>
		<testcase name="Mutant #2603" file="npc/linters/settings/changeling.py" line="45">
			<system-out>            self.errors.insert(0, 'Changeling settings are not correct:')</system-out>
		</testcase>
		<testcase name="Mutant #2604" file="npc/linters/settings/changeling.py" line="49">
			<system-out>        blessings = set(self.prefs.get('changeling.blessings', {}).keys())</system-out>
		</testcase>
		<testcase name="Mutant #2605" file="npc/linters/settings/changeling.py" line="49">
			<system-out>        blessings = set(self.prefs.get('changeling.blessings', {}).keys())</system-out>
		</testcase>
		<testcase name="Mutant #2606" file="npc/linters/settings/changeling.py" line="50">
			<system-out>        seemings = set(self.prefs.get('changeling.seemings', []))</system-out>
		</testcase>
		<testcase name="Mutant #2607" file="npc/linters/settings/changeling.py" line="50">
			<system-out>        seemings = set(self.prefs.get('changeling.seemings', []))</system-out>
		</testcase>
		<testcase name="Mutant #2608" file="npc/linters/settings/changeling.py" line="52">
			<system-out>        if not blessings.issuperset(seemings):</system-out>
		</testcase>
		<testcase name="Mutant #2609" file="npc/linters/settings/changeling.py" line="53">
			<system-out>            with self.error_section('Seemings must all have a blessing. Seemings without a blessing:'):</system-out>
		</testcase>
		<testcase name="Mutant #2610" file="npc/linters/settings/changeling.py" line="57">
			<system-out>        curses = set(self.prefs.get('changeling.curses', {}).keys())</system-out>
		</testcase>
		<testcase name="Mutant #2611" file="npc/linters/settings/changeling.py" line="57">
			<system-out>        curses = set(self.prefs.get('changeling.curses', {}).keys())</system-out>
		</testcase>
		<testcase name="Mutant #2612" file="npc/linters/settings/changeling.py" line="58">
			<system-out>        seemings = set(self.prefs.get('changeling.seemings', []))</system-out>
		</testcase>
		<testcase name="Mutant #2613" file="npc/linters/settings/changeling.py" line="58">
			<system-out>        seemings = set(self.prefs.get('changeling.seemings', []))</system-out>
		</testcase>
		<testcase name="Mutant #2614" file="npc/linters/settings/changeling.py" line="60">
			<system-out>        if not curses.issuperset(seemings):</system-out>
		</testcase>
		<testcase name="Mutant #2615" file="npc/linters/settings/changeling.py" line="61">
			<system-out>            with self.error_section('Seemings must all have a curse. Seemings without a curse:'):</system-out>
		</testcase>
		<testcase name="Mutant #2616" file="npc/linters/settings/changeling.py" line="65">
			<system-out>        blessings = set(self.prefs.get('changeling.blessings', {}).keys())</system-out>
		</testcase>
		<testcase name="Mutant #2617" file="npc/linters/settings/changeling.py" line="65">
			<system-out>        blessings = set(self.prefs.get('changeling.blessings', {}).keys())</system-out>
		</testcase>
		<testcase name="Mutant #2618" file="npc/linters/settings/changeling.py" line="66">
			<system-out>        kith_indexes = self.prefs.get('changeling.kiths', {})</system-out>
		</testcase>
		<testcase name="Mutant #2619" file="npc/linters/settings/changeling.py" line="66">
			<system-out>        kith_indexes = self.prefs.get('changeling.kiths', {})</system-out>
		</testcase>
		<testcase name="Mutant #2620" file="npc/linters/settings/changeling.py" line="67">
			<system-out>        kiths = set(flatten(kith_indexes.values()))</system-out>
		</testcase>
		<testcase name="Mutant #2621" file="npc/linters/settings/changeling.py" line="69">
			<system-out>        if not blessings.issuperset(kiths):</system-out>
		</testcase>
		<testcase name="Mutant #2622" file="npc/linters/settings/changeling.py" line="70">
			<system-out>            with self.error_section('Kiths must all have a blessing. Kiths without a blessing:'):</system-out>
		</testcase>
		<testcase name="Mutant #2623" file="npc/linters/settings/changeling.py" line="74">
			<system-out>        kith_sets = [set(kith_group) for kith_group in self.prefs.get('changeling.kiths').values()]</system-out>
		</testcase>
		<testcase name="Mutant #2624" file="npc/linters/settings/changeling.py" line="74">
			<system-out>        kith_sets = [set(kith_group) for kith_group in self.prefs.get('changeling.kiths').values()]</system-out>
		</testcase>
		<testcase name="Mutant #2625" file="npc/linters/settings/changeling.py" line="76">
			<system-out>        dupe_kiths = set()</system-out>
		</testcase>
		<testcase name="Mutant #2626" file="npc/linters/settings/changeling.py" line="78">
			<system-out>            test_set = kith_sets.pop()</system-out>
		</testcase>
		<testcase name="Mutant #2627" file="npc/linters/settings/changeling.py" line="79">
			<system-out>            unique_kiths = test_set.difference(*kith_sets)</system-out>
		</testcase>
		<testcase name="Mutant #2628" file="npc/linters/settings/changeling.py" line="80">
			<system-out>            if test_set != unique_kiths:</system-out>
		</testcase>
		<testcase name="Mutant #2629" file="npc/linters/settings/changeling.py" line="81">
			<system-out>                dupe_kiths = dupe_kiths.union(test_set - unique_kiths)</system-out>
		</testcase>
		<testcase name="Mutant #2630" file="npc/linters/settings/changeling.py" line="81">
			<system-out>                dupe_kiths = dupe_kiths.union(test_set - unique_kiths)</system-out>
		</testcase>
		<testcase name="Mutant #2631" file="npc/linters/settings/changeling.py" line="84">
			<system-out>            with self.error_section('Kiths must belong to one seeming. Kiths with multiple seemings:'):</system-out>
		</testcase>
		<testcase name="Mutant #2632" file="npc/linters/settings/werewolf.py" line="18">
			<system-out>    linter = WerewolfSettingsLinter(prefs)</system-out>
		</testcase>
		<testcase name="Mutant #2633" file="npc/linters/settings/werewolf.py" line="37">
			<system-out>        if not self.valid:</system-out>
		</testcase>
		<testcase name="Mutant #2634" file="npc/linters/settings/werewolf.py" line="38">
			<system-out>            self.errors.insert(0, 'Werewolf settings are not correct:')</system-out>
		</testcase>
		<testcase name="Mutant #2635" file="npc/linters/settings/werewolf.py" line="38">
			<system-out>            self.errors.insert(0, 'Werewolf settings are not correct:')</system-out>
		</testcase>
		<testcase name="Mutant #2636" file="npc/linters/settings/werewolf.py" line="42">
			<system-out>        moon = set(self.prefs.get('werewolf.tribes.moon', {}))</system-out>
		</testcase>
		<testcase name="Mutant #2637" file="npc/linters/settings/werewolf.py" line="42">
			<system-out>        moon = set(self.prefs.get('werewolf.tribes.moon', {}))</system-out>
		</testcase>
		<testcase name="Mutant #2638" file="npc/linters/settings/werewolf.py" line="43">
			<system-out>        pure = set(self.prefs.get('werewolf.tribes.pure', {}))</system-out>
		</testcase>
		<testcase name="Mutant #2639" file="npc/linters/settings/werewolf.py" line="43">
			<system-out>        pure = set(self.prefs.get('werewolf.tribes.pure', {}))</system-out>
		</testcase>
		<testcase name="Mutant #2640" file="npc/linters/settings/werewolf.py" line="45">
			<system-out>        if not moon.isdisjoint(pure):</system-out>
		</testcase>
		<testcase name="Mutant #2641" file="npc/linters/settings/werewolf.py" line="46">
			<system-out>            with self.error_section('Pure and non-pure tribes must be unique. Shared tribes:'):</system-out>
		</testcase>
		<testcase name="Mutant #2642" file="npc/linters/settings/__init__.py" line="19">
			<system-out>    problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2643" file="npc/settings/core.py" line="37">
			<system-out>    def __init__(self, verbose=False):</system-out>
		</testcase>
		<testcase name="Mutant #2644" file="npc/settings/core.py" line="56">
			<system-out>        self.module_base = Path(__file__).parent</system-out>
		</testcase>
		<testcase name="Mutant #2645" file="npc/settings/core.py" line="57">
			<system-out>        self.install_base = Path(self.module_base).parent</system-out>
		</testcase>
		<testcase name="Mutant #2646" file="npc/settings/core.py" line="59">
			<system-out>        self.default_settings_path = self.module_base</system-out>
		</testcase>
		<testcase name="Mutant #2647" file="npc/settings/core.py" line="60">
			<system-out>        self.user_settings_path = Path('~/.config/npc/').expanduser()</system-out>
		</testcase>
		<testcase name="Mutant #2648" file="npc/settings/core.py" line="60">
			<system-out>        self.user_settings_path = Path('~/.config/npc/').expanduser()</system-out>
		</testcase>
		<testcase name="Mutant #2649" file="npc/settings/core.py" line="61">
			<system-out>        self.campaign_settings_path = Path('.npc/')</system-out>
		</testcase>
		<testcase name="Mutant #2650" file="npc/settings/core.py" line="61">
			<system-out>        self.campaign_settings_path = Path('.npc/')</system-out>
		</testcase>
		<testcase name="Mutant #2651" file="npc/settings/core.py" line="64">
			<system-out>            'settings',</system-out>
		</testcase>
		<testcase name="Mutant #2652" file="npc/settings/core.py" line="65">
			<system-out>            'settings-changeling',</system-out>
		</testcase>
		<testcase name="Mutant #2653" file="npc/settings/core.py" line="66">
			<system-out>            'settings-werewolf',</system-out>
		</testcase>
		<testcase name="Mutant #2654" file="npc/settings/core.py" line="67">
			<system-out>            'settings-gui'</system-out>
		</testcase>
		<testcase name="Mutant #2655" file="npc/settings/core.py" line="68">
			<system-out>        ]</system-out>
		</testcase>
		<testcase name="Mutant #2656" file="npc/settings/core.py" line="69">
			<system-out>        self.settings_file_suffixes = ['.json', '.yaml']</system-out>
		</testcase>
		<testcase name="Mutant #2657" file="npc/settings/core.py" line="69">
			<system-out>        self.settings_file_suffixes = ['.json', '.yaml']</system-out>
		</testcase>
		<testcase name="Mutant #2658" file="npc/settings/core.py" line="69">
			<system-out>        self.settings_file_suffixes = ['.json', '.yaml']</system-out>
		</testcase>
		<testcase name="Mutant #2659" file="npc/settings/core.py" line="70">
			<system-out>        self.settings_paths = [self.default_settings_path, self.user_settings_path, self.campaign_settings_path]</system-out>
		</testcase>
		<testcase name="Mutant #2660" file="npc/settings/core.py" line="72">
			<system-out>        self.verbose = verbose</system-out>
		</testcase>
		<testcase name="Mutant #2661" file="npc/settings/core.py" line="74">
			<system-out>        loaded_data = util.load_settings(self._best_settings_path(self.default_settings_path, 'settings-default'))</system-out>
		</testcase>
		<testcase name="Mutant #2662" file="npc/settings/core.py" line="74">
			<system-out>        loaded_data = util.load_settings(self._best_settings_path(self.default_settings_path, 'settings-default'))</system-out>
		</testcase>
		<testcase name="Mutant #2663" file="npc/settings/core.py" line="77">
			<system-out>        self.data = self._expand_templates(base_path=self.install_base, settings_data=loaded_data)</system-out>
		</testcase>
		<testcase name="Mutant #2664" file="npc/settings/core.py" line="109">
			<system-out>        base_path = dir_name.joinpath(file_name)</system-out>
		</testcase>
		<testcase name="Mutant #2665" file="npc/settings/core.py" line="111">
			<system-out>            attempt = base_path.with_suffix(suffix)</system-out>
		</testcase>
		<testcase name="Mutant #2666" file="npc/settings/core.py" line="114">
			<system-out>        raise OSError(2, 'No yaml or json found', base_path)</system-out>
		</testcase>
		<testcase name="Mutant #2667" file="npc/settings/core.py" line="114">
			<system-out>        raise OSError(2, 'No yaml or json found', base_path)</system-out>
		</testcase>
		<testcase name="Mutant #2668" file="npc/settings/core.py" line="132">
			<system-out>            outdata = {}</system-out>
		</testcase>
		<testcase name="Mutant #2669" file="npc/settings/core.py" line="135">
			<system-out>                    outdata[key] = expand_filenames(value)</system-out>
		</testcase>
		<testcase name="Mutant #2670" file="npc/settings/core.py" line="137">
			<system-out>                    outdata[key] = [expanded_path(v) for v in value]</system-out>
		</testcase>
		<testcase name="Mutant #2671" file="npc/settings/core.py" line="139">
			<system-out>                    outdata[key] = expanded_path(value)</system-out>
		</testcase>
		<testcase name="Mutant #2672" file="npc/settings/core.py" line="143">
			<system-out>            key_parts = key.split('.')</system-out>
		</testcase>
		<testcase name="Mutant #2673" file="npc/settings/core.py" line="143">
			<system-out>            key_parts = key.split('.')</system-out>
		</testcase>
		<testcase name="Mutant #2674" file="npc/settings/core.py" line="144">
			<system-out>            current_data = data</system-out>
		</testcase>
		<testcase name="Mutant #2675" file="npc/settings/core.py" line="147">
			<system-out>                    current_data = current_data[k]</system-out>
		</testcase>
		<testcase name="Mutant #2676" file="npc/settings/core.py" line="152">
			<system-out>        working_data = deepcopy(settings_data)</system-out>
		</testcase>
		<testcase name="Mutant #2677" file="npc/settings/core.py" line="152">
			<system-out>        working_data = deepcopy(settings_data)</system-out>
		</testcase>
		<testcase name="Mutant #2678" file="npc/settings/core.py" line="155">
			<system-out>        for typekey, _ in get(working_data, 'types', {}).items():</system-out>
		</testcase>
		<testcase name="Mutant #2679" file="npc/settings/core.py" line="156">
			<system-out>            type_path = get(working_data, &quot;types.{}.sheet_template&quot;.format(typekey))</system-out>
		</testcase>
		<testcase name="Mutant #2680" file="npc/settings/core.py" line="156">
			<system-out>            type_path = get(working_data, &quot;types.{}.sheet_template&quot;.format(typekey))</system-out>
		</testcase>
		<testcase name="Mutant #2681" file="npc/settings/core.py" line="158">
			<system-out>                working_data['types'][typekey]['sheet_template'] = base_path.joinpath(type_path).expanduser()</system-out>
		</testcase>
		<testcase name="Mutant #2682" file="npc/settings/core.py" line="158">
			<system-out>                working_data['types'][typekey]['sheet_template'] = base_path.joinpath(type_path).expanduser()</system-out>
		</testcase>
		<testcase name="Mutant #2683" file="npc/settings/core.py" line="158">
			<system-out>                working_data['types'][typekey]['sheet_template'] = base_path.joinpath(type_path).expanduser()</system-out>
		</testcase>
		<testcase name="Mutant #2684" file="npc/settings/core.py" line="161">
			<system-out>        story_templates = get(working_data, 'story.templates')</system-out>
		</testcase>
		<testcase name="Mutant #2685" file="npc/settings/core.py" line="161">
			<system-out>        story_templates = get(working_data, 'story.templates')</system-out>
		</testcase>
		<testcase name="Mutant #2686" file="npc/settings/core.py" line="163">
			<system-out>            working_data['story']['templates'] = expand_filenames(story_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2687" file="npc/settings/core.py" line="163">
			<system-out>            working_data['story']['templates'] = expand_filenames(story_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2688" file="npc/settings/core.py" line="163">
			<system-out>            working_data['story']['templates'] = expand_filenames(story_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2689" file="npc/settings/core.py" line="166">
			<system-out>        report_templates = get(working_data, 'report.templates')</system-out>
		</testcase>
		<testcase name="Mutant #2690" file="npc/settings/core.py" line="166">
			<system-out>        report_templates = get(working_data, 'report.templates')</system-out>
		</testcase>
		<testcase name="Mutant #2691" file="npc/settings/core.py" line="168">
			<system-out>            working_data['report']['templates'] = expand_filenames(report_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2692" file="npc/settings/core.py" line="168">
			<system-out>            working_data['report']['templates'] = expand_filenames(report_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2693" file="npc/settings/core.py" line="168">
			<system-out>            working_data['report']['templates'] = expand_filenames(report_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2694" file="npc/settings/core.py" line="171">
			<system-out>        listing_templates = get(working_data, 'listing.templates')</system-out>
		</testcase>
		<testcase name="Mutant #2695" file="npc/settings/core.py" line="171">
			<system-out>        listing_templates = get(working_data, 'listing.templates')</system-out>
		</testcase>
		<testcase name="Mutant #2696" file="npc/settings/core.py" line="173">
			<system-out>            working_data['listing']['templates'] = expand_filenames(listing_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2697" file="npc/settings/core.py" line="173">
			<system-out>            working_data['listing']['templates'] = expand_filenames(listing_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2698" file="npc/settings/core.py" line="173">
			<system-out>            working_data['listing']['templates'] = expand_filenames(listing_templates)</system-out>
		</testcase>
		<testcase name="Mutant #2699" file="npc/settings/core.py" line="189">
			<system-out>            loaded = util.load_settings(settings_path)</system-out>
		</testcase>
		<testcase name="Mutant #2700" file="npc/settings/core.py" line="195">
			<system-out>        absolute_path_base = Path(settings_path).resolve().parent</system-out>
		</testcase>
		<testcase name="Mutant #2701" file="npc/settings/core.py" line="196">
			<system-out>        loaded = self._expand_templates(absolute_path_base, loaded)</system-out>
		</testcase>
		<testcase name="Mutant #2702" file="npc/settings/core.py" line="208">
			<system-out>        key_parts = key.split('.')</system-out>
		</testcase>
		<testcase name="Mutant #2703" file="npc/settings/core.py" line="208">
			<system-out>        key_parts = key.split('.')</system-out>
		</testcase>
		<testcase name="Mutant #2704" file="npc/settings/core.py" line="210">
			<system-out>            value = {k: value}</system-out>
		</testcase>
		<testcase name="Mutant #2705" file="npc/settings/core.py" line="233">
			<system-out>            dest = dict(orig)</system-out>
		</testcase>
		<testcase name="Mutant #2706" file="npc/settings/core.py" line="236">
			<system-out>                if key in dest:</system-out>
		</testcase>
		<testcase name="Mutant #2707" file="npc/settings/core.py" line="238">
			<system-out>                        dest[key] = merge_dict(val, dest[key])</system-out>
		</testcase>
		<testcase name="Mutant #2708" file="npc/settings/core.py" line="240">
			<system-out>                        dest[key] = val</system-out>
		</testcase>
		<testcase name="Mutant #2709" file="npc/settings/core.py" line="242">
			<system-out>                    dest[key] = val</system-out>
		</testcase>
		<testcase name="Mutant #2710" file="npc/settings/core.py" line="246">
			<system-out>        self.data = merge_dict(new_data, self.data)</system-out>
		</testcase>
		<testcase name="Mutant #2711" file="npc/settings/core.py" line="265">
			<system-out>        if location == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #2712" file="npc/settings/core.py" line="265">
			<system-out>        if location == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #2713" file="npc/settings/core.py" line="266">
			<system-out>            base_path = self.default_settings_path</system-out>
		</testcase>
		<testcase name="Mutant #2714" file="npc/settings/core.py" line="267">
			<system-out>        if location == 'user':</system-out>
		</testcase>
		<testcase name="Mutant #2715" file="npc/settings/core.py" line="267">
			<system-out>        if location == 'user':</system-out>
		</testcase>
		<testcase name="Mutant #2716" file="npc/settings/core.py" line="268">
			<system-out>            base_path = self.user_settings_path</system-out>
		</testcase>
		<testcase name="Mutant #2717" file="npc/settings/core.py" line="269">
			<system-out>        if location == 'campaign':</system-out>
		</testcase>
		<testcase name="Mutant #2718" file="npc/settings/core.py" line="269">
			<system-out>        if location == 'campaign':</system-out>
		</testcase>
		<testcase name="Mutant #2719" file="npc/settings/core.py" line="270">
			<system-out>            base_path = self.campaign_settings_path</system-out>
		</testcase>
		<testcase name="Mutant #2720" file="npc/settings/core.py" line="272">
			<system-out>        if settings_type and settings_type != 'base':</system-out>
		</testcase>
		<testcase name="Mutant #2721" file="npc/settings/core.py" line="272">
			<system-out>        if settings_type and settings_type != 'base':</system-out>
		</testcase>
		<testcase name="Mutant #2722" file="npc/settings/core.py" line="272">
			<system-out>        if settings_type and settings_type != 'base':</system-out>
		</testcase>
		<testcase name="Mutant #2723" file="npc/settings/core.py" line="273">
			<system-out>            filename = &quot;settings-{}&quot;.format(settings_type)</system-out>
		</testcase>
		<testcase name="Mutant #2724" file="npc/settings/core.py" line="273">
			<system-out>            filename = &quot;settings-{}&quot;.format(settings_type)</system-out>
		</testcase>
		<testcase name="Mutant #2725" file="npc/settings/core.py" line="275">
			<system-out>            if location == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #2726" file="npc/settings/core.py" line="275">
			<system-out>            if location == 'default':</system-out>
		</testcase>
		<testcase name="Mutant #2727" file="npc/settings/core.py" line="276">
			<system-out>                filename = 'settings-default'</system-out>
		</testcase>
		<testcase name="Mutant #2728" file="npc/settings/core.py" line="276">
			<system-out>                filename = 'settings-default'</system-out>
		</testcase>
		<testcase name="Mutant #2729" file="npc/settings/core.py" line="278">
			<system-out>                filename = 'settings'</system-out>
		</testcase>
		<testcase name="Mutant #2730" file="npc/settings/core.py" line="278">
			<system-out>                filename = 'settings'</system-out>
		</testcase>
		<testcase name="Mutant #2731" file="npc/settings/core.py" line="280">
			<system-out>        if suffix is None:</system-out>
		</testcase>
		<testcase name="Mutant #2732" file="npc/settings/core.py" line="284">
			<system-out>                return base_path.joinpath(filename).with_suffix(self.settings_file_suffixes[0])</system-out>
		</testcase>
		<testcase name="Mutant #2733" file="npc/settings/core.py" line="303">
			<system-out>        key_parts = key.split('.')</system-out>
		</testcase>
		<testcase name="Mutant #2734" file="npc/settings/core.py" line="303">
			<system-out>        key_parts = key.split('.')</system-out>
		</testcase>
		<testcase name="Mutant #2735" file="npc/settings/core.py" line="304">
			<system-out>        current_data = self.data</system-out>
		</testcase>
		<testcase name="Mutant #2736" file="npc/settings/core.py" line="307">
			<system-out>                current_data = current_data[k]</system-out>
		</testcase>
		<testcase name="Mutant #2737" file="npc/settings/core.py" line="310">
			<system-out>                    util.print_err(&quot;Key not found: {}&quot;.format(key))</system-out>
		</testcase>
		<testcase name="Mutant #2738" file="npc/settings/core.py" line="336">
			<system-out>            title=self.get('listing.metadata.title'),</system-out>
		</testcase>
		<testcase name="Mutant #2739" file="npc/settings/core.py" line="337">
			<system-out>            campaign=self.get('campaign_name'),</system-out>
		</testcase>
		<testcase name="Mutant #2740" file="npc/settings/core.py" line="338">
			<system-out>            created=datetime.now().strftime(self.get('listing.metadata.timestamp')),</system-out>
		</testcase>
		<testcase name="Mutant #2741" file="npc/settings/core.py" line="340">
			<system-out>            **self.get('listing.metadata.universal.additional_keys'),</system-out>
		</testcase>
		<testcase name="Mutant #2742" file="npc/settings/core.py" line="341">
			<system-out>            **self.get('listing.metadata.{}.additional_keys'.format(target_format))</system-out>
		</testcase>
		<testcase name="Mutant #2743" file="npc/settings/core.py" line="351">
			<system-out>        for _, data in self.get('types').items():</system-out>
		</testcase>
		<testcase name="Mutant #2744" file="npc/settings/core.py" line="352">
			<system-out>            yield data['type_path']</system-out>
		</testcase>
		<testcase name="Mutant #2745" file="npc/settings/core.py" line="361">
			<system-out>        return self.get('types').keys()</system-out>
		</testcase>
		<testcase name="Mutant #2746" file="npc/settings/core.py" line="374">
			<system-out>        command_ignores = self.get(&quot;paths.ignore.{command_name}&quot;.format(command_name=command_name), [])</system-out>
		</testcase>
		<testcase name="Mutant #2747" file="npc/settings/core.py" line="374">
			<system-out>        command_ignores = self.get(&quot;paths.ignore.{command_name}&quot;.format(command_name=command_name), [])</system-out>
		</testcase>
		<testcase name="Mutant #2748" file="npc/settings/core.py" line="375">
			<system-out>        global_ignores = self.get('paths.ignore.always', [])</system-out>
		</testcase>
		<testcase name="Mutant #2749" file="npc/settings/core.py" line="375">
			<system-out>        global_ignores = self.get('paths.ignore.always', [])</system-out>
		</testcase>
		<testcase name="Mutant #2750" file="npc/settings/core.py" line="376">
			<system-out>        return command_ignores + global_ignores</system-out>
		</testcase>
		<testcase name="Mutant #2751" file="npc/settings/core.py" line="388">
			<system-out>            'types.{char_type}.tag_names.{tag_name}'.format(</system-out>
		</testcase>
		<testcase name="Mutant #2752" file="npc/character/changeling.py" line="14">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2753" file="npc/character/changeling.py" line="14">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2754" file="npc/character/changeling.py" line="15">
			<system-out>            self.tags('type').append('changeling')</system-out>
		</testcase>
		<testcase name="Mutant #2755" file="npc/character/changeling.py" line="15">
			<system-out>            self.tags('type').append('changeling')</system-out>
		</testcase>
		<testcase name="Mutant #2756" file="npc/character/changeling.py" line="21">
			<system-out>        self.tags.add_tag('seeming', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2757" file="npc/character/changeling.py" line="21">
			<system-out>        self.tags.add_tag('seeming', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2758" file="npc/character/changeling.py" line="22">
			<system-out>        self.tags.add_tag('kith', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2759" file="npc/character/changeling.py" line="22">
			<system-out>        self.tags.add_tag('kith', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2760" file="npc/character/changeling.py" line="23">
			<system-out>        self.tags.add_tag('mask')</system-out>
		</testcase>
		<testcase name="Mutant #2761" file="npc/character/changeling.py" line="24">
			<system-out>        self.tags.add_tag('mien')</system-out>
		</testcase>
		<testcase name="Mutant #2762" file="npc/character/changeling.py" line="25">
			<system-out>        self.tags.add_tag('freehold')</system-out>
		</testcase>
		<testcase name="Mutant #2763" file="npc/character/changeling.py" line="26">
			<system-out>        self.tags.add_group('court', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2764" file="npc/character/changeling.py" line="26">
			<system-out>        self.tags.add_group('court', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2765" file="npc/character/changeling.py" line="27">
			<system-out>        self.tags.add_group('motley', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2766" file="npc/character/changeling.py" line="27">
			<system-out>        self.tags.add_group('motley', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2767" file="npc/character/changeling.py" line="28">
			<system-out>        self.tags.add_group('entitlement', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2768" file="npc/character/changeling.py" line="28">
			<system-out>        self.tags.add_group('entitlement', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2769" file="npc/character/changeling.py" line="40">
			<system-out>        if self.type_key != 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #2770" file="npc/character/changeling.py" line="40">
			<system-out>        if self.type_key != 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #2771" file="npc/character/changeling.py" line="43">
			<system-out>        if 'seeming' not in tags:</system-out>
		</testcase>
		<testcase name="Mutant #2772" file="npc/character/changeling.py" line="43">
			<system-out>        if 'seeming' not in tags:</system-out>
		</testcase>
		<testcase name="Mutant #2773" file="npc/character/changeling.py" line="45">
			<system-out>        if 'kith' not in tags:</system-out>
		</testcase>
		<testcase name="Mutant #2774" file="npc/character/changeling.py" line="45">
			<system-out>        if 'kith' not in tags:</system-out>
		</testcase>
		<testcase name="Mutant #2775" file="npc/character/changeling.py" line="48">
			<system-out>        first_seeming = tags('seeming').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2776" file="npc/character/changeling.py" line="48">
			<system-out>        first_seeming = tags('seeming').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2777" file="npc/character/changeling.py" line="49">
			<system-out>        first_kith = tags('kith').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2778" file="npc/character/changeling.py" line="49">
			<system-out>        first_kith = tags('kith').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2779" file="npc/character/changeling.py" line="50">
			<system-out>        tags.add_tag('changeling', ' '.join([first_seeming, first_kith]))</system-out>
		</testcase>
		<testcase name="Mutant #2780" file="npc/character/changeling.py" line="50">
			<system-out>        tags.add_tag('changeling', ' '.join([first_seeming, first_kith]))</system-out>
		</testcase>
		<testcase name="Mutant #2781" file="npc/character/changeling.py" line="51">
			<system-out>        tags['type'] = tags('type').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2782" file="npc/character/changeling.py" line="51">
			<system-out>        tags['type'] = tags('type').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2783" file="npc/character/changeling.py" line="51">
			<system-out>        tags['type'] = tags('type').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2784" file="npc/character/changeling.py" line="52">
			<system-out>        tags['seeming'] = tags('seeming').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2785" file="npc/character/changeling.py" line="52">
			<system-out>        tags['seeming'] = tags('seeming').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2786" file="npc/character/changeling.py" line="52">
			<system-out>        tags['seeming'] = tags('seeming').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2787" file="npc/character/changeling.py" line="53">
			<system-out>        tags['kith'] = tags('kith').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2788" file="npc/character/changeling.py" line="53">
			<system-out>        tags['kith'] = tags('kith').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2789" file="npc/character/changeling.py" line="53">
			<system-out>        tags['kith'] = tags('kith').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2790" file="npc/character/werewolf.py" line="14">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2791" file="npc/character/werewolf.py" line="14">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2792" file="npc/character/werewolf.py" line="15">
			<system-out>            self.tags('type').append('werewolf')</system-out>
		</testcase>
		<testcase name="Mutant #2793" file="npc/character/werewolf.py" line="15">
			<system-out>            self.tags('type').append('werewolf')</system-out>
		</testcase>
		<testcase name="Mutant #2794" file="npc/character/werewolf.py" line="21">
			<system-out>        self.tags.add_tag('auspice', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2795" file="npc/character/werewolf.py" line="21">
			<system-out>        self.tags.add_tag('auspice', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2796" file="npc/character/werewolf.py" line="22">
			<system-out>        self.tags.add_group('pack', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2797" file="npc/character/werewolf.py" line="22">
			<system-out>        self.tags.add_group('pack', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2798" file="npc/character/werewolf.py" line="23">
			<system-out>        self.tags.add_group('tribe', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2799" file="npc/character/werewolf.py" line="23">
			<system-out>        self.tags.add_group('tribe', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2800" file="npc/character/werewolf.py" line="24">
			<system-out>        self.tags.add_group('lodge', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2801" file="npc/character/werewolf.py" line="24">
			<system-out>        self.tags.add_group('lodge', limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2802" file="npc/character/werewolf.py" line="36">
			<system-out>        if self.type_key != 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #2803" file="npc/character/werewolf.py" line="36">
			<system-out>        if self.type_key != 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #2804" file="npc/character/werewolf.py" line="39">
			<system-out>        if 'auspice' not in tags:</system-out>
		</testcase>
		<testcase name="Mutant #2805" file="npc/character/werewolf.py" line="39">
			<system-out>        if 'auspice' not in tags:</system-out>
		</testcase>
		<testcase name="Mutant #2806" file="npc/character/werewolf.py" line="42">
			<system-out>        first_auspice = tags('auspice').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2807" file="npc/character/werewolf.py" line="42">
			<system-out>        first_auspice = tags('auspice').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2808" file="npc/character/werewolf.py" line="43">
			<system-out>        tags.add_tag('werewolf', first_auspice)</system-out>
		</testcase>
		<testcase name="Mutant #2809" file="npc/character/werewolf.py" line="44">
			<system-out>        tags['auspice'] = tags('auspice').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2810" file="npc/character/werewolf.py" line="44">
			<system-out>        tags['auspice'] = tags('auspice').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2811" file="npc/character/werewolf.py" line="44">
			<system-out>        tags['auspice'] = tags('auspice').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2812" file="npc/character/werewolf.py" line="45">
			<system-out>        tags['type'] = tags('type').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2813" file="npc/character/werewolf.py" line="45">
			<system-out>        tags['type'] = tags('type').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2814" file="npc/character/werewolf.py" line="45">
			<system-out>        tags['type'] = tags('type').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2815" file="npc/character/spirit.py" line="14">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2816" file="npc/character/spirit.py" line="14">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2817" file="npc/character/spirit.py" line="15">
			<system-out>            self.tags('type').append('spirit')</system-out>
		</testcase>
		<testcase name="Mutant #2818" file="npc/character/spirit.py" line="15">
			<system-out>            self.tags('type').append('spirit')</system-out>
		</testcase>
		<testcase name="Mutant #2819" file="npc/character/spirit.py" line="21">
			<system-out>        self.tags.add_tag('ban', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2820" file="npc/character/spirit.py" line="21">
			<system-out>        self.tags.add_tag('ban', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2821" file="npc/character/character.py" line="43">
			<system-out>            wrapped_attributes = {}</system-out>
		</testcase>
		<testcase name="Mutant #2822" file="npc/character/character.py" line="46">
			<system-out>                    wrapped_attributes[key] = wrap_strings(val)</system-out>
		</testcase>
		<testcase name="Mutant #2823" file="npc/character/character.py" line="48">
			<system-out>                    wrapped_attributes[key] = [val]</system-out>
		</testcase>
		<testcase name="Mutant #2824" file="npc/character/character.py" line="50">
			<system-out>                    wrapped_attributes[key] = val</system-out>
		</testcase>
		<testcase name="Mutant #2825" file="npc/character/character.py" line="53">
			<system-out>        self.path = path</system-out>
		</testcase>
		<testcase name="Mutant #2826" file="npc/character/character.py" line="54">
			<system-out>        self.tags = TagContainer()</system-out>
		</testcase>
		<testcase name="Mutant #2827" file="npc/character/character.py" line="55">
			<system-out>        self.tags.add_tag('type', required=True, limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2828" file="npc/character/character.py" line="55">
			<system-out>        self.tags.add_tag('type', required=True, limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2829" file="npc/character/character.py" line="55">
			<system-out>        self.tags.add_tag('type', required=True, limit=1)</system-out>
		</testcase>
		<testcase name="Mutant #2830" file="npc/character/character.py" line="56">
			<system-out>        self.tags.add_tag('name', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2831" file="npc/character/character.py" line="56">
			<system-out>        self.tags.add_tag('name', required=True)</system-out>
		</testcase>
		<testcase name="Mutant #2832" file="npc/character/character.py" line="57">
			<system-out>        self.tags.add_tag('faketype')</system-out>
		</testcase>
		<testcase name="Mutant #2833" file="npc/character/character.py" line="58">
			<system-out>        self.tags.add_tag('title')</system-out>
		</testcase>
		<testcase name="Mutant #2834" file="npc/character/character.py" line="59">
			<system-out>        self.tags.add_tag('appearance')</system-out>
		</testcase>
		<testcase name="Mutant #2835" file="npc/character/character.py" line="60">
			<system-out>        self.tags.add_tag('location')</system-out>
		</testcase>
		<testcase name="Mutant #2836" file="npc/character/character.py" line="61">
			<system-out>        self.tags.add_flag('foreign')</system-out>
		</testcase>
		<testcase name="Mutant #2837" file="npc/character/character.py" line="62">
			<system-out>        self.tags.add_flag('wanderer')</system-out>
		</testcase>
		<testcase name="Mutant #2838" file="npc/character/character.py" line="63">
			<system-out>        self.tags.add_flag('skip')</system-out>
		</testcase>
		<testcase name="Mutant #2839" file="npc/character/character.py" line="64">
			<system-out>        self.tags.add_flag('nolint')</system-out>
		</testcase>
		<testcase name="Mutant #2840" file="npc/character/character.py" line="65">
			<system-out>        self.tags.add_flag('keep')</system-out>
		</testcase>
		<testcase name="Mutant #2841" file="npc/character/character.py" line="66">
			<system-out>        self.tags.add_flag('dead')</system-out>
		</testcase>
		<testcase name="Mutant #2842" file="npc/character/character.py" line="67">
			<system-out>        self.tags.add_group('group')</system-out>
		</testcase>
		<testcase name="Mutant #2843" file="npc/character/character.py" line="73">
			<system-out>            self.path = other_char.path</system-out>
		</testcase>
		<testcase name="Mutant #2844" file="npc/character/character.py" line="76">
			<system-out>            attributes = wrap_strings(attributes)</system-out>
		</testcase>
		<testcase name="Mutant #2845" file="npc/character/character.py" line="81">
			<system-out>        if self.path is None:</system-out>
		</testcase>
		<testcase name="Mutant #2846" file="npc/character/character.py" line="82">
			<system-out>            self.path = ''</system-out>
		</testcase>
		<testcase name="Mutant #2847" file="npc/character/character.py" line="82">
			<system-out>            self.path = ''</system-out>
		</testcase>
		<testcase name="Mutant #2848" file="npc/character/character.py" line="84">
			<system-out>        self.problems = ['Not validated']</system-out>
		</testcase>
		<testcase name="Mutant #2849" file="npc/character/character.py" line="84">
			<system-out>        self.problems = ['Not validated']</system-out>
		</testcase>
		<testcase name="Mutant #2850" file="npc/character/character.py" line="92">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2851" file="npc/character/character.py" line="98">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #2852" file="npc/character/character.py" line="98">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #2853" file="npc/character/character.py" line="100">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2854" file="npc/character/character.py" line="105">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2855" file="npc/character/character.py" line="105">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2856" file="npc/character/character.py" line="108">
			<system-out>        return self.tags('type').first_value().lower()</system-out>
		</testcase>
		<testcase name="Mutant #2857" file="npc/character/character.py" line="110">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2858" file="npc/character/character.py" line="115">
			<system-out>        return self.tags('foreign').filled or self.tags('wanderer').present</system-out>
		</testcase>
		<testcase name="Mutant #2859" file="npc/character/character.py" line="115">
			<system-out>        return self.tags('foreign').filled or self.tags('wanderer').present</system-out>
		</testcase>
		<testcase name="Mutant #2860" file="npc/character/character.py" line="115">
			<system-out>        return self.tags('foreign').filled or self.tags('wanderer').present</system-out>
		</testcase>
		<testcase name="Mutant #2861" file="npc/character/character.py" line="117">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2862" file="npc/character/character.py" line="122">
			<system-out>        return self.tags('foreign').filled_data + self.tags('location').filled_data</system-out>
		</testcase>
		<testcase name="Mutant #2863" file="npc/character/character.py" line="122">
			<system-out>        return self.tags('foreign').filled_data + self.tags('location').filled_data</system-out>
		</testcase>
		<testcase name="Mutant #2864" file="npc/character/character.py" line="122">
			<system-out>        return self.tags('foreign').filled_data + self.tags('location').filled_data</system-out>
		</testcase>
		<testcase name="Mutant #2865" file="npc/character/character.py" line="124">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2866" file="npc/character/character.py" line="129">
			<system-out>        return len(list(self.locations)) &gt;= 1</system-out>
		</testcase>
		<testcase name="Mutant #2867" file="npc/character/character.py" line="129">
			<system-out>        return len(list(self.locations)) &gt;= 1</system-out>
		</testcase>
		<testcase name="Mutant #2868" file="npc/character/character.py" line="131">
			<system-out>    def validate(self, strict=False):</system-out>
		</testcase>
		<testcase name="Mutant #2869" file="npc/character/character.py" line="145">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2870" file="npc/character/character.py" line="152">
			<system-out>            right_class = npc.character.character_klass_from_type(self.type_key).__name__</system-out>
		</testcase>
		<testcase name="Mutant #2871" file="npc/character/character.py" line="153">
			<system-out>            current_class = self.__class__.__name__</system-out>
		</testcase>
		<testcase name="Mutant #2872" file="npc/character/character.py" line="154">
			<system-out>            if right_class != current_class:</system-out>
		</testcase>
		<testcase name="Mutant #2873" file="npc/character/character.py" line="155">
			<system-out>                self.problems.append(&quot;Incorrect type '{}' for class '{}': implies class '{}'&quot;.format(self.type_key, current_class, right_class))</system-out>
		</testcase>
		<testcase name="Mutant #2874" file="npc/character/character.py" line="157">
			<system-out>            if self.tags('nolint').present and not self.tags('skip').present:</system-out>
		</testcase>
		<testcase name="Mutant #2875" file="npc/character/character.py" line="157">
			<system-out>            if self.tags('nolint').present and not self.tags('skip').present:</system-out>
		</testcase>
		<testcase name="Mutant #2876" file="npc/character/character.py" line="157">
			<system-out>            if self.tags('nolint').present and not self.tags('skip').present:</system-out>
		</testcase>
		<testcase name="Mutant #2877" file="npc/character/character.py" line="157">
			<system-out>            if self.tags('nolint').present and not self.tags('skip').present:</system-out>
		</testcase>
		<testcase name="Mutant #2878" file="npc/character/character.py" line="158">
			<system-out>                self.problems.append(&quot;Linting disabled, but character is visible in lists&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2879" file="npc/character/character.py" line="164">
			<system-out>    def type_validations(self, strict=False):</system-out>
		</testcase>
		<testcase name="Mutant #2880" file="npc/character/character.py" line="187">
			<system-out>        header_tags = self.tags.present()</system-out>
		</testcase>
		<testcase name="Mutant #2881" file="npc/character/character.py" line="190">
			<system-out>        if 'name' in header_tags:</system-out>
		</testcase>
		<testcase name="Mutant #2882" file="npc/character/character.py" line="190">
			<system-out>        if 'name' in header_tags:</system-out>
		</testcase>
		<testcase name="Mutant #2883" file="npc/character/character.py" line="191">
			<system-out>            first_name = header_tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2884" file="npc/character/character.py" line="191">
			<system-out>            first_name = header_tags('name').first_value()</system-out>
		</testcase>
		<testcase name="Mutant #2885" file="npc/character/character.py" line="192">
			<system-out>            if first_name not in self.path:</system-out>
		</testcase>
		<testcase name="Mutant #2886" file="npc/character/character.py" line="193">
			<system-out>                header_tags.add_tag('realname', first_name)</system-out>
		</testcase>
		<testcase name="Mutant #2887" file="npc/character/character.py" line="194">
			<system-out>                header_tags['name'] = header_tags('name').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2888" file="npc/character/character.py" line="194">
			<system-out>                header_tags['name'] = header_tags('name').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2889" file="npc/character/character.py" line="194">
			<system-out>                header_tags['name'] = header_tags('name').remaining()</system-out>
		</testcase>
		<testcase name="Mutant #2890" file="npc/character/character.py" line="197">
			<system-out>        header_tags = self.add_compound_tags(header_tags).present()</system-out>
		</testcase>
		<testcase name="Mutant #2891" file="npc/character/character.py" line="199">
			<system-out>        lines = [tag.to_header() for tag in header_tags.values()]</system-out>
		</testcase>
		<testcase name="Mutant #2892" file="npc/character/character.py" line="200">
			<system-out>        return &quot;\n&quot;.join(lines)</system-out>
		</testcase>
		<testcase name="Mutant #2893" file="npc/character/character.py" line="226">
			<system-out>        dump = self.tags</system-out>
		</testcase>
		<testcase name="Mutant #2894" file="npc/character/character.py" line="227">
			<system-out>        dump['path'] = self.path</system-out>
		</testcase>
		<testcase name="Mutant #2895" file="npc/character/character.py" line="227">
			<system-out>        dump['path'] = self.path</system-out>
		</testcase>
		<testcase name="Mutant #2896" file="npc/character/character.py" line="246">
			<system-out>        if self.tags('faketype').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2897" file="npc/character/character.py" line="247">
			<system-out>            self.tags['type'] = self.tags['faketype']</system-out>
		</testcase>
		<testcase name="Mutant #2898" file="npc/character/character.py" line="247">
			<system-out>            self.tags['type'] = self.tags['faketype']</system-out>
		</testcase>
		<testcase name="Mutant #2899" file="npc/character/character.py" line="247">
			<system-out>            self.tags['type'] = self.tags['faketype']</system-out>
		</testcase>
		<testcase name="Mutant #2900" file="npc/character/character.py" line="250">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2901" file="npc/character/character.py" line="250">
			<system-out>        if not self.tags('type').filled:</system-out>
		</testcase>
		<testcase name="Mutant #2902" file="npc/character/character.py" line="251">
			<system-out>            self.tags('type').append('Unknown')</system-out>
		</testcase>
		<testcase name="Mutant #2903" file="npc/character/character.py" line="251">
			<system-out>            self.tags('type').append('Unknown')</system-out>
		</testcase>
		<testcase name="Mutant #2904" file="npc/character/__init__.py" line="40">
			<system-out>        klass = character_klass_from_type(other_char.type_key)</system-out>
		</testcase>
		<testcase name="Mutant #2905" file="npc/character/__init__.py" line="42">
			<system-out>        klass = character_klass_from_type(attributes['type'][0])</system-out>
		</testcase>
		<testcase name="Mutant #2906" file="npc/character/__init__.py" line="42">
			<system-out>        klass = character_klass_from_type(attributes['type'][0])</system-out>
		</testcase>
		<testcase name="Mutant #2907" file="npc/character/__init__.py" line="42">
			<system-out>        klass = character_klass_from_type(attributes['type'][0])</system-out>
		</testcase>
		<testcase name="Mutant #2908" file="npc/character/__init__.py" line="44">
			<system-out>        klass = Character</system-out>
		</testcase>
		<testcase name="Mutant #2909" file="npc/character/__init__.py" line="59">
			<system-out>        ctype = ctype.lower()</system-out>
		</testcase>
		<testcase name="Mutant #2910" file="npc/character/__init__.py" line="60">
			<system-out>        if ctype == 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #2911" file="npc/character/__init__.py" line="60">
			<system-out>        if ctype == 'changeling':</system-out>
		</testcase>
		<testcase name="Mutant #2912" file="npc/character/__init__.py" line="62">
			<system-out>        if ctype == 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #2913" file="npc/character/__init__.py" line="62">
			<system-out>        if ctype == 'werewolf':</system-out>
		</testcase>
		<testcase name="Mutant #2914" file="npc/character/__init__.py" line="64">
			<system-out>        if ctype == 'spirit':</system-out>
		</testcase>
		<testcase name="Mutant #2915" file="npc/character/__init__.py" line="64">
			<system-out>        if ctype == 'spirit':</system-out>
		</testcase>
		<testcase name="Mutant #2916" file="npc/character/tags/flag.py" line="21">
			<system-out>        self._present = False</system-out>
		</testcase>
		<testcase name="Mutant #2917" file="npc/character/tags/flag.py" line="21">
			<system-out>        self._present = False</system-out>
		</testcase>
		<testcase name="Mutant #2918" file="npc/character/tags/flag.py" line="33">
			<system-out>        if type(values) != bool:</system-out>
		</testcase>
		<testcase name="Mutant #2919" file="npc/character/tags/flag.py" line="53">
			<system-out>        self._present = False</system-out>
		</testcase>
		<testcase name="Mutant #2920" file="npc/character/tags/flag.py" line="53">
			<system-out>        self._present = False</system-out>
		</testcase>
		<testcase name="Mutant #2921" file="npc/character/tags/flag.py" line="56">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2922" file="npc/character/tags/flag.py" line="64">
			<system-out>        return super().present or self._present</system-out>
		</testcase>
		<testcase name="Mutant #2923" file="npc/character/tags/flag.py" line="66">
			<system-out>    def touch(self, present: bool = True):</system-out>
		</testcase>
		<testcase name="Mutant #2924" file="npc/character/tags/flag.py" line="77">
			<system-out>        self._present = bool(present)</system-out>
		</testcase>
		<testcase name="Mutant #2925" file="npc/character/tags/flag.py" line="79">
			<system-out>    def validate(self, strict: bool=False):</system-out>
		</testcase>
		<testcase name="Mutant #2926" file="npc/character/tags/flag.py" line="94">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2927" file="npc/character/tags/flag.py" line="96">
			<system-out>        if self.required and not self.present:</system-out>
		</testcase>
		<testcase name="Mutant #2928" file="npc/character/tags/flag.py" line="96">
			<system-out>        if self.required and not self.present:</system-out>
		</testcase>
		<testcase name="Mutant #2929" file="npc/character/tags/flag.py" line="97">
			<system-out>            self.problems.append(&quot;No values for flag '{}'&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #2930" file="npc/character/tags/flag.py" line="99">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #2931" file="npc/character/tags/flag.py" line="99">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #2932" file="npc/character/tags/flag.py" line="100">
			<system-out>            self.problems.append(&quot;Value '{}' for tag '{}' cannot be hidden, because it does not exist&quot;.format(value, self.name))</system-out>
		</testcase>
		<testcase name="Mutant #2933" file="npc/character/tags/flag.py" line="103">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2934" file="npc/character/tags/flag.py" line="103">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2935" file="npc/character/tags/flag.py" line="103">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2936" file="npc/character/tags/flag.py" line="103">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2937" file="npc/character/tags/flag.py" line="103">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2938" file="npc/character/tags/flag.py" line="104">
			<system-out>                self.problems.append(&quot;Too many values for flag '{}'. Limit of {}&quot;.format(self.name, self.limit))</system-out>
		</testcase>
		<testcase name="Mutant #2939" file="npc/character/tags/flag.py" line="124">
			<system-out>        if self.present and not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #2940" file="npc/character/tags/flag.py" line="124">
			<system-out>        if self.present and not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #2941" file="npc/character/tags/flag.py" line="125">
			<system-out>            return &quot;@{}&quot;.format(self.name)</system-out>
		</testcase>
		<testcase name="Mutant #2942" file="npc/character/tags/group_tag.py" line="13">
			<system-out>        required: bool=False,</system-out>
		</testcase>
		<testcase name="Mutant #2943" file="npc/character/tags/group_tag.py" line="14">
			<system-out>        hidden: bool=False,</system-out>
		</testcase>
		<testcase name="Mutant #2944" file="npc/character/tags/group_tag.py" line="15">
			<system-out>        limit: int=-1,</system-out>
		</testcase>
		<testcase name="Mutant #2945" file="npc/character/tags/group_tag.py" line="15">
			<system-out>        limit: int=-1,</system-out>
		</testcase>
		<testcase name="Mutant #2946" file="npc/character/tags/group_tag.py" line="16">
			<system-out>        subtag: str='rank',</system-out>
		</testcase>
		<testcase name="Mutant #2947" file="npc/character/tags/group_tag.py" line="40">
			<system-out>        self.name = name</system-out>
		</testcase>
		<testcase name="Mutant #2948" file="npc/character/tags/group_tag.py" line="41">
			<system-out>        self.required = required</system-out>
		</testcase>
		<testcase name="Mutant #2949" file="npc/character/tags/group_tag.py" line="42">
			<system-out>        self.hidden = hidden</system-out>
		</testcase>
		<testcase name="Mutant #2950" file="npc/character/tags/group_tag.py" line="43">
			<system-out>        self.hidden_values = []</system-out>
		</testcase>
		<testcase name="Mutant #2951" file="npc/character/tags/group_tag.py" line="44">
			<system-out>        self.limit = limit</system-out>
		</testcase>
		<testcase name="Mutant #2952" file="npc/character/tags/group_tag.py" line="45">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2953" file="npc/character/tags/group_tag.py" line="46">
			<system-out>        self.subtag_name = subtag</system-out>
		</testcase>
		<testcase name="Mutant #2954" file="npc/character/tags/group_tag.py" line="53">
			<system-out>        return &quot;{cls}('{name}', {data}, required={req}, hidden={hidden}, hidden_values={hidden_vals}, limit={limit}, subtag='{subtag}')&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #2955" file="npc/character/tags/group_tag.py" line="75">
			<system-out>        if hasattr(values, 'hidden'):</system-out>
		</testcase>
		<testcase name="Mutant #2956" file="npc/character/tags/group_tag.py" line="76">
			<system-out>            self.hidden = values.hidden</system-out>
		</testcase>
		<testcase name="Mutant #2957" file="npc/character/tags/group_tag.py" line="77">
			<system-out>        if hasattr(values, 'hidden_values'):</system-out>
		</testcase>
		<testcase name="Mutant #2958" file="npc/character/tags/group_tag.py" line="78">
			<system-out>            self.hidden_values = values.hidden_values</system-out>
		</testcase>
		<testcase name="Mutant #2959" file="npc/character/tags/group_tag.py" line="82">
			<system-out>                self.data[key] = subtag</system-out>
		</testcase>
		<testcase name="Mutant #2960" file="npc/character/tags/group_tag.py" line="85">
			<system-out>                self.data[val] = SubTag(self.subtag_name)</system-out>
		</testcase>
		<testcase name="Mutant #2961" file="npc/character/tags/group_tag.py" line="87">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2962" file="npc/character/tags/group_tag.py" line="94">
			<system-out>        return len(self.data) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #2963" file="npc/character/tags/group_tag.py" line="94">
			<system-out>        return len(self.data) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #2964" file="npc/character/tags/group_tag.py" line="96">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2965" file="npc/character/tags/group_tag.py" line="110">
			<system-out>        return True and self.present</system-out>
		</testcase>
		<testcase name="Mutant #2966" file="npc/character/tags/group_tag.py" line="110">
			<system-out>        return True and self.present</system-out>
		</testcase>
		<testcase name="Mutant #2967" file="npc/character/tags/group_tag.py" line="112">
			<system-out>    def touch(self, present: bool = True):</system-out>
		</testcase>
		<testcase name="Mutant #2968" file="npc/character/tags/group_tag.py" line="123">
			<system-out>        print_err(&quot;Calling touch() on non-flag class {} object '{}'&quot;.format(type(self).__name__, self.name))</system-out>
		</testcase>
		<testcase name="Mutant #2969" file="npc/character/tags/group_tag.py" line="136">
			<system-out>        if val in self.data:</system-out>
		</testcase>
		<testcase name="Mutant #2970" file="npc/character/tags/group_tag.py" line="139">
			<system-out>        self.data[val] = SubTag(self.subtag_name)</system-out>
		</testcase>
		<testcase name="Mutant #2971" file="npc/character/tags/group_tag.py" line="153">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2972" file="npc/character/tags/group_tag.py" line="160">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #2973" file="npc/character/tags/group_tag.py" line="160">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #2974" file="npc/character/tags/group_tag.py" line="162">
			<system-out>    def validate(self, strict: bool=False):</system-out>
		</testcase>
		<testcase name="Mutant #2975" file="npc/character/tags/group_tag.py" line="179">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #2976" file="npc/character/tags/group_tag.py" line="181">
			<system-out>        if self.required and not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #2977" file="npc/character/tags/group_tag.py" line="181">
			<system-out>        if self.required and not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #2978" file="npc/character/tags/group_tag.py" line="182">
			<system-out>            self.problems.append(&quot;No values for tag '{}'&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #2979" file="npc/character/tags/group_tag.py" line="184">
			<system-out>        if self.required and self.limit == 0:</system-out>
		</testcase>
		<testcase name="Mutant #2980" file="npc/character/tags/group_tag.py" line="184">
			<system-out>        if self.required and self.limit == 0:</system-out>
		</testcase>
		<testcase name="Mutant #2981" file="npc/character/tags/group_tag.py" line="184">
			<system-out>        if self.required and self.limit == 0:</system-out>
		</testcase>
		<testcase name="Mutant #2982" file="npc/character/tags/group_tag.py" line="185">
			<system-out>            self.problems.append(&quot;Tag '{}' is required but limited to zero values&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #2983" file="npc/character/tags/group_tag.py" line="187">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #2984" file="npc/character/tags/group_tag.py" line="187">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #2985" file="npc/character/tags/group_tag.py" line="188">
			<system-out>            self.problems.append(&quot;Value '{}' for tag '{}' cannot be hidden, because it does not exist&quot;.format(value, self.name))</system-out>
		</testcase>
		<testcase name="Mutant #2986" file="npc/character/tags/group_tag.py" line="191">
			<system-out>            if subtag.name != self.subtag_name:</system-out>
		</testcase>
		<testcase name="Mutant #2987" file="npc/character/tags/group_tag.py" line="192">
			<system-out>                self.problems.append(&quot;Tag '{}' uses subtag '{}', but found '{}' for '{}'&quot;.format(self.name, self.subtag_name, subtag.name, value))</system-out>
		</testcase>
		<testcase name="Mutant #2988" file="npc/character/tags/group_tag.py" line="195">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2989" file="npc/character/tags/group_tag.py" line="195">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2990" file="npc/character/tags/group_tag.py" line="195">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2991" file="npc/character/tags/group_tag.py" line="195">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2992" file="npc/character/tags/group_tag.py" line="195">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #2993" file="npc/character/tags/group_tag.py" line="196">
			<system-out>                self.problems.append(&quot;Too many values for tag '{}'. Limit of {}&quot;.format(self.name, self.limit))</system-out>
		</testcase>
		<testcase name="Mutant #2994" file="npc/character/tags/group_tag.py" line="213">
			<system-out>        if not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #2995" file="npc/character/tags/group_tag.py" line="214">
			<system-out>            return ''</system-out>
		</testcase>
		<testcase name="Mutant #2996" file="npc/character/tags/group_tag.py" line="216">
			<system-out>        header_lines = []</system-out>
		</testcase>
		<testcase name="Mutant #2997" file="npc/character/tags/group_tag.py" line="218">
			<system-out>            header_lines.append(&quot;@{} {}&quot;.format(self.name, val))</system-out>
		</testcase>
		<testcase name="Mutant #2998" file="npc/character/tags/group_tag.py" line="219">
			<system-out>            if val in self.hidden_values:</system-out>
		</testcase>
		<testcase name="Mutant #2999" file="npc/character/tags/group_tag.py" line="220">
			<system-out>                header_lines.append(&quot;@hide {} &gt;&gt; {}&quot;.format(self.name, val))</system-out>
		</testcase>
		<testcase name="Mutant #3000" file="npc/character/tags/group_tag.py" line="224">
			<system-out>            header_lines.append(&quot;@hide {}&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3001" file="npc/character/tags/group_tag.py" line="226">
			<system-out>        return &quot;\n&quot;.join([line for line in header_lines if line])</system-out>
		</testcase>
		<testcase name="Mutant #3002" file="npc/character/tags/group_tag.py" line="248">
			<system-out>        new_tag = copy(self)</system-out>
		</testcase>
		<testcase name="Mutant #3003" file="npc/character/tags/group_tag.py" line="249">
			<system-out>        new_keys = list(self.data)[start:stop]</system-out>
		</testcase>
		<testcase name="Mutant #3004" file="npc/character/tags/group_tag.py" line="250">
			<system-out>        new_tag.data = {k: v for k, v in self.data.items() if k in new_keys}</system-out>
		</testcase>
		<testcase name="Mutant #3005" file="npc/character/tags/group_tag.py" line="250">
			<system-out>        new_tag.data = {k: v for k, v in self.data.items() if k in new_keys}</system-out>
		</testcase>
		<testcase name="Mutant #3006" file="npc/character/tags/group_tag.py" line="262">
			<system-out>        return self.tagslice(0, 1)</system-out>
		</testcase>
		<testcase name="Mutant #3007" file="npc/character/tags/group_tag.py" line="262">
			<system-out>        return self.tagslice(0, 1)</system-out>
		</testcase>
		<testcase name="Mutant #3008" file="npc/character/tags/group_tag.py" line="273">
			<system-out>        return self.tagslice(1, None)</system-out>
		</testcase>
		<testcase name="Mutant #3009" file="npc/character/tags/group_tag.py" line="306">
			<system-out>        if value == '*' and self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3010" file="npc/character/tags/group_tag.py" line="306">
			<system-out>        if value == '*' and self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3011" file="npc/character/tags/group_tag.py" line="306">
			<system-out>        if value == '*' and self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3012" file="npc/character/tags/group_tag.py" line="307">
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #3013" file="npc/character/tags/group_tag.py" line="309">
			<system-out>        value = value.casefold()</system-out>
		</testcase>
		<testcase name="Mutant #3014" file="npc/character/tags/group_tag.py" line="311">
			<system-out>            if value in real_value.casefold():</system-out>
		</testcase>
		<testcase name="Mutant #3015" file="npc/character/tags/group_tag.py" line="312">
			<system-out>                return True</system-out>
		</testcase>
		<testcase name="Mutant #3016" file="npc/character/tags/group_tag.py" line="314">
			<system-out>                return True</system-out>
		</testcase>
		<testcase name="Mutant #3017" file="npc/character/tags/group_tag.py" line="316">
			<system-out>        return False</system-out>
		</testcase>
		<testcase name="Mutant #3018" file="npc/character/tags/group_tag.py" line="342">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #3019" file="npc/character/tags/unknown_tag.py" line="12">
			<system-out>    def __init__(self, name: str, *args, hidden: bool=False, limit: int=-1):</system-out>
		</testcase>
		<testcase name="Mutant #3020" file="npc/character/tags/unknown_tag.py" line="12">
			<system-out>    def __init__(self, name: str, *args, hidden: bool=False, limit: int=-1):</system-out>
		</testcase>
		<testcase name="Mutant #3021" file="npc/character/tags/unknown_tag.py" line="12">
			<system-out>    def __init__(self, name: str, *args, hidden: bool=False, limit: int=-1):</system-out>
		</testcase>
		<testcase name="Mutant #3022" file="npc/character/tags/unknown_tag.py" line="26">
			<system-out>        super().__init__(name, *args, required=False, hidden=hidden, limit=limit)</system-out>
		</testcase>
		<testcase name="Mutant #3023" file="npc/character/tags/unknown_tag.py" line="29">
			<system-out>        return &quot;{}('{}', {}, hidden={}, limit={})&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #3024" file="npc/character/tags/unknown_tag.py" line="37">
			<system-out>    def validate(self, strict: bool=False):</system-out>
		</testcase>
		<testcase name="Mutant #3025" file="npc/character/tags/unknown_tag.py" line="52">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #3026" file="npc/character/tags/unknown_tag.py" line="52">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #3027" file="npc/character/tags/unknown_tag.py" line="53">
			<system-out>            self.problems.append(&quot;Value '{}' for tag '{}' cannot be hidden, because it does not exist&quot;.format(value, self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3028" file="npc/character/tags/unknown_tag.py" line="56">
			<system-out>            self.problems.append(&quot;Unrecognized tag '{}'&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3029" file="npc/character/tags/unknown_tag.py" line="57">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3030" file="npc/character/tags/unknown_tag.py" line="57">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3031" file="npc/character/tags/unknown_tag.py" line="57">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3032" file="npc/character/tags/unknown_tag.py" line="57">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3033" file="npc/character/tags/unknown_tag.py" line="57">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3034" file="npc/character/tags/unknown_tag.py" line="58">
			<system-out>                self.problems.append(&quot;Too many values for tag '{}'. Limit of {}&quot;.format(self.name, self.limit))</system-out>
		</testcase>
		<testcase name="Mutant #3035" file="npc/character/tags/unknown_tag.py" line="78">
			<system-out>        if not self.data:</system-out>
		</testcase>
		<testcase name="Mutant #3036" file="npc/character/tags/unknown_tag.py" line="79">
			<system-out>            return &quot;@{}&quot;.format(self.name)</system-out>
		</testcase>
		<testcase name="Mutant #3037" file="npc/character/tags/tag_container.py" line="24">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #3038" file="npc/character/tags/tag_container.py" line="39">
			<system-out>        tag = self.data.get(tag_name)</system-out>
		</testcase>
		<testcase name="Mutant #3039" file="npc/character/tags/tag_container.py" line="40">
			<system-out>        if tag is None:</system-out>
		</testcase>
		<testcase name="Mutant #3040" file="npc/character/tags/tag_container.py" line="41">
			<system-out>            tag = UnknownTag(tag_name)</system-out>
		</testcase>
		<testcase name="Mutant #3041" file="npc/character/tags/tag_container.py" line="54">
			<system-out>        if tag.name in self.data:</system-out>
		</testcase>
		<testcase name="Mutant #3042" file="npc/character/tags/tag_container.py" line="57">
			<system-out>        self.data[tag.name] = tag</system-out>
		</testcase>
		<testcase name="Mutant #3043" file="npc/character/tags/tag_container.py" line="94">
			<system-out>        new_container = copy(self)</system-out>
		</testcase>
		<testcase name="Mutant #3044" file="npc/character/tags/tag_container.py" line="95">
			<system-out>        new_container.data = {k: v for k, v in self.data.items() if v.present}</system-out>
		</testcase>
		<testcase name="Mutant #3045" file="npc/character/tags/tag_container.py" line="126">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #3046" file="npc/character/tags/tag_container.py" line="133">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #3047" file="npc/character/tags/tag_container.py" line="133">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #3048" file="npc/character/tags/tag_container.py" line="135">
			<system-out>    def validate(self, strict: bool=False):</system-out>
		</testcase>
		<testcase name="Mutant #3049" file="npc/character/tags/tag_container.py" line="145">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #3050" file="npc/character/tags/tag_container.py" line="150">
			<system-out>            if key != tag.name:</system-out>
		</testcase>
		<testcase name="Mutant #3051" file="npc/character/tags/tag_container.py" line="151">
			<system-out>                self.problems.append(&quot;Tag '{}' has wrong key: '{}'&quot;.format(tag.name, key))</system-out>
		</testcase>
		<testcase name="Mutant #3052" file="npc/character/tags/sub_tag.py" line="16">
			<system-out>        if not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3053" file="npc/character/tags/sub_tag.py" line="17">
			<system-out>            return ''</system-out>
		</testcase>
		<testcase name="Mutant #3054" file="npc/character/tags/sub_tag.py" line="19">
			<system-out>        header_lines = []</system-out>
		</testcase>
		<testcase name="Mutant #3055" file="npc/character/tags/sub_tag.py" line="21">
			<system-out>            header_lines.append(&quot;@{} {}&quot;.format(self.name, val))</system-out>
		</testcase>
		<testcase name="Mutant #3056" file="npc/character/tags/sub_tag.py" line="22">
			<system-out>            if val in self.hidden_values:</system-out>
		</testcase>
		<testcase name="Mutant #3057" file="npc/character/tags/sub_tag.py" line="23">
			<system-out>                header_lines.append(&quot;@hide {} &gt;&gt; {} &gt;&gt; {}&quot;.format(parent_name, key_name, val))</system-out>
		</testcase>
		<testcase name="Mutant #3058" file="npc/character/tags/sub_tag.py" line="26">
			<system-out>            header_lines.append(&quot;@hide {} &gt;&gt; {} &gt;&gt; subtags&quot;.format(parent_name, key_name))</system-out>
		</testcase>
		<testcase name="Mutant #3059" file="npc/character/tags/sub_tag.py" line="28">
			<system-out>        return &quot;\n&quot;.join(header_lines)</system-out>
		</testcase>
		<testcase name="Mutant #3060" file="npc/character/tags/description_tag.py" line="17">
			<system-out>        super().__init__('description', *args, required=True, hidden=False, limit=-1)</system-out>
		</testcase>
		<testcase name="Mutant #3061" file="npc/character/tags/description_tag.py" line="17">
			<system-out>        super().__init__('description', *args, required=True, hidden=False, limit=-1)</system-out>
		</testcase>
		<testcase name="Mutant #3062" file="npc/character/tags/description_tag.py" line="17">
			<system-out>        super().__init__('description', *args, required=True, hidden=False, limit=-1)</system-out>
		</testcase>
		<testcase name="Mutant #3063" file="npc/character/tags/description_tag.py" line="17">
			<system-out>        super().__init__('description', *args, required=True, hidden=False, limit=-1)</system-out>
		</testcase>
		<testcase name="Mutant #3064" file="npc/character/tags/description_tag.py" line="17">
			<system-out>        super().__init__('description', *args, required=True, hidden=False, limit=-1)</system-out>
		</testcase>
		<testcase name="Mutant #3065" file="npc/character/tags/description_tag.py" line="20">
			<system-out>        values = flatten([values])</system-out>
		</testcase>
		<testcase name="Mutant #3066" file="npc/character/tags/description_tag.py" line="30">
			<system-out>        if not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3067" file="npc/character/tags/description_tag.py" line="31">
			<system-out>            return ''</system-out>
		</testcase>
		<testcase name="Mutant #3068" file="npc/character/tags/description_tag.py" line="33">
			<system-out>        return &quot;\n&quot;.join(self.data)</system-out>
		</testcase>
		<testcase name="Mutant #3069" file="npc/character/tags/tag.py" line="8">
			<system-out>    def __init__(self, name: str, *args, required: bool=False, hidden: bool=False, limit: int=-1):</system-out>
		</testcase>
		<testcase name="Mutant #3070" file="npc/character/tags/tag.py" line="8">
			<system-out>    def __init__(self, name: str, *args, required: bool=False, hidden: bool=False, limit: int=-1):</system-out>
		</testcase>
		<testcase name="Mutant #3071" file="npc/character/tags/tag.py" line="8">
			<system-out>    def __init__(self, name: str, *args, required: bool=False, hidden: bool=False, limit: int=-1):</system-out>
		</testcase>
		<testcase name="Mutant #3072" file="npc/character/tags/tag.py" line="8">
			<system-out>    def __init__(self, name: str, *args, required: bool=False, hidden: bool=False, limit: int=-1):</system-out>
		</testcase>
		<testcase name="Mutant #3073" file="npc/character/tags/tag.py" line="24">
			<system-out>        self.name = name</system-out>
		</testcase>
		<testcase name="Mutant #3074" file="npc/character/tags/tag.py" line="25">
			<system-out>        self.required = required</system-out>
		</testcase>
		<testcase name="Mutant #3075" file="npc/character/tags/tag.py" line="26">
			<system-out>        self.hidden = hidden</system-out>
		</testcase>
		<testcase name="Mutant #3076" file="npc/character/tags/tag.py" line="27">
			<system-out>        self.hidden_values = []</system-out>
		</testcase>
		<testcase name="Mutant #3077" file="npc/character/tags/tag.py" line="28">
			<system-out>        self.limit = limit</system-out>
		</testcase>
		<testcase name="Mutant #3078" file="npc/character/tags/tag.py" line="29">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #3079" file="npc/character/tags/tag.py" line="30">
			<system-out>        self.subtag_name = None</system-out>
		</testcase>
		<testcase name="Mutant #3080" file="npc/character/tags/tag.py" line="35">
			<system-out>        return &quot;{cls}('{name}', {data}, required={req}, hidden={hidden}, hidden_values={hidden_vals}, limit={limit})&quot;.format(</system-out>
		</testcase>
		<testcase name="Mutant #3081" file="npc/character/tags/tag.py" line="52">
			<system-out>        if hasattr(values, 'hidden'):</system-out>
		</testcase>
		<testcase name="Mutant #3082" file="npc/character/tags/tag.py" line="53">
			<system-out>            self.hidden = values.hidden</system-out>
		</testcase>
		<testcase name="Mutant #3083" file="npc/character/tags/tag.py" line="54">
			<system-out>        if hasattr(values, 'hidden_values'):</system-out>
		</testcase>
		<testcase name="Mutant #3084" file="npc/character/tags/tag.py" line="57">
			<system-out>        if hasattr(values, 'data'):</system-out>
		</testcase>
		<testcase name="Mutant #3085" file="npc/character/tags/tag.py" line="58">
			<system-out>            self.data = values.data</system-out>
		</testcase>
		<testcase name="Mutant #3086" file="npc/character/tags/tag.py" line="60">
			<system-out>            self.data = values</system-out>
		</testcase>
		<testcase name="Mutant #3087" file="npc/character/tags/tag.py" line="71">
			<system-out>        if not value.strip():</system-out>
		</testcase>
		<testcase name="Mutant #3088" file="npc/character/tags/tag.py" line="76">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #3089" file="npc/character/tags/tag.py" line="83">
			<system-out>        return len(self.filled_data) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #3090" file="npc/character/tags/tag.py" line="83">
			<system-out>        return len(self.filled_data) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #3091" file="npc/character/tags/tag.py" line="85">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #3092" file="npc/character/tags/tag.py" line="99">
			<system-out>        return True and self.present</system-out>
		</testcase>
		<testcase name="Mutant #3093" file="npc/character/tags/tag.py" line="99">
			<system-out>        return True and self.present</system-out>
		</testcase>
		<testcase name="Mutant #3094" file="npc/character/tags/tag.py" line="101">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #3095" file="npc/character/tags/tag.py" line="108">
			<system-out>    def touch(self, present: bool = True):</system-out>
		</testcase>
		<testcase name="Mutant #3096" file="npc/character/tags/tag.py" line="119">
			<system-out>        print_err(&quot;Calling touch() on non-flag class {} object '{}'&quot;.format(type(self).__name__, self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3097" file="npc/character/tags/tag.py" line="131">
			<system-out>        print_err(&quot;Calling touch() on non-flag class {} object '{}'&quot;.format(type(self).__name__, self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3098" file="npc/character/tags/tag.py" line="133">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #3099" file="npc/character/tags/tag.py" line="140">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #3100" file="npc/character/tags/tag.py" line="140">
			<system-out>        return len(self.problems) == 0</system-out>
		</testcase>
		<testcase name="Mutant #3101" file="npc/character/tags/tag.py" line="142">
			<system-out>    def validate(self, strict: bool=False):</system-out>
		</testcase>
		<testcase name="Mutant #3102" file="npc/character/tags/tag.py" line="158">
			<system-out>        self.problems = []</system-out>
		</testcase>
		<testcase name="Mutant #3103" file="npc/character/tags/tag.py" line="160">
			<system-out>        if self.required and not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3104" file="npc/character/tags/tag.py" line="160">
			<system-out>        if self.required and not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3105" file="npc/character/tags/tag.py" line="161">
			<system-out>            self.problems.append(&quot;No values for tag '{}'&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3106" file="npc/character/tags/tag.py" line="163">
			<system-out>        if self.required and self.limit == 0:</system-out>
		</testcase>
		<testcase name="Mutant #3107" file="npc/character/tags/tag.py" line="163">
			<system-out>        if self.required and self.limit == 0:</system-out>
		</testcase>
		<testcase name="Mutant #3108" file="npc/character/tags/tag.py" line="163">
			<system-out>        if self.required and self.limit == 0:</system-out>
		</testcase>
		<testcase name="Mutant #3109" file="npc/character/tags/tag.py" line="164">
			<system-out>            self.problems.append(&quot;Tag '{}' is required but limited to zero values&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3110" file="npc/character/tags/tag.py" line="166">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #3111" file="npc/character/tags/tag.py" line="166">
			<system-out>        for value in [v for v in self.hidden_values if not v in self.data]:</system-out>
		</testcase>
		<testcase name="Mutant #3112" file="npc/character/tags/tag.py" line="167">
			<system-out>            self.problems.append(&quot;Value '{}' for tag '{}' cannot be hidden, because it does not exist&quot;.format(value, self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3113" file="npc/character/tags/tag.py" line="170">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3114" file="npc/character/tags/tag.py" line="170">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3115" file="npc/character/tags/tag.py" line="170">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3116" file="npc/character/tags/tag.py" line="170">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3117" file="npc/character/tags/tag.py" line="170">
			<system-out>            if self.limit &gt; -1 and len(self.data) &gt; self.limit:</system-out>
		</testcase>
		<testcase name="Mutant #3118" file="npc/character/tags/tag.py" line="171">
			<system-out>                self.problems.append(&quot;Too many values for tag '{}'. Limit of {}&quot;.format(self.name, self.limit))</system-out>
		</testcase>
		<testcase name="Mutant #3119" file="npc/character/tags/tag.py" line="188">
			<system-out>        if not self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3120" file="npc/character/tags/tag.py" line="189">
			<system-out>            return ''</system-out>
		</testcase>
		<testcase name="Mutant #3121" file="npc/character/tags/tag.py" line="191">
			<system-out>        header_lines = []</system-out>
		</testcase>
		<testcase name="Mutant #3122" file="npc/character/tags/tag.py" line="193">
			<system-out>            header_lines.append(&quot;@{} {}&quot;.format(self.name, val))</system-out>
		</testcase>
		<testcase name="Mutant #3123" file="npc/character/tags/tag.py" line="194">
			<system-out>            if val in self.hidden_values:</system-out>
		</testcase>
		<testcase name="Mutant #3124" file="npc/character/tags/tag.py" line="195">
			<system-out>                header_lines.append(&quot;@hide {} &gt;&gt; {}&quot;.format(self.name, val))</system-out>
		</testcase>
		<testcase name="Mutant #3125" file="npc/character/tags/tag.py" line="198">
			<system-out>            header_lines.append(&quot;@hide {}&quot;.format(self.name))</system-out>
		</testcase>
		<testcase name="Mutant #3126" file="npc/character/tags/tag.py" line="200">
			<system-out>        return &quot;\n&quot;.join(header_lines)</system-out>
		</testcase>
		<testcase name="Mutant #3127" file="npc/character/tags/tag.py" line="217">
			<system-out>        new_tag = copy(self)</system-out>
		</testcase>
		<testcase name="Mutant #3128" file="npc/character/tags/tag.py" line="218">
			<system-out>        new_tag.data = self.data[start:stop]</system-out>
		</testcase>
		<testcase name="Mutant #3129" file="npc/character/tags/tag.py" line="230">
			<system-out>        return self.tagslice(0, 1)</system-out>
		</testcase>
		<testcase name="Mutant #3130" file="npc/character/tags/tag.py" line="230">
			<system-out>        return self.tagslice(0, 1)</system-out>
		</testcase>
		<testcase name="Mutant #3131" file="npc/character/tags/tag.py" line="241">
			<system-out>        return self.tagslice(1, None)</system-out>
		</testcase>
		<testcase name="Mutant #3132" file="npc/character/tags/tag.py" line="251">
			<system-out>            return self[0]</system-out>
		</testcase>
		<testcase name="Mutant #3133" file="npc/character/tags/tag.py" line="272">
			<system-out>        if value == '*' and self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3134" file="npc/character/tags/tag.py" line="272">
			<system-out>        if value == '*' and self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3135" file="npc/character/tags/tag.py" line="272">
			<system-out>        if value == '*' and self.filled:</system-out>
		</testcase>
		<testcase name="Mutant #3136" file="npc/character/tags/tag.py" line="273">
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #3137" file="npc/character/tags/tag.py" line="275">
			<system-out>        value = value.casefold()</system-out>
		</testcase>
		<testcase name="Mutant #3138" file="npc/character/tags/tag.py" line="277">
			<system-out>            if value in real_value.casefold():</system-out>
		</testcase>
		<testcase name="Mutant #3139" file="npc/character/tags/tag.py" line="278">
			<system-out>                return True</system-out>
		</testcase>
		<testcase name="Mutant #3140" file="npc/character/tags/tag.py" line="280">
			<system-out>        return False</system-out>
		</testcase>
		<testcase name="Mutant #3141" file="npc/character/tags/tag.py" line="305">
			<system-out>                continue</system-out>
		</testcase>
	</testsuite>
</testsuites>

