[*] Start mutation process:
   - targets: npc/parser.py
   - tests: tests/test_parser.py
[*] 27 tests passed:
   - test_parser [0.14982 s]
[*] Start mutants generation and execution:
   - [#   1] BCR parser: 
--------------------------------------------------------------------------------
   68:         for name in files:
   69:             target_path = path.join(dirpath, name)
   70:             if target_path in ignore_paths:
   71:                 
-  72:                 continue
+  72:                 break
   73:             (_, ext) = path.splitext(name)
   74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
   75:                 data = parse_character(target_path)
   76:                 characters.append(data)
--------------------------------------------------------------------------------
[0.11765 s] survived
   - [#   2] BCR parser: 
--------------------------------------------------------------------------------
  137:         
  138:         for line in char_file:
  139:             
  140:             if SECTION_RE.match(line):
- 141:                 break
+ 141:                 continue
  142:             
  143:             match = TAG_RE.match(line)
  144:             if match:
  145:                 tag = match.group('tag').lower()
--------------------------------------------------------------------------------
[0.11699 s] survived
   - [#   3] BCR parser: 
--------------------------------------------------------------------------------
  146:                 value = match.group('value')
  147:                 
  148:                 
  149:                 if tag[0] == '#':
- 150:                     continue
+ 150:                     break
  151:                 
  152:                 
  153:                 if tag == 'changeling':
  154:                     
--------------------------------------------------------------------------------
[0.11444 s] survived
   - [#   4] BCR parser: 
--------------------------------------------------------------------------------
  157:                     if len(bits):
  158:                         parsed_char.tags('seeming').append(bits[0])
  159:                     if len(bits) > 1:
  160:                         parsed_char.tags('kith').append(bits[1])
- 161:                     continue
+ 161:                     break
  162:                 elif tag == 'werewolf':
  163:                     parsed_char.tags('type').append('Werewolf')
  164:                     parsed_char.tags('auspice').append(value)
  165:                     continue
--------------------------------------------------------------------------------
[0.11212 s] survived
   - [#   5] BCR parser: 
--------------------------------------------------------------------------------
  161:                     continue
  162:                 elif tag == 'werewolf':
  163:                     parsed_char.tags('type').append('Werewolf')
  164:                     parsed_char.tags('auspice').append(value)
- 165:                     continue
+ 165:                     break
  166:                 
  167:                 
  168:                 if tag == 'realname':
  169:                     parsed_char.tags('name')[0] = value
--------------------------------------------------------------------------------
[0.15832 s] survived
   - [#   6] BCR parser: 
--------------------------------------------------------------------------------
  166:                 
  167:                 
  168:                 if tag == 'realname':
  169:                     parsed_char.tags('name')[0] = value
- 170:                     continue
+ 170:                     break
  171:                 
  172:                 
  173:                 if parsed_char.tags(tag).subtag_name:
  174:                     subtag_registry[parsed_char.tags(tag).subtag_name] = (tag, value)
--------------------------------------------------------------------------------
[0.10796 s] survived
   - [#   7] BCR parser: 
--------------------------------------------------------------------------------
  174:                     subtag_registry[parsed_char.tags(tag).subtag_name] = (tag, value)
  175:                 if tag in subtag_registry:
  176:                     (supertag, supervalue) = subtag_registry[tag]
  177:                     parsed_char.tags(supertag)[supervalue].append(value)
- 178:                     continue
+ 178:                     break
  179:                 
  180:                 
  181:                 if tag == 'hide':
  182:                     parts = HIDE_RE.split(value)
--------------------------------------------------------------------------------
[0.11058 s] survived
   - [#   8] BCR parser: 
--------------------------------------------------------------------------------
  183:                     
  184:                     tagname = parts.pop(0)
  185:                     if not parts:
  186:                         parsed_char.tags(tagname).hidden = True
- 187:                         continue
+ 187:                         break
  188:                     
  189:                     first_value = parts.pop(0)
  190:                     if not parts:
  191:                         parsed_char.tags(tagname).hide_value(first_value)
--------------------------------------------------------------------------------
[0.10935 s] survived
   - [#   9] BCR parser: 
--------------------------------------------------------------------------------
  188:                     
  189:                     first_value = parts.pop(0)
  190:                     if not parts:
  191:                         parsed_char.tags(tagname).hide_value(first_value)
- 192:                         continue
+ 192:                         break
  193:                     
  194:                     second_value = parts.pop(0)
  195:                     if not parts:
  196:                         if second_value == 'subtags':
--------------------------------------------------------------------------------
[0.11051 s] survived
   - [#  10] BCR parser: 
--------------------------------------------------------------------------------
  196:                         if second_value == 'subtags':
  197:                             parsed_char.tags(tagname).subtag(first_value).hidden = True
  198:                         else:
  199:                             parsed_char.tags(tagname).subtag(first_value).hide_value(second_value)
- 200:                         continue
+ 200:                         break
  201:                     
  202:                     
  203:                     
  204:                     parsed_char.tags(value).hidden = True
--------------------------------------------------------------------------------
[0.11008 s] survived
   - [#  11] BCR parser: 
--------------------------------------------------------------------------------
  201:                     
  202:                     
  203:                     
  204:                     parsed_char.tags(value).hidden = True
- 205:                     continue
+ 205:                     break
  206:                 
  207:                 if tag in DEPRECATED_TAGS:
  208:                     print_err("The tag '{}' in `{}` is deprecated and will stop working in the future".format(tag, char_file_path))
  209:                 
--------------------------------------------------------------------------------
[0.10969 s] survived
   - [#  12] BCR parser: 
--------------------------------------------------------------------------------
  211:             else:
  212:                 
  213:                 if line == '\n':
  214:                     if previous_line_empty:
- 215:                         continue
+ 215:                         break
  216:                     else:
  217:                         previous_line_empty = True
  218:                 else:
  219:                     previous_line_empty = False
--------------------------------------------------------------------------------
[0.11048 s] survived
   - [#  13] BCR parser: 
--------------------------------------------------------------------------------
  219:                     previous_line_empty = False
  220:                 
  221:                 
  222:                 parsed_char.tags('description').append(line.strip())
- 223:                 continue
+ 223:                 break
  224:     
  225:     return character.build(other_char=parsed_char)
--------------------------------------------------------------------------------
[0.11050 s] survived
   - [#  14] COD parser: 
--------------------------------------------------------------------------------
   70:             if target_path in ignore_paths:
   71:                 
   72:                 continue
   73:             (_, ext) = path.splitext(name)
-  74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
+  74:             if (ext in VALID_EXTENSIONS or (include_bare and ext)):
   75:                 data = parse_character(target_path)
   76:                 characters.append(data)
   77:     return characters
   78: 
--------------------------------------------------------------------------------
[0.10913 s] survived
   - [#  15] COD parser: 
--------------------------------------------------------------------------------
  100: 
  101:         Returns:
  102:             True if d should be searched, false if it should be ignored
  103:         '''
- 104:         return (base not in ignore and \
+ 104:         return (base in ignore and \
  105:             path.join(base, check) not in ignore)
  106:     
  107:     for (dirpath, dirnames, filenames) in walk(root, followlinks=True):
  108:         dirnames[:] = [d for d in dirnames if should_search(dirpath, d)]
--------------------------------------------------------------------------------
[0.11005 s] survived
   - [#  16] COD parser: 
--------------------------------------------------------------------------------
  101:         Returns:
  102:             True if d should be searched, false if it should be ignored
  103:         '''
  104:         return (base not in ignore and \
- 105:             path.join(base, check) not in ignore)
+ 105:             path.join(base, check) in ignore)
  106:     
  107:     for (dirpath, dirnames, filenames) in walk(root, followlinks=True):
  108:         dirnames[:] = [d for d in dirnames if should_search(dirpath, d)]
  109:         yield (dirpath, dirnames, filenames)
--------------------------------------------------------------------------------
[0.11094 s] survived
   - [#  17] COD parser: 
--------------------------------------------------------------------------------
  181:                 if tag == 'hide':
  182:                     parts = HIDE_RE.split(value)
  183:                     
  184:                     tagname = parts.pop(0)
- 185:                     if not parts:
+ 185:                     if parts:
  186:                         parsed_char.tags(tagname).hidden = True
  187:                         continue
  188:                     
  189:                     first_value = parts.pop(0)
--------------------------------------------------------------------------------
[0.10815 s] survived
   - [#  18] COD parser: 
--------------------------------------------------------------------------------
  186:                         parsed_char.tags(tagname).hidden = True
  187:                         continue
  188:                     
  189:                     first_value = parts.pop(0)
- 190:                     if not parts:
+ 190:                     if parts:
  191:                         parsed_char.tags(tagname).hide_value(first_value)
  192:                         continue
  193:                     
  194:                     second_value = parts.pop(0)
--------------------------------------------------------------------------------
[0.10919 s] survived
   - [#  19] COD parser: 
--------------------------------------------------------------------------------
  191:                         parsed_char.tags(tagname).hide_value(first_value)
  192:                         continue
  193:                     
  194:                     second_value = parts.pop(0)
- 195:                     if not parts:
+ 195:                     if parts:
  196:                         if second_value == 'subtags':
  197:                             parsed_char.tags(tagname).subtag(first_value).hidden = True
  198:                         else:
  199:                             parsed_char.tags(tagname).subtag(first_value).hide_value(second_value)
--------------------------------------------------------------------------------
[0.10775 s] survived
   - [#  20] COI parser: 
--------------------------------------------------------------------------------
   34:     Returns:
   35:         List of Characters generated from every parseable character file within
   36:         every path of search_paths, but not in ignore_paths.
   37:     '''
-  38:     if search_paths is None:
+  38:     if not (search_paths is None):
   39:         search_paths = ['.']
   40:     
   41:     if ignore_paths:
   42:         ignore_paths[:] = [path.normpath(d) for d in ignore_paths]
--------------------------------------------------------------------------------
[0.15139 s] survived
   - [#  21] COI parser: 
--------------------------------------------------------------------------------
   37:     '''
   38:     if search_paths is None:
   39:         search_paths = ['.']
   40:     
-  41:     if ignore_paths:
+  41:     if not ignore_paths:
   42:         ignore_paths[:] = [path.normpath(d) for d in ignore_paths]
   43:     
   44:     return itertools.chain.from_iterable((_parse_path(path, ignore_paths) for path in search_paths))
   45: 
--------------------------------------------------------------------------------
[0.10916 s] survived
   - [#  22] COI parser: 
--------------------------------------------------------------------------------
   57:     Returns:
   58:         List of Characters generated from every parseable character file within
   59:         start_path, but not in ignore_paths.
   60:     '''
-  61:     if path.isfile(start_path):
+  61:     if not (path.isfile(start_path)):
   62:         return [parse_character(start_path)]
   63:     if ignore_paths is None:
   64:         ignore_paths = []
   65:     
--------------------------------------------------------------------------------
[0.10928 s] survived
   - [#  23] COI parser: 
--------------------------------------------------------------------------------
   59:         start_path, but not in ignore_paths.
   60:     '''
   61:     if path.isfile(start_path):
   62:         return [parse_character(start_path)]
-  63:     if ignore_paths is None:
+  63:     if not (ignore_paths is None):
   64:         ignore_paths = []
   65:     
   66:     characters = []
   67:     for (dirpath, _, files) in _walk_ignore(start_path, ignore_paths):
--------------------------------------------------------------------------------
[0.10991 s] survived
   - [#  24] COI parser: 
--------------------------------------------------------------------------------
   66:     characters = []
   67:     for (dirpath, _, files) in _walk_ignore(start_path, ignore_paths):
   68:         for name in files:
   69:             target_path = path.join(dirpath, name)
-  70:             if target_path in ignore_paths:
+  70:             if not (target_path in ignore_paths):
   71:                 
   72:                 continue
   73:             (_, ext) = path.splitext(name)
   74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
--------------------------------------------------------------------------------
[0.10783 s] survived
   - [#  25] COI parser: 
--------------------------------------------------------------------------------
   66:     characters = []
   67:     for (dirpath, _, files) in _walk_ignore(start_path, ignore_paths):
   68:         for name in files:
   69:             target_path = path.join(dirpath, name)
-  70:             if target_path in ignore_paths:
+  70:             if target_path not in ignore_paths:
   71:                 
   72:                 continue
   73:             (_, ext) = path.splitext(name)
   74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
--------------------------------------------------------------------------------
[0.10837 s] survived
   - [#  26] COI parser: 
--------------------------------------------------------------------------------
   70:             if target_path in ignore_paths:
   71:                 
   72:                 continue
   73:             (_, ext) = path.splitext(name)
-  74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
+  74:             if not ((ext in VALID_EXTENSIONS or (include_bare and not ext))):
   75:                 data = parse_character(target_path)
   76:                 characters.append(data)
   77:     return characters
   78: 
--------------------------------------------------------------------------------
[0.10905 s] survived
   - [#  27] COI parser: 
--------------------------------------------------------------------------------
   70:             if target_path in ignore_paths:
   71:                 
   72:                 continue
   73:             (_, ext) = path.splitext(name)
-  74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
+  74:             if (ext not in VALID_EXTENSIONS or (include_bare and not ext)):
   75:                 data = parse_character(target_path)
   76:                 characters.append(data)
   77:     return characters
   78: 
--------------------------------------------------------------------------------
[0.10950 s] survived
   - [#  28] COI parser: 
--------------------------------------------------------------------------------
  136:         previous_line_empty = False
  137:         
  138:         for line in char_file:
  139:             
- 140:             if SECTION_RE.match(line):
+ 140:             if not (SECTION_RE.match(line)):
  141:                 break
  142:             
  143:             match = TAG_RE.match(line)
  144:             if match:
--------------------------------------------------------------------------------
[0.10956 s] survived
   - [#  29] COI parser: 
--------------------------------------------------------------------------------
  140:             if SECTION_RE.match(line):
  141:                 break
  142:             
  143:             match = TAG_RE.match(line)
- 144:             if match:
+ 144:             if not match:
  145:                 tag = match.group('tag').lower()
  146:                 value = match.group('value')
  147:                 
  148:                 
--------------------------------------------------------------------------------
[0.11066 s] survived
   - [#  30] COI parser: 
--------------------------------------------------------------------------------
  145:                 tag = match.group('tag').lower()
  146:                 value = match.group('value')
  147:                 
  148:                 
- 149:                 if tag[0] == '#':
+ 149:                 if not (tag[0] == '#'):
  150:                     continue
  151:                 
  152:                 
  153:                 if tag == 'changeling':
--------------------------------------------------------------------------------
[0.10763 s] survived
   - [#  31] COI parser: 
--------------------------------------------------------------------------------
  149:                 if tag[0] == '#':
  150:                     continue
  151:                 
  152:                 
- 153:                 if tag == 'changeling':
+ 153:                 if not (tag == 'changeling'):
  154:                     
  155:                     bits = value.split(maxsplit=1)
  156:                     parsed_char.tags('type').append('Changeling')
  157:                     if len(bits):
--------------------------------------------------------------------------------
[0.10933 s] survived
   - [#  32] COI parser: 
--------------------------------------------------------------------------------
  153:                 if tag == 'changeling':
  154:                     
  155:                     bits = value.split(maxsplit=1)
  156:                     parsed_char.tags('type').append('Changeling')
- 157:                     if len(bits):
+ 157:                     if not (len(bits)):
  158:                         parsed_char.tags('seeming').append(bits[0])
  159:                     if len(bits) > 1:
  160:                         parsed_char.tags('kith').append(bits[1])
  161:                     continue
--------------------------------------------------------------------------------
[0.11024 s] survived
   - [#  33] COI parser: 
--------------------------------------------------------------------------------
  155:                     bits = value.split(maxsplit=1)
  156:                     parsed_char.tags('type').append('Changeling')
  157:                     if len(bits):
  158:                         parsed_char.tags('seeming').append(bits[0])
- 159:                     if len(bits) > 1:
+ 159:                     if not (len(bits) > 1):
  160:                         parsed_char.tags('kith').append(bits[1])
  161:                     continue
  162:                 elif tag == 'werewolf':
  163:                     parsed_char.tags('type').append('Werewolf')
--------------------------------------------------------------------------------
[0.10963 s] survived
   - [#  34] COI parser: 
--------------------------------------------------------------------------------
  158:                         parsed_char.tags('seeming').append(bits[0])
  159:                     if len(bits) > 1:
  160:                         parsed_char.tags('kith').append(bits[1])
  161:                     continue
- 162:                 elif tag == 'werewolf':
+ 162:                 elif not (tag == 'werewolf'):
  163:                     parsed_char.tags('type').append('Werewolf')
  164:                     parsed_char.tags('auspice').append(value)
  165:                     continue
  166:                 
--------------------------------------------------------------------------------
[0.15291 s] survived
   - [#  35] COI parser: 
--------------------------------------------------------------------------------
  164:                     parsed_char.tags('auspice').append(value)
  165:                     continue
  166:                 
  167:                 
- 168:                 if tag == 'realname':
+ 168:                 if not (tag == 'realname'):
  169:                     parsed_char.tags('name')[0] = value
  170:                     continue
  171:                 
  172:                 
--------------------------------------------------------------------------------
[0.10870 s] survived
   - [#  36] COI parser: 
--------------------------------------------------------------------------------
  169:                     parsed_char.tags('name')[0] = value
  170:                     continue
  171:                 
  172:                 
- 173:                 if parsed_char.tags(tag).subtag_name:
+ 173:                 if not (parsed_char.tags(tag).subtag_name):
  174:                     subtag_registry[parsed_char.tags(tag).subtag_name] = (tag, value)
  175:                 if tag in subtag_registry:
  176:                     (supertag, supervalue) = subtag_registry[tag]
  177:                     parsed_char.tags(supertag)[supervalue].append(value)
--------------------------------------------------------------------------------
[0.10641 s] survived
   - [#  37] COI parser: 
--------------------------------------------------------------------------------
  171:                 
  172:                 
  173:                 if parsed_char.tags(tag).subtag_name:
  174:                     subtag_registry[parsed_char.tags(tag).subtag_name] = (tag, value)
- 175:                 if tag in subtag_registry:
+ 175:                 if not (tag in subtag_registry):
  176:                     (supertag, supervalue) = subtag_registry[tag]
  177:                     parsed_char.tags(supertag)[supervalue].append(value)
  178:                     continue
  179:                 
--------------------------------------------------------------------------------
[0.11131 s] survived
   - [#  38] COI parser: 
--------------------------------------------------------------------------------
  171:                 
  172:                 
  173:                 if parsed_char.tags(tag).subtag_name:
  174:                     subtag_registry[parsed_char.tags(tag).subtag_name] = (tag, value)
- 175:                 if tag in subtag_registry:
+ 175:                 if tag not in subtag_registry:
  176:                     (supertag, supervalue) = subtag_registry[tag]
  177:                     parsed_char.tags(supertag)[supervalue].append(value)
  178:                     continue
  179:                 
--------------------------------------------------------------------------------
[0.10871 s] survived
   - [#  39] COI parser: 
--------------------------------------------------------------------------------
  177:                     parsed_char.tags(supertag)[supervalue].append(value)
  178:                     continue
  179:                 
  180:                 
- 181:                 if tag == 'hide':
+ 181:                 if not (tag == 'hide'):
  182:                     parts = HIDE_RE.split(value)
  183:                     
  184:                     tagname = parts.pop(0)
  185:                     if not parts:
--------------------------------------------------------------------------------
[0.10835 s] survived
   - [#  40] COI parser: 
--------------------------------------------------------------------------------
  181:                 if tag == 'hide':
  182:                     parts = HIDE_RE.split(value)
  183:                     
  184:                     tagname = parts.pop(0)
- 185:                     if not parts:
+ 185:                     if not ((not parts)):
  186:                         parsed_char.tags(tagname).hidden = True
  187:                         continue
  188:                     
  189:                     first_value = parts.pop(0)
--------------------------------------------------------------------------------
[0.10887 s] survived
   - [#  41] COI parser: 
--------------------------------------------------------------------------------
  186:                         parsed_char.tags(tagname).hidden = True
  187:                         continue
  188:                     
  189:                     first_value = parts.pop(0)
- 190:                     if not parts:
+ 190:                     if not ((not parts)):
  191:                         parsed_char.tags(tagname).hide_value(first_value)
  192:                         continue
  193:                     
  194:                     second_value = parts.pop(0)
--------------------------------------------------------------------------------
[0.11015 s] survived
   - [#  42] COI parser: 
--------------------------------------------------------------------------------
  191:                         parsed_char.tags(tagname).hide_value(first_value)
  192:                         continue
  193:                     
  194:                     second_value = parts.pop(0)
- 195:                     if not parts:
+ 195:                     if not ((not parts)):
  196:                         if second_value == 'subtags':
  197:                             parsed_char.tags(tagname).subtag(first_value).hidden = True
  198:                         else:
  199:                             parsed_char.tags(tagname).subtag(first_value).hide_value(second_value)
--------------------------------------------------------------------------------
[0.10925 s] survived
   - [#  43] COI parser: 
--------------------------------------------------------------------------------
  192:                         continue
  193:                     
  194:                     second_value = parts.pop(0)
  195:                     if not parts:
- 196:                         if second_value == 'subtags':
+ 196:                         if not (second_value == 'subtags'):
  197:                             parsed_char.tags(tagname).subtag(first_value).hidden = True
  198:                         else:
  199:                             parsed_char.tags(tagname).subtag(first_value).hide_value(second_value)
  200:                         continue
--------------------------------------------------------------------------------
[0.10973 s] survived
   - [#  44] COI parser: 
--------------------------------------------------------------------------------
  203:                     
  204:                     parsed_char.tags(value).hidden = True
  205:                     continue
  206:                 
- 207:                 if tag in DEPRECATED_TAGS:
+ 207:                 if not (tag in DEPRECATED_TAGS):
  208:                     print_err("The tag '{}' in `{}` is deprecated and will stop working in the future".format(tag, char_file_path))
  209:                 
  210:                 parsed_char.tags(tag).append(value)
  211:             else:
--------------------------------------------------------------------------------
[0.11020 s] survived
   - [#  45] COI parser: 
--------------------------------------------------------------------------------
  203:                     
  204:                     parsed_char.tags(value).hidden = True
  205:                     continue
  206:                 
- 207:                 if tag in DEPRECATED_TAGS:
+ 207:                 if tag not in DEPRECATED_TAGS:
  208:                     print_err("The tag '{}' in `{}` is deprecated and will stop working in the future".format(tag, char_file_path))
  209:                 
  210:                 parsed_char.tags(tag).append(value)
  211:             else:
--------------------------------------------------------------------------------
[0.10949 s] survived
   - [#  46] COI parser: 
--------------------------------------------------------------------------------
  209:                 
  210:                 parsed_char.tags(tag).append(value)
  211:             else:
  212:                 
- 213:                 if line == '\n':
+ 213:                 if not (line == '\n'):
  214:                     if previous_line_empty:
  215:                         continue
  216:                     else:
  217:                         previous_line_empty = True
--------------------------------------------------------------------------------
[0.11087 s] survived
   - [#  47] COI parser: 
--------------------------------------------------------------------------------
  210:                 parsed_char.tags(tag).append(value)
  211:             else:
  212:                 
  213:                 if line == '\n':
- 214:                     if previous_line_empty:
+ 214:                     if not previous_line_empty:
  215:                         continue
  216:                     else:
  217:                         previous_line_empty = True
  218:                 else:
--------------------------------------------------------------------------------
[0.10967 s] survived
   - [#  48] LCR parser: 
--------------------------------------------------------------------------------
   70:             if target_path in ignore_paths:
   71:                 
   72:                 continue
   73:             (_, ext) = path.splitext(name)
-  74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
+  74:             if (ext in VALID_EXTENSIONS and (include_bare and not ext)):
   75:                 data = parse_character(target_path)
   76:                 characters.append(data)
   77:     return characters
   78: 
--------------------------------------------------------------------------------
[0.14210 s] survived
   - [#  49] LCR parser: 
--------------------------------------------------------------------------------
   70:             if target_path in ignore_paths:
   71:                 
   72:                 continue
   73:             (_, ext) = path.splitext(name)
-  74:             if (ext in VALID_EXTENSIONS or (include_bare and not ext)):
+  74:             if (ext in VALID_EXTENSIONS or (include_bare or not ext)):
   75:                 data = parse_character(target_path)
   76:                 characters.append(data)
   77:     return characters
   78: 
--------------------------------------------------------------------------------
[0.10992 s] survived
   - [#  50] LCR parser: 
--------------------------------------------------------------------------------
  100: 
  101:         Returns:
  102:             True if d should be searched, false if it should be ignored
  103:         '''
- 104:         return (base not in ignore and \
+ 104:         return (base not in ignore or \
  105:             path.join(base, check) not in ignore)
  106:     
  107:     for (dirpath, dirnames, filenames) in walk(root, followlinks=True):
  108:         dirnames[:] = [d for d in dirnames if should_search(dirpath, d)]
--------------------------------------------------------------------------------
[0.10807 s] survived
   - [#  51] ROR parser: 
--------------------------------------------------------------------------------
  145:                 tag = match.group('tag').lower()
  146:                 value = match.group('value')
  147:                 
  148:                 
- 149:                 if tag[0] == '#':
+ 149:                 if tag[0] != '#':
  150:                     continue
  151:                 
  152:                 
  153:                 if tag == 'changeling':
--------------------------------------------------------------------------------
[0.11067 s] survived
   - [#  52] ROR parser: 
--------------------------------------------------------------------------------
  149:                 if tag[0] == '#':
  150:                     continue
  151:                 
  152:                 
- 153:                 if tag == 'changeling':
+ 153:                 if tag != 'changeling':
  154:                     
  155:                     bits = value.split(maxsplit=1)
  156:                     parsed_char.tags('type').append('Changeling')
  157:                     if len(bits):
--------------------------------------------------------------------------------
[0.11030 s] survived
   - [#  53] ROR parser: 
--------------------------------------------------------------------------------
  155:                     bits = value.split(maxsplit=1)
  156:                     parsed_char.tags('type').append('Changeling')
  157:                     if len(bits):
  158:                         parsed_char.tags('seeming').append(bits[0])
- 159:                     if len(bits) > 1:
+ 159:                     if len(bits) < 1:
  160:                         parsed_char.tags('kith').append(bits[1])
  161:                     continue
  162:                 elif tag == 'werewolf':
  163:                     parsed_char.tags('type').append('Werewolf')
--------------------------------------------------------------------------------
[0.10860 s] survived
   - [#  54] ROR parser: 
--------------------------------------------------------------------------------
  155:                     bits = value.split(maxsplit=1)
  156:                     parsed_char.tags('type').append('Changeling')
  157:                     if len(bits):
  158:                         parsed_char.tags('seeming').append(bits[0])
- 159:                     if len(bits) > 1:
+ 159:                     if len(bits) >= 1:
  160:                         parsed_char.tags('kith').append(bits[1])
  161:                     continue
  162:                 elif tag == 'werewolf':
  163:                     parsed_char.tags('type').append('Werewolf')
--------------------------------------------------------------------------------
[0.10856 s] survived
   - [#  55] ROR parser: 
--------------------------------------------------------------------------------
  158:                         parsed_char.tags('seeming').append(bits[0])
  159:                     if len(bits) > 1:
  160:                         parsed_char.tags('kith').append(bits[1])
  161:                     continue
- 162:                 elif tag == 'werewolf':
+ 162:                 elif tag != 'werewolf':
  163:                     parsed_char.tags('type').append('Werewolf')
  164:                     parsed_char.tags('auspice').append(value)
  165:                     continue
  166:                 
--------------------------------------------------------------------------------
[0.11746 s] survived
   - [#  56] ROR parser: 
--------------------------------------------------------------------------------
  164:                     parsed_char.tags('auspice').append(value)
  165:                     continue
  166:                 
  167:                 
- 168:                 if tag == 'realname':
+ 168:                 if tag != 'realname':
  169:                     parsed_char.tags('name')[0] = value
  170:                     continue
  171:                 
  172:                 
--------------------------------------------------------------------------------
[0.10733 s] survived
   - [#  57] ROR parser: 
--------------------------------------------------------------------------------
  177:                     parsed_char.tags(supertag)[supervalue].append(value)
  178:                     continue
  179:                 
  180:                 
- 181:                 if tag == 'hide':
+ 181:                 if tag != 'hide':
  182:                     parts = HIDE_RE.split(value)
  183:                     
  184:                     tagname = parts.pop(0)
  185:                     if not parts:
--------------------------------------------------------------------------------
[0.10892 s] survived
   - [#  58] ROR parser: 
--------------------------------------------------------------------------------
  192:                         continue
  193:                     
  194:                     second_value = parts.pop(0)
  195:                     if not parts:
- 196:                         if second_value == 'subtags':
+ 196:                         if second_value != 'subtags':
  197:                             parsed_char.tags(tagname).subtag(first_value).hidden = True
  198:                         else:
  199:                             parsed_char.tags(tagname).subtag(first_value).hide_value(second_value)
  200:                         continue
--------------------------------------------------------------------------------
[0.11003 s] survived
   - [#  59] ROR parser: 
--------------------------------------------------------------------------------
  209:                 
  210:                 parsed_char.tags(tag).append(value)
  211:             else:
  212:                 
- 213:                 if line == '\n':
+ 213:                 if line != '\n':
  214:                     if previous_line_empty:
  215:                         continue
  216:                     else:
  217:                         previous_line_empty = True
--------------------------------------------------------------------------------
[0.10858 s] survived
[*] Mutation score [11.53969 s]: 0.0%
   - all: 59
   - killed: 0 (0.0%)
   - survived: 59 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
